%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%
% Authors: Ana Cristina Rocha Oliveira(*)
%          Mauricio Ayala-Rincon(*)
%          Maribel Fernandez(**)
%          (*)Universidade de Brasilia, (**)King's College London
% Last modified: 27 April 2015
% This is the main subtheory of the theory Nominal Unification
% Here, a functional specification of nominal unification is
% given and formalised its soundness and correcteness.
% 
%                >>>> This is the top theory <<<<
%
% Comments reference Definitions, Lemmas and Theorems from the accompaining report
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

nominalunif: THEORY
BEGIN
	IMPORTING substitution,
		  structure_extra[[variable,term]],
		  atoms

	Delta, Nabla: VAR fresh_context
	sigma, gamma, theta: VAR Sub
	t, s, u: VAR term
	X: VAR variable

	% TODO: unify_lst - boolean that indicates whether the algorith unify_wrapper is working as unify or unify_lst
        lst_t: VAR list[term]
	lst_s: VAR list[term]
	
% TODO: a fixed point equation is a permutation and a variable
fix_pnt_eq: TYPE = [perm, variable]
fix_pnt_eq_lst: VAR list[fix_pnt_eq]

% TODO: a unification problem is a list containing the two terms to be unified
unif_prb: TYPE = [term, term]
unif_prb_lst: VAR list[unif_prb]

% TODO: one nominal solution is a list consisting of a fresh context and a substitution. 
nominal_sol:  TYPE = [fresh_context, Sub, list[fix_pnt_eq]]

% TODO: variables needed to specify algorithm
sol: VAR nominal_sol
sol_lst: VAR list[nominal_sol]

% Why are unifiable and unifier defined? I mean: they don't seem to be used anywhere
% Two terms are unifiable if there is a solution (Delta, sigma)
% that makes them alpha-equivalent.
% Definition 4.1
unifiable?(t, s): bool =
   EXISTS(Delta, sigma): 
   alpha(Delta)(Subs(sigma)(t), Subs(sigma)(s))

% A unifier is a unification solution to unifiable terms.

% Definition 4.1
unifier(t, (s | unifiable?(t,s)))(Delta,sigma): bool =
   alpha(Delta)(Subs(sigma)(t), Subs(sigma)(s))

   	solve1, solve2: VAR [fresh_context, Sub, bool]

% Concatenation of contexts and substitutions/
% conjunction of booleans (concatenating triplets).
x(solve1, solve2): [fresh_context, Sub, bool] =
   IF solve1`3 AND solve2`3
      THEN (append(solve1`1, solve2`1),append(solve1`2, solve2`2), TRUE)
      ELSE ((::), Id, FALSE)
   ENDIF

%%%%% auxiliary functions for the main function in the algorithm
% applies a substitution to a list of unification problems. Apply substitution to every term in unification problem list
% return the resulting unification problem list 
apply_sub_prb_lst(sigma, unif_prb_lst): RECURSIVE list[unif_prb] =
IF null(unif_prb_lst) THEN (::)
ELSE LET t = car(unif_prb_lst)`1,
     	 s = car(unif_prb_lst)`2,
	 new_t = Subs(sigma)(t),
	 new_s = Subs(sigma)(s),
	 new_unif_prb = (:(new_t, new_s):) 
	 IN append(new_unif_prb, apply_sub_prb_lst(sigma, cdr(unif_prb_lst)))
ENDIF
MEASURE unif_prb_lst BY <<          

% convert a list of fixpoint equations to a list of unification problems via a substitution and apply substitution to them 
fix_pnt_to_unif_prb_via_sub(sigma, fix_pnt_eq_lst): RECURSIVE list[unif_prb] =
IF null(fix_pnt_eq_lst) THEN (::)
ELSE LET fix_pnt_eq = car(fix_pnt_eq_lst),
     	 perm = fix_pnt_eq`1, 
	 variable = fix_pnt_eq`2,
	 t = *(perm, variable), 
	 s = *((::), variable),
	 new_t = Subs(sigma)(t),
	 new_s = Subs(sigma)(s),
	 new_unif_prb = (:(new_t, new_s):)
	 IN append(new_unif_prb, fix_pnt_to_unif_prb_via_sub(sigma, cdr(fix_pnt_eq_lst))) 
ENDIF
MEASURE fix_pnt_eq_lst BY <<

%%%%% end of auxiliary functions for main algorithm

%%% function to unify a list of terms 
unify(Delta, sigma, unif_prb_lst, fix_pnt_eq_lst): RECURSIVE list[nominal_sol] =
% base case: if there is no problem left to unify, the solution given is good enough
IF null(unif_prb_lst) THEN (:(Delta, sigma, fix_pnt_eq_lst):)
% start unifying first problem of the list
ELSE LET t = car(unif_prb_lst)`1, s = car(unif_prb_lst)`2
     	 IN % we divide in cases
	    IF susp?(s) AND NOT occurs(V(s), t)
	    THEN LET % substitution that will be added 
	             sigma1 = (: (V(s), ext(reverse(p(s)))(t) ) :),
		     % apply substitution to context and check if it is consistent
		     (new_Delta, bool1) = fresh_subs?(sigma1, Delta),
		     % get new substitution list 
		     new_sigma = append(sigma1, sigma), 
	    	     % get new problem list - apply substitution to remaining problems and to fixpoint equations.
		     % convert fixpoint equations back on unification problems
		     unif_prb_lst1 = apply_sub_prb_lst(sigma1, cdr(unif_prb_lst)), 
		     unif_prb_lst2 = fix_pnt_to_unif_prb_via_sub(sigma1, fix_pnt_eq_lst),
		     new_unif_prb_lst = append(unif_prb_lst1, unif_prb_lst2)
		     % output solution, take into account if context and fix point equations remain consistent
		     IN IF bool1 THEN unify(new_Delta, new_sigma, new_unif_prb_lst, (::))
		        ELSE (::) % here, OR the context is not fresh anymore OR the fixpoint equations lst is not consistent anymore
			ENDIF
            ELSE CASES t OF
	    	 at(a): IF s = at(a) THEN unify(Delta, sigma, cdr(unif_prb_lst), fix_pnt_eq_lst) 
      		 	ELSE (::)
			ENDIF,
			
		 % this case is similar to s being a suspension	   
	         *(pm, X): IF NOT occurs(X, s) THEN LET % this is the same as the case above where s is a suspension.
	             					sigma1 = (: (V(s), ext(reverse(p(s)))(t) ) :),
		   					(new_Delta, bool1) = fresh_subs?(sigma1, Delta),
							new_sigma = append(sigma1, sigma), 
							unif_prb_lst1 = apply_sub_prb_lst(sigma1, cdr(unif_prb_lst)), 
		     					unif_prb_lst2 = fix_pnt_to_unif_prb_via_sub(sigma1, fix_pnt_eq_lst),
		     					new_unif_prb_lst = append(unif_prb_lst1, unif_prb_lst2)
							IN IF bool1 THEN unify(new_Delta, new_sigma, new_unif_prb_lst, (::))
		       					ELSE (::)
							ENDIF
		       	   ELSIF susp?(s) AND occurs(X, s) THEN LET new_fix_pnt_eq = (:(append(pm, reverse(p(s))), X):),
			   	 	      		   	    new_fix_pnt_eq_lst = append(new_fix_pnt_eq, fix_pnt_eq_lst)
			   	 	      		   	    IN unify(Delta, sigma, cdr(unif_prb_lst), new_fix_pnt_eq_lst)
			   ELSE (::) 
			   ENDIF, 

		 unit: IF s = unit THEN unify(Delta, sigma, cdr(unif_prb_lst), fix_pnt_eq_lst)
		       ELSE (::)
		       ENDIF,

		 pair(t1, t2): IF NOT pair?(s) THEN (::)
		               ELSE LET unif_prb1 = (:(t1, term1(s)):),
			       	    	unif_prb2 = (:(t2, term2(s)):),
			                new_unif_prb_lst = append(append(unif_prb1, unif_prb2), cdr(unif_prb_lst))
			       	    IN  unify(Delta, sigma, new_unif_prb_lst, fix_pnt_eq_lst)
			       ENDIF, 

                 abs(a, bd): IF NOT abs?(s) THEN (::)
		 	     ELSIF a = abstr(s) THEN LET new_unif_prb = (:(bd, body(s)):),
			     	       		     	 new_unif_prb_lst = append(new_unif_prb, cdr(unif_prb_lst))
							 IN unify(Delta, sigma, new_unif_prb_lst, fix_pnt_eq_lst)
		             ELSE LET % derives minimal context in which a is fresh in body(s) 
			     	      (Delta1, bool1) = fresh?(a, body(s)),
				      % new context under which we must unify the remaining problems 
				      new_Delta = append(Delta1, Delta),
				      % new problem to be unified
				      new_unif_prb = (: (bd, ext((: (a, abstr(s)) :))(body(s))) :),
				      new_unif_prb_lst = append(new_unif_prb, cdr(unif_prb_lst))
				      % unify
				      IN IF bool1 THEN unify(new_Delta, sigma, new_unif_prb_lst, fix_pnt_eq_lst)
				      	 ELSE (::)
					 ENDIF
			     ENDIF,

	         app(f, ag): IF NOT app?(s) OR f /= sym(s) THEN (::)
		 	     ELSE LET new_unif_prb = (:(ag, arg(s)):),
			     	      new_unif_prb_lst = append(new_unif_prb, cdr(unif_prb_lst))
				      IN unify(Delta, sigma, new_unif_prb_lst, fix_pnt_eq_lst)
			     ENDIF,

		c_app(f, c_arg): IF NOT c_app?(s) OR NOT pair?(arg(t)) OR NOT pair?(arg(s)) OR f /= sym(s) THEN (::)
			 	 ELSE LET % solve problem, trying to unify (t1 with s1) and (t2 with s2)
					  unif_prb1_1 = (:(term1(arg(t)), term1(arg(s))):),
					  unif_prb2_2 = (:(term2(arg(t)), term2(arg(s))):),
					  unif_prb_lst1 = append(append(unif_prb1_1, unif_prb2_2), cdr(unif_prb_lst)),
					  sol1 = unify(Delta, sigma, unif_prb_lst1, fix_pnt_eq_lst),
					  % solve problem, trying to unify (t1 with s2) and (t2 with s3)
					  unif_prb1_2 = (:(term1(arg(t)), term2(arg(s))):),
					  unif_prb2_1 = (:(term2(arg(t)), term1(arg(s))):),
					  unif_prb_lst2 = append(append(unif_prb1_2, unif_prb2_2), cdr(unif_prb_lst)),
					  sol2 = unify(Delta, sigma, unif_prb_lst2, fix_pnt_eq_lst)
					  IN append(sol1, sol2) 
			 	 ENDIF 
	        ENDCASES
	    ENDIF
ENDIF
MEASURE lex2(length(unif_prb_lst), length(unif_prb_lst))
% lex 3 -> TODO? (number of variables in all problems, number of commutative symbols, sum of depth of terms) 

% new soundness of unify - TODO: how should i specify this?
%unify_sound: LEMMA
%FORALL (Delta, sigma, fix_pnt_eq_lst) IN unify((::), (::), (:(t, s):), (::))
%alpha(Delta, fix_pnt_eq_lst)(sigma(t), sigma(s)) % extend this procedure to be alpha equivalence under a context AND a list of fixpoint equations 

% new completeness of unify - TODO

%%%%%%%%%%%%
%  original function
unify(t,s): RECURSIVE [fresh_context, Subs_unif(t,s), bool] =
   IF susp?(s) AND NOT occurs(V(s), t)
      THEN ((::),(:(V(s),ext(reverse(p(s)))(t)):),TRUE)
      ELSE
   CASES t OF
   	 at(a): ((::),Id,s=at(a)),
	 *(pm,X): IF NOT occurs(X,s) THEN ((::),(:(X,ext(reverse(pm))(s)):),TRUE)
	 	     ELSE LET SOL = alpha?(pm * X, s) IN
		     	  (SOL`1,Id,SOL`2) ENDIF,
	 unit: ((::),Id,s=unit),
	 pair(t1,t2): IF NOT pair?(s) THEN ((::), Id, FALSE) 
	 	      	 ELSE LET (Delta1, sig1, b1) = unify(t1,term1(s)),
			      	  (Delta2, sig2, b2) = unify(Subs(sig1)(t2),Subs(sig1)(term2(s))),
			      	  (Delta3, b3) = fresh_subs?(sig2, Delta1) IN
			          x((Delta2,sig2,b2), (Delta3,sig1, b1 AND b3)) ENDIF,	
	 abs(a,bd): IF NOT abs?(s) THEN ((::), Id, FALSE)
		       ELSIF a = abstr(s)
			     THEN unify(bd, body(s))	
			     ELSE LET (Delta1, sig, b1) = unify(bd, ext((:(a,abstr(s)):))(body(s))),
				      (Delta2, b2) = fresh?(a, Subs(sig)(body(s))) IN
				      x((Delta2, Id, b2), (Delta1, sig, b1)) ENDIF,
	 app(f,ag): IF NOT app?(s) OR f /= sym(s) THEN ((::), Id, FALSE)
		       ELSE unify(ag, arg(s)) ENDIF
ENDCASES ENDIF
MEASURE lex2(card(Vars(t,s)), depth(t))

% Soundness of unify.
unify_sound: LEMMA % Lemma 4.10
   LET (Delta, sig, b) = unify(t, s) IN
   b => alpha(Delta)(Subs(sig)(t), Subs(sig)(s))

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Partial order over pairs (Context x substitution).
less((Delta, sigma), (Nabla,gamma)): bool = % Definition 4.11
   EXISTS theta:
   fresh_subs(Nabla)(theta, Delta) AND
   FORALL X : alpha(Nabla)(Subs(append(theta,sigma))((::)*X), Subs(gamma)((::)*X))

% Completeness of unify.
unify_complete: THEOREM % Theorem 4.12
   LET (Nabla, gamma, b) = unify(t, s) IN
   alpha(Delta)(Subs(sigma)(t), Subs(sigma)(s)) 
   IMPLIES b AND less(Nabla, gamma, Delta, sigma)

END nominalunif
