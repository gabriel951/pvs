%%%%%%%%%%%%
% Auxiliar functions for the algorithm unify wrapper
% The following are the auxiliar function for the algorithm:
  % apply subs
  % apply_lst_sub_lst_ctxt

%% Function: apply_subs.
%  Receives:
	% 1. A list of nominal solutions, which contains the substitutions to be applied simultaneously to terms t and s
	% 2. A term t
	% 3. A term s 
%  Returns:
	% a list containing two elements. The first element is a list of term in which each term is the result of applying a substitution to the term t.
	% The second element is also a list of terms: each term is the result of applying the same substitution to the term s
apply_subs(sol_lst, t, s): RECURSIVE [list[term] , list[term]] = 
    IF null(sol_lst) THEN ((::), (::)) 
    ELSE LET sub = car(sol_lst)`2,
	     t_first_lst = (:Subs(sub)(t):),
	     s_first_lst = (:Subs(sub)(t):),
	     (t_tail_lst, s_tail_lst) = apply_subs(cdr(sol_lst), t, s),
	     lst_t = append(t_first_lst, t_tail_lst),
	     lst_s = append(s_first_lst, s_tail_lst) 
	     IN (lst_t, lst_s)
    ENDIF
MEASURE sol_lst BY <<


%% Function: apply_lst_sub_lst_ctxt
% Variables needed for this function
sol_lst1_pre: VAR list[nominal_sol] % preliminar list of solutions for unificating first terms of a pair
sol_lst2_final: VAR list[nominal_sol] % final list of solutions for unificating second terms of a pair

% This function applies a list of substitutions to a list of contexts, if it's possible.
% To see if it's possible to apply a substitution to a context, we call function fresh_subs?
% Function receives:
  % 1. List of preliminar solutions, from which we obtain list of preliminar contexts
  % 2. List of solutions for second term, from which we obtain list of substitutions to be applied
% Returns:
  % A list of solutions from the preliminar list given, taking into account if they satisfy the substitutions from the second list
sol_lst_fst_final = apply_lst_sub_lst_ctxt(sol_lst1_pre, sol_lst2_final): RECURSIVE list[nominal_sol] =
    % if any of the two lists is null, it was not possible to find a solution for one part of the problem, so we return
    % an empty list, 
    IF null(sol_lst_snd) OR null(sol_lst_sn) THEN (::)
    % apply every substitution to head of the list and then apply t 
    ELSE LET sub_head = car(sol_lst2_final),
    	     sol_lst1_pre_head = car(sol_lst1_pre),
	     (ctxt_final, bool1) = fresh_subs?(sub_head, sol_lst1_pre_head`1) % bool1 is not needed
	     sol_first = (ctxt_final, , ) % TODO: apply subs to fix point equation too!

 ELSE LET (Delta1, sig1, b1) = unify(t1,term1(s)),
			      	  (Delta2, sig2, b2) = unify(Subs(sig1)(t2),Subs(sig1)(term2(s))),
			      	  (Delta3, b3) = fresh_subs?(sig2, Delta1) IN
			          x((Delta2,sig2,b2), (Delta3,sig1, b1 AND b3)) ENDIF,	

%%%%%%%%%% END

% The function unify_wrapper encapsulates two functions (unify) and (unify_lst) in one.
% The function unify calls unify_lst, and unify_lst calls unify. However, since PVS does not support mutual recursion, we need to
% encapsulate them both in the same function. A boolean parameter decides which function is currently running. The return type is
% the same for both functions: a list of nominal solutions.
% Function receives:
  % 1. Term t to unify (if we are in function unify)
  % 2. Term s to unify (if we are in function unify) 
  % 3. Boolean unify_lst. If FALSE, we are unifying two terms (we are in function unify). If TRUE, we are unifying two lists (we
               		   % are in function unify_lst)
  % 4. lst_t to unify (if we are in function unify_lst)
  % 5. lst_s to unify (if we are in function unify_lst)
% Function returns
  % a list of nominal solution. The list is empty if no solution could be found.  
unify_wrapper(t, s, unify_lst, lst_t, lst_s): RECURSIVE list[nominal_sol] = 

    % if unify_lst is True, we are trying to unify lst_t and lst_s. 
    IF unify_lst THEN
       IF null(lst_t) OR null(lst_s) THEN (::)
       % append list of solutions of head with list of solutions of tail of the list
       ELSE LET sol_head = unify_wrapper(car(lst_t), car(lst_s), FALSE, (::), (::)),
       	    	sol_tail = unify_wrapper(t, s, TRUE, cdr(lst_t), cdr(lst_s)) IN
		append(sol_head, sol_tail)
       ENDIF

    % if unify_lst is False, we are in the normal algorithm for unifying two terms 
    ELSE
	% handle case of s being a suspended variable not occurring in t
	IF susp?(s) AND NOT occurs(V(s), t) THEN
	LET sol = ( (::), (: (V(s), ext(reverse(p(s)))(t)) :), (::)) IN
	       (:sol:)
	       
	ELSE CASES t of
	     % atom - simple base case of our induction
	     at(a): IF s = at(a) THEN LET sol = ( (::), Id, (::)) IN
	     	       	   	      	  (:sol:)
		    ELSE (::)
		    ENDIF, 

	     % suspended variable - TODO: i am not calling function alpha? (from Ana's specification)
	     *(pm, X): IF NOT occurs(X, s) THEN LET sol = ((::), (: (X, ext(reverse(pm))(s)) :), (::)) IN
	     	       	      		   	    (:sol:)
		       % TODO: here we have a fixed point problem. Adapt algorithm?
		       ELSIF susp?(s) AND occurs(X, s) THEN LET fxd_pnt_eq = (append(pm, reverse(p(s))), X),
		       	     	      	  	       	    	sol = ((::), Id, (:fxd_pnt_eq:)) IN
                       	     	      	  	       	    	(:sol:)
		       ELSE (::)                              % here, t is a suspension and s is not a suspension, but it contains X.
                 	  				      % there is no possible solution
		       ENDIF,

	     % unit - a simple base case of our induction
	     unit: IF s = unit THEN LET sol = ( (::), Id, (::)) IN
	     	      	       	    	(:sol:)
		   ELSE (::)
		   ENDIF,

	     % pair - TODO: i'll need to code 2 auxiliary functions
	     pair(t1, t2): IF NOT pair?(s) THEN (::)
	                   ELSE LET % unify first terms - obtain preliminar list of solutions
			            sol_lst_fst_pre = unify_wrapper(t1, term1(s), FALSE, (::), (::)), 
                                    % apply every possible substitution to second terms
                                    (t2_subs_lst, s2_subs_lst) = apply_subs(sol_lst_fst_pre, t2, term2(s))
				    % unify list of second terms 
				    sol_lst_snd = unify_wrapper(t, s, TRUE, t2_subs_lst, s2_subs_lst),
				    % applies list of substitutions to list of contexts (if possible) obtaining new contexts for fst solution
				    % also, applies list 	     of substitutions to list of fixpoint equations, obtaining new fixpoint equations for second solution
				    sol_lst_fst_final = apply_lst_sub_lst_ctxt(sol_lst_fst_pre, sol_lst_snd)
				    % concatenate lists of solutions
				    IN append(sol_lst_fst_final, sol_lst_snd)
		           ENDIF,

	     % abstraction - TODO: I will need to code two more functions.
	     abs(a, bd): IF NOT abs?(s) THEN (::)
	       	         ELSIF a = abstr(s) THEN unify_wrapper(bd, body(s), FALSE, (::), (::))
		         ELSE (::) LET % unify body of abstractions, according to the rules. Obtain preliminar list of solutions
			               sol_lst1 = unify_wrapper(bd, ext((:(a, abstr(s)):))(body(s)), FALSE, (::), (::)),
		    	               % TODO: for each solution of the list, compute the minimal context in which a is fresh on the body 
			               (Delta_lst, bool_lst) = fresh?_lst(a, body(s), sol_lst1)
				       % concatenate this list of contexts with the solutions, case the boolean indicate it is possible
				       IN add_context_aux(Delta_lst, bool_lst, sol_lst1)
		         ENDIF,

	     % application of a function - easy commutative case
             app(f, ag): IF NOT app?(s) OR f /= sym(s) THEN (::)
	     	    	 ELSE unify_wrapper(ag, arg(s), FALSE, (::), (::))
			 ENDIF, 
	     
	     % commutative function - how should we handle commutative functions not being called with a pair?
	     c_app(f, c_arg): IF NOT c_app?(s) OR NOT pair?(arg(t)) OR NOT pair?(arg(s)) OR f /= sym(s) THEN (::)
	     	      	      % try both ways of unifying the pair (t1, t2) with (s1, s2) and concatenate this solutions
	     	      	      ELSE LET sol1_lst = unify_wrapper(pair(term1(arg(t)), term2(arg(t))), pair(term1(arg(s)), term2(arg(s))), FALSE, (::), (::)),
			      	       sol2_lst = unify_wrapper(pair(term1(arg(t)), term2(arg(t))), pair(term2(arg(s)), term1(arg(s))), FALSE, (::), (::))
				       IN append(sol1_lst, sol2_lst) 
			      ENDIF	     
	ENDCASES
    ENDIF
ENDIF
MEASURE lex2(card(Vars(t,s)), depth(t))
% TODO: Here, I need to add the length of lst_t. There is lex3 on PVS 

