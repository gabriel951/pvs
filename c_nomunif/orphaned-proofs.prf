("nominal_term" |nominal_term| |Vars_TCC5| 0 (|Vars_TCC5-1| NIL 3747238349 NIL ("" (TERMINATION-TCC) NIL NIL) NIL NIL NIL NIL NIL NIL))("nominal_term" |nominal_term| |Vars_TCC4| 0 (|Vars_TCC4-1| NIL 3747238349 NIL ("" (TERMINATION-TCC) NIL NIL) NIL NIL NIL NIL NIL NIL))("nominal_term" |nominal_term| |Vars_TCC3| 0 (|Vars_TCC3-1| NIL 3747238349 NIL ("" (TERMINATION-TCC) NIL NIL) NIL NIL NIL NIL NIL NIL))("nominal_term" |nominal_term| |Vars_TCC2| 0 (|Vars_TCC2-1| NIL 3747238196 NIL ("" (CASES-TCC) NIL NIL) NIL NIL NIL NIL NIL NIL))("nominal_term" |nominal_term| |Vars_TCC1| 0 (|Vars_TCC1-1| NIL 3747238196 NIL ("" (TERMINATION-TCC) NIL NIL) NIL NIL NIL NIL NIL NIL))("nominal_term" |nominal_term| |occurs_TCC5| 0 (|occurs_TCC5-1| NIL 3747238196 NIL ("" (TERMINATION-TCC) NIL NIL) NIL NIL NIL NIL NIL NIL))("nominal_term" |nominal_term| |occurs_TCC4| 0 (|occurs_TCC4-1| NIL 3747238196 NIL ("" (TERMINATION-TCC) NIL NIL) NIL NIL NIL NIL NIL NIL))("nominal_term" |nominal_term| |occurs_TCC3| 0 (|occurs_TCC3-1| NIL 3747238196 NIL ("" (TERMINATION-TCC) NIL NIL) NIL NIL NIL NIL NIL NIL))("nominal_term" |nominal_term| |occurs_TCC2| 0 (|occurs_TCC2-1| NIL 3747238196 NIL ("" (TERMINATION-TCC) NIL NIL) NIL NIL NIL NIL NIL NIL))("nominal_term" |nominal_term| |occurs_TCC1| 0 (|occurs_TCC1-1| NIL 3747238094 NIL ("" (CASES-TCC) NIL NIL) NIL NIL NIL NIL NIL NIL))("nominal_term" |nominal_term| |depth_TCC5| 0 (|depth_TCC5-1| NIL 3747238094 NIL ("" (TERMINATION-TCC) NIL NIL) NIL NIL NIL NIL NIL NIL))("nominal_term" |nominal_term| |depth_TCC4| 0 (|depth_TCC4-1| NIL 3747238094 NIL ("" (TERMINATION-TCC) NIL NIL) NIL NIL NIL NIL NIL NIL))("nominal_term" |nominal_term| |depth_TCC3| 0 (|depth_TCC3-1| NIL 3747238094 NIL ("" (TERMINATION-TCC) NIL NIL) NIL NIL NIL NIL NIL NIL))("nominal_term" |nominal_term| |depth_TCC2| 0 (|depth_TCC2-1| NIL 3747238094 NIL ("" (TERMINATION-TCC) NIL NIL) NIL NIL NIL NIL NIL NIL))("nominal_term" |nominal_term| |depth_TCC1| 0 (|depth_TCC1-1| NIL 3747237792 NIL ("" (CASES-TCC) NIL NIL) NIL NIL NIL NIL NIL NIL))("freshness" |freshness| |fresh?_TCC5| 0 (|fresh?_TCC5-1| NIL 3747508529 NIL ("" (TERMINATION-TCC) NIL NIL) NIL ((<< ADT-DEF-DECL "(strict_well_founded?[term])" |term_adt| NIL) (|variable| TYPE-EQ-DECL NIL |nominal_term| NIL) (TRUE CONST-DECL "bool" |booleans| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|every| ADT-DEF-DECL "boolean" |term_adt| NIL) (|term| TYPE-DECL NIL |term_adt| NIL) (|commutative_symbol| TYPE-EQ-DECL NIL |nominal_term| NIL) (|symbol| TYPE-EQ-DECL NIL |nominal_term| NIL) (|char| TYPE-EQ-DECL NIL |strings| NIL) (|char?| ADT-RECOGNIZER-DECL "[character -> boolean]" |character_adt| NIL) (|character| TYPE-DECL NIL |character_adt| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|perm| TYPE-EQ-DECL NIL |atoms| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (|atom| TYPE-EQ-DECL NIL |atoms| NIL) (>= CONST-DECL "bool" |reals| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)) NIL NIL NIL NIL))("freshness" |freshness| |fresh?_TCC4| 0 (|fresh?_TCC4-1| NIL 3747508529 NIL ("" (TERMINATION-TCC) NIL NIL) NIL ((<< ADT-DEF-DECL "(strict_well_founded?[term])" |term_adt| NIL) (|variable| TYPE-EQ-DECL NIL |nominal_term| NIL) (TRUE CONST-DECL "bool" |booleans| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|every| ADT-DEF-DECL "boolean" |term_adt| NIL) (|term| TYPE-DECL NIL |term_adt| NIL) (|commutative_symbol| TYPE-EQ-DECL NIL |nominal_term| NIL) (|symbol| TYPE-EQ-DECL NIL |nominal_term| NIL) (|char| TYPE-EQ-DECL NIL |strings| NIL) (|char?| ADT-RECOGNIZER-DECL "[character -> boolean]" |character_adt| NIL) (|character| TYPE-DECL NIL |character_adt| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|perm| TYPE-EQ-DECL NIL |atoms| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (|atom| TYPE-EQ-DECL NIL |atoms| NIL) (>= CONST-DECL "bool" |reals| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)) NIL NIL NIL NIL))("freshness" |freshness| |fresh?_TCC3| 0 (|fresh?_TCC3-1| NIL 3747508529 NIL ("" (TERMINATION-TCC) NIL NIL) NIL ((<< ADT-DEF-DECL "(strict_well_founded?[term])" |term_adt| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|variable| TYPE-EQ-DECL NIL |nominal_term| NIL) (TRUE CONST-DECL "bool" |booleans| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|every| ADT-DEF-DECL "boolean" |term_adt| NIL) (|term| TYPE-DECL NIL |term_adt| NIL) (|commutative_symbol| TYPE-EQ-DECL NIL |nominal_term| NIL) (|symbol| TYPE-EQ-DECL NIL |nominal_term| NIL) (|char| TYPE-EQ-DECL NIL |strings| NIL) (|char?| ADT-RECOGNIZER-DECL "[character -> boolean]" |character_adt| NIL) (|character| TYPE-DECL NIL |character_adt| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|perm| TYPE-EQ-DECL NIL |atoms| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|atom| TYPE-EQ-DECL NIL |atoms| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (>= CONST-DECL "bool" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)) NIL NIL NIL NIL))("freshness" |freshness| |fresh?_TCC2| 0 (|fresh?_TCC2-1| NIL 3747240534 NIL ("" (CASES-TCC) NIL NIL) NIL NIL NIL NIL NIL NIL))("freshness" |freshness| |fresh?_TCC2| 0 (|fresh?_TCC2-1| NIL 3747678805 NIL ("" (TERMINATION-TCC) NIL NIL) NIL NIL NIL NIL NIL NIL))("freshness" |freshness| |fresh_TCC6| 0 (|fresh_TCC6-1| NIL 3747678805 NIL ("" (TERMINATION-TCC) NIL NIL) NIL NIL NIL NIL NIL NIL))("freshness" |freshness| |fresh?_TCC2| 0 (|fresh?_TCC2-1| NIL 3747678805 ("" (TERMINATION-TCC) NIL NIL) NIL NIL))("freshness" |freshness| |fresh_TCC6| 0 (|fresh_TCC6-1| NIL 3747678805 ("" (TERMINATION-TCC) NIL NIL) NIL NIL))("nominalunif" |nominalunif| |unify_complete| 0 (|unify_complete-2| NIL 3745923323 NIL ("" (MEASURE-INDUCT "lex2(card(Vars(t,s)), depth(t))" ("t" "s")) (("" (SKOLEM 1 ("T" "S")) (("" (PROP) (("" (SKEEP) (("" (EXPAND "unify" 1) (("" (LIFT-IF) (("" (SPLIT 1) (("1" (PROP) (("1" (HIDE -2) (("1" (EXPAND "less") (("1" (INST 1 "sigma") (("1" (EXPAND "fresh_subs") (("1" (SKEEP) (("1" (REWRITE "Subs_append") (("1" (EXPAND "Subs" 1 2) (("1" (EXPAND "Subs" 1 2) (("1" (EXPAND "subs" 1) (("1" (LIFT-IF) (("1" (REWRITE "ext_identity") (("1" (REWRITE "alpha_reflexivity") (("1" (PROP) (("1" (CASE "S = ext(p(S))((::)*V(S))") (("1" (REPLACE -1 -4) (("1" (REWRITE "Subs_perm_comm") (("1" (REWRITE "Subs_perm_comm") (("1" (REPLACES -2) (("1" (REWRITE "ext_reverse_alpha") (("1" (REWRITE "reverse_reverse") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "ext" 1) (("2" (REWRITE "append_null") (("2" (REWRITE "term_times_eta") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (SPLIT 2) (("1" (FLATTEN) (("1" (LEMMA "term_at_eta" ("atom?_var" "T")) (("1" (REPLACE -1 -4 RL) (("1" (HIDE -3) (("1" (REWRITE "Subs_atom") (("1" (EXPAND "alpha") (("1" (EXPAND "occurs") (("1" (ASSERT) (("1" (LEMMA "Subs_atom2" ("a" "a(T)" "s" "S" "sigma" "sigma")) (("1" (ASSERT) (("1" (EXPAND "less") (("1" (INST 1 "sigma") (("1" (EXPAND "fresh_subs") (("1" (SKEEP) (("1" (EXPAND "Id") (("1" (REWRITE "append_null") (("1" (REWRITE "alpha_reflexivity") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (PROPAX) NIL NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (SPLIT 2) (("1" (FLATTEN) (("1" (HIDE -2) (("1" (LEMMA "term_times_eta" ("susp?_var" "T")) (("1" (SPLIT 1) (("1" (FLATTEN) (("1" (ASSERT) (("1" (EXPAND "less") (("1" (INST 2 "sigma") (("1" (EXPAND "fresh_subs") (("1" (SKEEP) (("1" (REWRITE "Subs_append") (("1" (EXPAND "Subs" 2 2) (("1" (EXPAND "Subs" 2 2) (("1" (EXPAND "subs") (("1" (REWRITE "ext_identity") (("1" (LIFT-IF) (("1" (REWRITE "alpha_reflexivity") (("1" (HIDE 4) (("1" (PROP) (("1" (CASE "T = ext(p(T))((::)*V(T))") (("1" (REPLACE -1 -5) (("1" (REPLACES -2) (("1" (REWRITE "Subs_perm_comm") (("1" (REWRITE "Subs_perm_comm") (("1" (REWRITE "alpha_symmetric" 1) (("1" (REWRITE "ext_reverse_alpha") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "ext" 1) (("2" (REWRITE "append_null") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (ASSERT) (("2" (EXPAND "alpha?") (("2" (LIFT-IF) (("2" (SPLIT 1) (("1" (FLATTEN) (("1" (EXPAND "less") (("1" (INST 1 "sigma") (("1" (CASE "T = ext(p(T))((::)*V(T))") (("1" (CASE "S = ext(p(S))((::)*V(S))") (("1" (REPLACE -1 -8) (("1" (REPLACE -2 -8) (("1" (REWRITE "Subs_perm_comm") (("1" (REWRITE "Subs_perm_comm") (("1" (REPLACES -4) (("1" (SPLIT 1) (("1" (LEMMA "fresh_subs_character" ("Delta" "Delta" "sigma" "sigma" "Nabla" "fc(DS(p(T), p(S)), V(S))")) (("1" (REPLACES -1) (("1" (SKEEP) (("1" (LEMMA "fc_member" ("a" "ax`1" "Y" "ax`2" "l" "DS(p(T), p(S))" "X" "V(S)")) (("1" (CASE "ax = (ax`1, ax`2)") (("1" (REPLACE -1 -3) (("1" (ASSERT) (("1" (FLATTEN) (("1" (REPLACES -3) (("1" (LEMMA "alpha_ds_fresh" ("Delta" "Delta" "pi1" "p(T)" "pi2" "p(S)" "t" "Subs(sigma)((: :) * V(S))")) (("1" (ASSERT) (("1" (INST -1 "ax`1") (("1" (LEMMA "DS_member" ("pi1" "p(T)" "pi2" "p(S)" "a" "ax`1")) (("1" (EXPAND "member" -1 1) (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (DECOMPOSE-EQUALITY 1) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKEEP) (("2" (EXPAND "Id") (("2" (REWRITE "append_null") (("2" (REWRITE "alpha_reflexivity") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "ext" 1) (("2" (REWRITE "append_null") (("2" (REWRITE "term_times_eta") NIL NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "ext" 1) (("2" (REWRITE "append_null") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (CASE "susp?(S)") (("1" (EXPAND "occurs" -2) (("1" (ASSERT) NIL NIL)) NIL) ("2" (REWRITE "alpha_symmetric") (("2" (REPLACE -2 -4 RL) (("2" (LEMMA "alpha_Subs_Vars" ("Delta" "Delta" "sigma" "sigma" "t" "S" "pi" "p(T)" "X" "V(T)")) (("2" (ASSERT) (("2" (EXPAND "member" 1) (("2" (REWRITE "Vars_occurs") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (SPLIT 2) (("1" (FLATTEN) (("1" (HIDE -2) (("1" (LEMMA "alpha_Subs_ord" ("Delta" "Delta" "sigma" "sigma" "t" "T" "s" "S")) (("1" (EXPAND "member" -1) (("1" (ASSERT) (("1" (SPLIT -1) (("1" (FLATTEN) (("1" (REWRITE "Vars_occurs") (("1" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (EXPAND "ord" -1) (("2" (LIFT-IF) (("2" (ASSERT) (("2" (HIDE 4) (("2" (PROP) (("1" (ASSERT) NIL NIL) ("2" (EXPAND "less") (("2" (INST 1 "sigma") (("2" (EXPAND "fresh_subs") (("2" (SKEEP) (("2" (EXPAND "Id") (("2" (REWRITE "append_null") (("2" (REWRITE "alpha_reflexivity") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (SPLIT 2) (("1" (FLATTEN) (("1" (LEMMA "alpha_Subs_ord" ("Delta" "Delta" "t" "T" "s" "S" "sigma" "sigma")) (("1" (ASSERT) (("1" (SPLIT -1) (("1" (FLATTEN) (("1" (EXPAND "member" 1) (("1" (REWRITE "Vars_occurs") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "ord") (("2" (LIFT-IF) (("2" (ASSERT) (("2" (HIDE 5) (("2" (HIDE 1) (("2" (PROP) (("2" (REVEAL 1) (("2" (ASSERT) (("2" (INST-CP -3 "term1(T)" "term1(S)") (("2" (SPLIT -4) (("1" (INST -1 "Delta" "sigma") (("1" (LEMMA "term_pair_eta" ("pair?_var" "T")) (("1" (LEMMA "term_pair_eta" ("pair?_var" "S")) (("1" (REPLACE -1 -7 RL) (("1" (REPLACE -2 -7 RL) (("1" (REWRITE "Subs_pair") (("1" (REWRITE "Subs_pair") (("1" (EXPAND "alpha" -7) (("1" (FLATTEN) (("1" (ASSERT) (("1" (FLATTEN) (("1" (NAME-REPLACE "SOL1" "unify(term1(T), term1(S))") (("1" (EXPAND "less" -4) (("1" (SKEEP) (("1" (LEMMA "alpha_Subs_invariance" ("Delta" "Delta" "sigma" "append(theta, SOL1`2)" "gamma" "sigma" "t" "term2(T)")) (("1" (SPLIT -1) (("1" (LEMMA "alpha_transitive" ("Delta" "Delta" "t1" "Subs(append(theta, SOL1`2))(term2(T))" "t2" "Subs(sigma)(term2(T))" "t3" "Subs(sigma)(term2(S))")) (("1" (LEMMA "alpha_Subs_invariance" ("Delta" "Delta" "sigma" "append(theta, SOL1`2)" "gamma" "sigma" "t" "term2(S)")) (("1" (SPLIT -1) (("1" (REWRITE "alpha_symmetric" -1) (("1" (LEMMA "alpha_transitive" ("Delta" "Delta" "t1" "Subs(append(theta, SOL1`2))(term2(T))" "t2" "Subs(sigma)(term2(S))" "t3" "Subs(append(theta, SOL1`2))(term2(S))")) (("1" (ASSERT) (("1" (ASSERT) (("1" (REWRITE "Subs_append" -1) (("1" (REWRITE "Subs_append" -1) (("1" (INST -12 "Subs(SOL1`2)(term2(T))" "Subs(SOL1`2)(term2(S))") (("1" (SPLIT -12) (("1" (INST -1 "Delta" "theta") (("1" (ASSERT) (("1" (NAME-REPLACE "SOL2" "unify(Subs(SOL1`2)(term2(T)), Subs(SOL1`2)(term2(S)))") (("1" (EXPAND "x" 1) (("1" (FLATTEN) (("1" (LIFT-IF) (("1" (ASSERT) (("1" (EXPAND "less") (("1" (SKOSIMP) (("1" (LEMMA "fresh_subs_o_fresh_subs?" ("Delta" "Delta" "sigma" "theta!1" "gamma" "SOL2`2" "Nabla" "SOL1`1")) (("1" (IFF -1) (("1" (FLATTEN) (("1" (HIDE -2) (("1" (SPLIT -1) (("1" (FLATTEN) (("1" (ASSERT) (("1" (INST 1 "theta!1") (("1" (REWRITE "fresh_subs_append_context") (("1" (SKEEP) (("1" (INST -14 "X") (("1" (REWRITE "Subs_append" -14) (("1" (LEMMA "alpha_Subs_invariance" ("Delta" "Delta" "sigma" "append(theta!1, SOL2`2)" "gamma" "theta" "t" "Subs(SOL1`2)((: :) * X)")) (("1" (PROP) (("1" (REWRITE* "Subs_append") (("1" (LEMMA "alpha_transitive" ("Delta" "Delta" "t1" "Subs(theta!1)(Subs(SOL2`2)(Subs(SOL1`2)((: :) * X)))" "t2" "Subs(theta)(Subs(SOL1`2)((: :) * X))" "t3" "Subs(sigma)((: :) * X)")) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (REWRITE "fresh_subs_character" 1) (("2" (SKEEP) (("2" (REWRITE "fresh_subs_character" -12) (("2" (INST -12 "ax") (("2" (INST -4 "ax`2") (("2" (LEMMA "alpha_preserves_fresh" ("Delta" "Delta" "a" "ax`1" "t" "Subs(append(theta!1, SOL2`2))((: :) * ax`2)" "s" "Subs(theta)((: :) * ax`2)")) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-10 -11 1)) (("2" (REWRITE "lex2_lt") (("2" (CASE "SOL1`2 = Id") (("1" (REPLACES -1) (("1" (EXPAND "Id") (("1" (EXPAND "Subs") (("1" (EXPAND "depth" 1 2) (("1" (EXPAND "max") (("1" (LEMMA "card_subset" ("A" "Vars(term2(T), term2(S))" "B" "Vars(T, S)")) (("1" (EXPAND <=) (("1" (SPLIT -1) (("1" (ASSERT) NIL NIL) ("2" (ASSERT) (("2" (LIFT-IF) (("2" (ASSERT) NIL NIL)) NIL)) NIL) ("3" (HIDE 2) (("3" (EXPAND* "Vars" "subset?" "member") (("3" (EXPAND "Vars" 1 (3 4)) (("3" (EXPAND* "union" "member") (("3" (SKEEP) (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (LEMMA "Subs_unif_Vars_decrease" ("u" "term1(T)" "s" "term1(S)" "w" "term2(T)" "t" "term2(S)" "gamma" "SOL1`2")) (("2" (CASE "Vars(T, S) = union(Vars(term1(T), term1(S)), Vars(term2(T), term2(S)))") (("1" (ASSERT) NIL NIL) ("2" (HIDE -1 3) (("2" (EXPAND "Vars") (("2" (EXPAND "Vars" 1 (1 2)) (("2" (EXPAND* "union" "member") (("2" (DECOMPOSE-EQUALITY) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL) ("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-1 -2 1)) (("2" (REWRITE "lex2_lt") (("2" (FLATTEN) (("2" (LEMMA "card_subset" ("A" "Vars(term1(T), term1(S))" "B" "Vars(T, S)")) (("2" (EXPAND <=) (("2" (EXPAND "depth" 2 2) (("2" (EXPAND "max") (("2" (SPLIT -1) (("1" (PROPAX) NIL NIL) ("2" (ASSERT) (("2" (LIFT-IF) (("2" (ASSERT) NIL NIL)) NIL)) NIL) ("3" (HIDE 3) (("3" (EXPAND "Vars" 1) (("3" (EXPAND "Vars" 1 (3 4)) (("3" (EXPAND* "subset?" "union" "member") (("3" (SKEEP) (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (LEMMA "alpha_Subs_ord" ("Delta" "Delta" "sigma" "sigma" "t" "T" "s" "S")) (("2" (ASSERT) (("2" (SPLIT -1) (("1" (FLATTEN) (("1" (EXPAND "member" 1) (("1" (REWRITE "Vars_occurs") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (HIDE 6) (("2" (EXPAND "ord") (("2" (SPLIT 2) (("1" (FLATTEN) (("1" (ASSERT) (("1" (LIFT-IF) (("1" (ASSERT) (("1" (HIDE 1) (("1" (PROP) (("1" (REVEAL 1) (("1" (ASSERT) (("1" (LEMMA "term_abs_eta" ("abs?_var" "T")) (("1" (LEMMA "term_abs_eta" ("abs?_var" "S")) (("1" (REPLACE -1 -6 RL) (("1" (REPLACE -2 -6 RL) (("1" (REWRITE "Subs_abs") (("1" (REWRITE "Subs_abs") (("1" (EXPAND "alpha" -6) (("1" (SPLIT -6) (("1" (FLATTEN) (("1" (ASSERT) (("1" (INST -7 "body(T)" "body(S)") (("1" (SPLIT -7) (("1" (INST -1 "Delta" "sigma") (("1" (ASSERT) NIL NIL)) NIL) ("2" (HIDE 2) (("2" (REWRITE "lex2_lt") (("2" (EXPAND "Vars" 1) (("2" (EXPAND "depth" 1 2) (("2" (EXPAND "Vars" 1 (7 8)) (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (ASSERT) (("2" (INST -7 "body(T)" "ext(cons((abstr(T), abstr(S)), null))(body(S))") (("2" (SPLIT -7) (("1" (INST -1 "Delta" "sigma") (("1" (REWRITE "Subs_perm_comm" -1) (("1" (EXPAND "x") (("1" (ASSERT) (("1" (FLATTEN) (("1" (ASSERT) (("1" (NAME-REPLACE "SOL" "unify(body(T), ext(cons((abstr(T), abstr(S)), null))(body(S)))") (("1" (EXPAND "less" -2) (("1" (SKEEP) (("1" (LEMMA "Subs_fresh" ("a" "abstr(T)" "sigma" "theta" "t" "Subs(SOL`2)(body(S))")) (("1" (LEMMA "alpha_Subs_invariance" ("Delta" "Delta" "sigma" "append(theta, SOL`2)" "gamma" "sigma" "t" "body(S)")) (("1" (LEMMA "alpha_preserves_fresh" ("Delta" "Delta" "a" "abstr(T)" "t" "Subs(append(theta, SOL`2))(body(S))" "s" "Subs(sigma)(body(S))")) (("1" (SPLIT -2) (("1" (LEMMA "fresh?_complete" ("Delta" "Delta" "a" "abstr(T)" "t" "Subs(theta)(Subs(SOL`2)(body(S)))")) (("1" (REWRITE "Subs_append") (("1" (ASSERT) (("1" (PROP) (("1" (EXPAND "less") (("1" (INST 1 "theta") (("1" (ASSERT) (("1" (REWRITE "fresh_subs_append_context") (("1" (EXPAND "Id") (("1" (EXPAND "append" 1 2) (("1" (PROP) (("1" (LEMMA "fresh_subs?_is_fresh3" ("a" "abstr(T)" "sigma" "theta" "t" "Subs(SOL`2)(body(S))")) (("1" (EXPAND "x") (("1" (REWRITE "append_null") (("1" (DECOMPOSE-EQUALITY -1) (("1" (PROP) (("1" (ASSERT) (("1" (LEMMA "fresh_subs_weakening" ("Delta" "fresh?(abstr(T), Subs(SOL`2)(body(S)))`1" "sigma" "theta" "Nabla1" "fresh_subs?(theta, fresh?(abstr(T), Subs(SOL`2)(body(S)))`1)`1" "Nabla2" "Delta")) (("1" (ASSERT) (("1" (LEMMA "fresh_subs?_is_fresh_subs" ("sigma" "theta" "Nabla" "fresh?(abstr(T), Subs(SOL`2)(body(S)))`1")) (("1" (ASSERT) (("1" (REPLACE -3 -6) (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 3) (("2" (REWRITE "lex2_lt") (("2" (EXPAND "depth" 1 2) (("2" (FLATTEN) (("2" (EXPAND "Vars" 2) (("2" (REWRITE "ext_preserves_Vars") (("2" (EXPAND "Vars" 2 (3 4)) (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (ASSERT) (("2" (LIFT-IF) (("2" (ASSERT) (("2" (LEMMA "term_app_eta" (APP?_VAR T)) (("2" (REPLACE -1 -4 RL) (("2" (LEMMA "term_app_eta" (APP?_VAR S)) (("1" (REPLACE -1 -5 RL) (("1" (REWRITE "Subs_app") (("1" (REWRITE "Subs_app") (("1" (EXPAND "alpha" -5) (("1" (FLATTEN) (("1" (ASSERT) (("1" (INST -4 "arg(T)" "arg(S)") (("1" (SPLIT -4) (("1" (INST -1 "Delta" "sigma") (("1" (ASSERT) NIL NIL)) NIL) ("2" (REWRITE "lex2_lt") (("2" (FLATTEN) (("2" (EXPAND "depth" 2 2) (("2" (EXPAND "Vars" 2) (("2" (EXPAND "Vars" 2 (3 4)) (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL ((SUBS_FRESH FORMULA-DECL NIL SUBSTITUTION NIL) (FRESH?_COMPLETE FORMULA-DECL NIL FRESHNESS NIL) (X CONST-DECL "[fresh_context, bool]" FRESHNESS NIL) (FALSE CONST-DECL "bool" BOOLEANS NIL) (IF CONST-DECL "[boolean, T, T -> T]" IF_DEF NIL) (FRESH_SUBS?_IS_FRESH_SUBS FORMULA-DECL NIL SUBSTITUTION NIL) (FRESH_SUBS_WEAKENING FORMULA-DECL NIL SUBSTITUTION NIL) (FRESH_SUBS?_IS_FRESH3 FORMULA-DECL NIL SUBSTITUTION NIL) (FRESH? DEF-DECL "[fresh_context, bool]" FRESHNESS NIL) (EXT_PRESERVES_VARS FORMULA-DECL NIL NOMINAL_TERM NIL) (SUBS_ABS FORMULA-DECL NIL SUBSTITUTION NIL) (ABSTR ADT-ACCESSOR-DECL "[(abs?) -> atom]" TERM_ADT NIL) (BODY ADT-ACCESSOR-DECL "[(abs?) -> term]" TERM_ADT NIL) (ABS? ADT-RECOGNIZER-DECL "[term -> boolean]" TERM_ADT NIL) (TERM_ABS_ETA FORMULA-DECL NIL TERM_ADT NIL) (SUBS_APP FORMULA-DECL NIL SUBSTITUTION NIL) (SYM ADT-ACCESSOR-DECL "[(app?) -> symbol]" TERM_ADT NIL) (ARG ADT-ACCESSOR-DECL "[(app?) -> term]" TERM_ADT NIL) (APP? ADT-RECOGNIZER-DECL "[term -> boolean]" TERM_ADT NIL) (TERM_APP_ETA FORMULA-DECL NIL TERM_ADT NIL) (TERM1 ADT-ACCESSOR-DECL "[(pair?) -> term]" TERM_ADT NIL) (PAIR? ADT-RECOGNIZER-DECL "[term -> boolean]" TERM_ADT NIL) (ALPHA_SUBS_INVARIANCE FORMULA-DECL NIL SUBSTITUTION NIL) (APPEND DEF-DECL "list[T]" LIST_PROPS NIL) (ALPHA_TRANSITIVE FORMULA-DECL NIL ALPHA_EQUIVALENCE NIL) (X CONST-DECL "[fresh_context, Sub, bool]" NOMINALUNIF NIL) (FRESH_SUBS_O_FRESH_SUBS? FORMULA-DECL NIL SUBSTITUTION NIL) (FRESH_SUBS? DEF-DECL "[fresh_context, bool]" SUBSTITUTION NIL) (FRESH_SUBS_APPEND_CONTEXT FORMULA-DECL NIL SUBSTITUTION NIL) (ALPHA_PRESERVES_FRESH FORMULA-DECL NIL ALPHA_EQUIVALENCE NIL) (LEX2_LT FORMULA-DECL NIL LEX2 NIL) (REAL_LT_IS_STRICT_TOTAL_ORDER NAME-JUDGEMENT "(strict_total_order?[real])" REAL_PROPS NIL) (SUBS_UNIF_VARS_DECREASE FORMULA-DECL NIL SUBSTITUTION NIL) (OR CONST-DECL "[bool, bool -> bool]" BOOLEANS NIL) (FINITE_UNION APPLICATION-JUDGEMENT "finite_set" FINITE_SETS NIL) (MAX CONST-DECL "{p: real | p >= m AND p >= n}" REAL_DEFS NIL) (<= CONST-DECL "bool" REALS NIL) (VARS DEF-DECL "finite_set[variable]" NOMINAL_TERM NIL) (UNION CONST-DECL "set" SETS NIL) (SUBSET? CONST-DECL "bool" SETS NIL) (CARD_SUBSET FORMULA-DECL NIL FINITE_SETS NIL) (NONNEG_RAT_MAX APPLICATION-JUDGEMENT "{s: nonneg_rat | s >= q AND s >= r}" REAL_DEFS NIL) (NAT_MAX APPLICATION-JUDGEMENT "{k: nat | i <= k AND j <= k}" REAL_DEFS NIL) (SUBS_PAIR FORMULA-DECL NIL SUBSTITUTION NIL) (TERM2 ADT-ACCESSOR-DECL "[(pair?) -> term]" TERM_ADT NIL) (TERM_PAIR_ETA FORMULA-DECL NIL TERM_ADT NIL) (ALPHA_SUBS_ORD FORMULA-DECL NIL SUBSTITUTION NIL) (ORD CONST-DECL "upto(5)" TERM_ADT NIL) (ALPHA? DEF-DECL "[fresh_context, bool]" ALPHA_EQUIVALENCE NIL) (FRESH_SUBS_CHARACTER FORMULA-DECL NIL SUBSTITUTION NIL) (FC DEF-DECL "fresh_context" FRESHNESS NIL) (DS CONST-DECL "list[atom]" ATOMS NIL) (DS_MEMBER FORMULA-DECL NIL ATOMS NIL) (MEMBER CONST-DECL "bool" SETS NIL) (AX SKOLEM-CONST-DECL "[atom, variable]" NOMINALUNIF NIL) (S SKOLEM-CONST-DECL "term[atom, perm, variable, symbol]" NOMINALUNIF NIL) (T SKOLEM-CONST-DECL "term[atom, perm, variable, symbol]" NOMINALUNIF NIL) (DS CONST-DECL "set[atom]" ATOMS NIL) (ALPHA_DS_FRESH FORMULA-DECL NIL ALPHA_EQUIVALENCE NIL) (FC_MEMBER FORMULA-DECL NIL FRESHNESS NIL) (VARS_OCCURS FORMULA-DECL NIL NOMINAL_TERM NIL) (ALPHA_SUBS_VARS FORMULA-DECL NIL SUBSTITUTION NIL) (ALPHA_SYMMETRIC FORMULA-DECL NIL ALPHA_EQUIVALENCE NIL) (A ADT-ACCESSOR-DECL "[(atom?) -> atom]" TERM_ADT NIL) (SUBS_ATOM FORMULA-DECL NIL SUBSTITUTION NIL) (SUBS_ATOM2 FORMULA-DECL NIL SUBSTITUTION NIL) (ID CONST-DECL "Sub" SUBSTITUTION NIL) (ATOM? ADT-RECOGNIZER-DECL "[term -> boolean]" TERM_ADT NIL) (TERM_AT_ETA FORMULA-DECL NIL TERM_ADT NIL) (FRESH_SUBS DEF-DECL "bool" SUBSTITUTION NIL) (* ADT-CONSTRUCTOR-DECL "[[perm, variable] -> (susp?)]" TERM_ADT NIL) (NULL ADT-CONSTRUCTOR-DECL "(null?)" LIST_ADT NIL) (NULL? ADT-RECOGNIZER-DECL "[list -> boolean]" LIST_ADT NIL) (P ADT-ACCESSOR-DECL "[(susp?) -> perm]" TERM_ADT NIL) (REVERSE DEF-DECL "list[T]" LIST_PROPS NIL) (EXT DEF-DECL "term" NOMINAL_TERM NIL) (V ADT-ACCESSOR-DECL "[(susp?) -> variable]" TERM_ADT NIL) (SUSP? ADT-RECOGNIZER-DECL "[term -> boolean]" TERM_ADT NIL) (CONS ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" LIST_ADT NIL) (CONS? ADT-RECOGNIZER-DECL "[list -> boolean]" LIST_ADT NIL) (SUBS_APPEND FORMULA-DECL NIL SUBSTITUTION NIL) (ALPHA_REFLEXIVITY FORMULA-DECL NIL ALPHA_EQUIVALENCE NIL) (SUBS_PERM_COMM FORMULA-DECL NIL SUBSTITUTION NIL) (REVERSE_REVERSE FORMULA-DECL NIL LIST_PROPS NIL) (EXT_REVERSE_ALPHA FORMULA-DECL NIL ALPHA_EQUIVALENCE NIL) (APPEND_NULL FORMULA-DECL NIL LIST_PROPS NIL) (TERM_TIMES_ETA FORMULA-DECL NIL TERM_ADT NIL) (EXT_IDENTITY FORMULA-DECL NIL NOMINAL_TERM NIL) (SUBS DEF-DECL "term" SUBSTITUTION NIL) (FRESH_CONTEXT TYPE-EQ-DECL NIL FRESHNESS NIL) (SUB TYPE-EQ-DECL NIL SUBSTITUTION NIL) (EVERY ADT-DEF-DECL "boolean" LIST_ADT NIL) (VARS_IN CONST-DECL "bool" SUBSTITUTION NIL) (NOT CONST-DECL "[bool -> bool]" BOOLEANS NIL) (OCCURS DEF-DECL "bool" NOMINAL_TERM NIL) (SUBS_UNIF TYPE-EQ-DECL NIL SUBSTITUTION NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" BOOLEANS NIL) (ALPHA DEF-DECL "bool" ALPHA_EQUIVALENCE NIL) (SUBS DEF-DECL "term" SUBSTITUTION NIL) (LESS CONST-DECL "bool" NOMINALUNIF NIL) (UNIFY DEF-DECL "[fresh_context, Subs_unif(t, s), bool]" NOMINALUNIF NIL) (WELL_FOUNDED_LE FORMULA-DECL NIL ORDINALS NIL) (< DEF-DECL "bool" ORDINALS NIL) (DEPTH DEF-DECL "nat" NOMINAL_TERM NIL) (VARS CONST-DECL "finite_set[variable]" SUBSTITUTION NIL) (CARD CONST-DECL "{n: nat | n = Card(S)}" FINITE_SETS NIL) (CARD CONST-DECL "nat" FINITE_SETS NIL) (= CONST-DECL "[T, T -> boolean]" EQUALITIES NIL) (FINITE_SET TYPE-EQ-DECL NIL FINITE_SETS NIL) (IS_FINITE CONST-DECL "bool" FINITE_SETS NIL) (SET TYPE-EQ-DECL NIL SETS NIL) (LEX2 CONST-DECL "ordinal" LEX2 NIL) (ORDINAL NONEMPTY-TYPE-EQ-DECL NIL ORDINALS NIL) (ORDINAL? DEF-DECL "bool" ORDINALS NIL) (ORDSTRUCT TYPE-DECL NIL ORDSTRUCT_ADT NIL) (VARIABLE TYPE-EQ-DECL NIL NOMINAL_TERM NIL) (TRUE CONST-DECL "bool" BOOLEANS NIL) (AND CONST-DECL "[bool, bool -> bool]" BOOLEANS NIL) (EVERY ADT-DEF-DECL "boolean" TERM_ADT NIL) (PRED TYPE-EQ-DECL NIL DEFINED_TYPES NIL) (TERM TYPE-DECL NIL TERM_ADT NIL) (SYMBOL TYPE-EQ-DECL NIL NOMINAL_TERM NIL) (CHAR TYPE-EQ-DECL NIL STRINGS NIL) (CHAR? ADT-RECOGNIZER-DECL "[character -> boolean]" CHARACTER_ADT NIL) (CHARACTER TYPE-DECL NIL CHARACTER_ADT NIL) (BELOW TYPE-EQ-DECL NIL NAT_TYPES NIL) (NAT NONEMPTY-TYPE-EQ-DECL NIL NATURALNUMBERS NIL) (PERM TYPE-EQ-DECL NIL ATOMS NIL) (LIST TYPE-DECL NIL LIST_ADT NIL) (ATOM TYPE-EQ-DECL NIL ATOMS NIL) (>= CONST-DECL "bool" REALS NIL) (BOOL NONEMPTY-TYPE-EQ-DECL NIL BOOLEANS NIL) (INT NONEMPTY-TYPE-EQ-DECL NIL INTEGERS NIL) (INTEGER_PRED CONST-DECL "[rational -> boolean]" INTEGERS NIL) (RATIONAL NONEMPTY-TYPE-FROM-DECL NIL RATIONALS NIL) (RATIONAL_PRED CONST-DECL "[real -> boolean]" RATIONALS NIL) (REAL NONEMPTY-TYPE-FROM-DECL NIL REALS NIL) (REAL_PRED CONST-DECL "[number_field -> boolean]" REALS NIL) (NUMBER_FIELD NONEMPTY-TYPE-FROM-DECL NIL NUMBER_FIELDS NIL) (NUMBER_FIELD_PRED CONST-DECL "[number -> boolean]" NUMBER_FIELDS NIL) (BOOLEAN NONEMPTY-TYPE-DECL NIL BOOLEANS NIL) (NUMBER NONEMPTY-TYPE-DECL NIL NUMBERS NIL) (MEASURE_INDUCTION FORMULA-DECL NIL MEASURE_INDUCTION NIL) (WELL_FOUNDED? CONST-DECL "bool" ORDERS NIL) (PRED TYPE-EQ-DECL NIL DEFINED_TYPES NIL)) NIL NIL NIL NIL) (|unify_complete-1| NIL 3629617023 NIL ("" (MEASURE-INDUCT "lex2(card(Vars(t,s)), depth(t))" (T S)) (("" (SKOLEM 1 (T S)) (("" (PROP) (("" (SKEEP) (("" (EXPAND UNIFY 1) (("" (LIFT-IF) (("" (SPLIT 1) (("1" (PROP) (("1" (HIDE -2) (("1" (EXPAND LESS) (("1" (INST 1 SIGMA) (("1" (EXPAND FRESH_SUBS) (("1" (SKEEP) (("1" (REWRITE SUBS_APPEND) (("1" (EXPAND SUBS 1 2) (("1" (EXPAND SUBS 1 2) (("1" (EXPAND SUBS 1) (("1" (LIFT-IF) (("1" (REWRITE EXT_IDENTITY) (("1" (REWRITE ALPHA_REFLEXIVITY) (("1" (PROP) (("1" (CASE "S = ext(p(S))((::)*V(S))") (("1" (REPLACE -1 -4) (("1" (REWRITE SUBS_PERM_COMM) (("1" (REWRITE SUBS_PERM_COMM) (("1" (REPLACES -2) (("1" (REWRITE EXT_REVERSE_ALPHA) (("1" (REWRITE REVERSE_REVERSE) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND EXT 1) (("2" (REWRITE APPEND_NULL) (("2" (REWRITE "term_times_eta") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (SPLIT 2) (("1" (FLATTEN) (("1" (LEMMA TERM_AT_ETA (ATOM?_VAR T)) (("1" (REPLACE -1 -4 RL) (("1" (HIDE -3) (("1" (REWRITE SUBS_ATOM) (("1" (EXPAND ALPHA) (("1" (EXPAND OCCURS) (("1" (ASSERT) (("1" (LEMMA SUBS_ATOM2 (A "a(T)" S S SIGMA SIGMA)) (("1" (ASSERT) (("1" (EXPAND LESS) (("1" (INST 1 SIGMA) (("1" (EXPAND FRESH_SUBS) (("1" (SKEEP) (("1" (EXPAND ID) (("1" (REWRITE APPEND_NULL) (("1" (REWRITE ALPHA_REFLEXIVITY) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (PROPAX) NIL NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (SPLIT 2) (("1" (FLATTEN) (("1" (HIDE -2) (("1" (LEMMA TERM_TIMES_ETA (SUSP?_VAR T)) (("1" (SPLIT 1) (("1" (FLATTEN) (("1" (ASSERT) (("1" (EXPAND LESS) (("1" (INST 2 SIGMA) (("1" (EXPAND FRESH_SUBS) (("1" (SKEEP) (("1" (REWRITE SUBS_APPEND) (("1" (EXPAND SUBS 2 2) (("1" (EXPAND SUBS 2 2) (("1" (EXPAND SUBS) (("1" (REWRITE EXT_IDENTITY) (("1" (LIFT-IF) (("1" (REWRITE ALPHA_REFLEXIVITY) (("1" (HIDE 4) (("1" (PROP) (("1" (CASE "T = ext(p(T))((::)*V(T))") (("1" (REPLACE -1 -5) (("1" (REPLACES -2) (("1" (REWRITE SUBS_PERM_COMM) (("1" (REWRITE SUBS_PERM_COMM) (("1" (REWRITE ALPHA_SYMMETRIC 1) (("1" (REWRITE EXT_REVERSE_ALPHA) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND EXT 1) (("2" (REWRITE APPEND_NULL) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (ASSERT) (("2" (EXPAND ALPHA?) (("2" (LIFT-IF) (("2" (SPLIT 1) (("1" (FLATTEN) (("1" (EXPAND LESS) (("1" (INST 1 SIGMA) (("1" (CASE "T = ext(p(T))((::)*V(T))") (("1" (CASE "S = ext(p(S))((::)*V(S))") (("1" (REPLACE -1 -8) (("1" (REPLACE -2 -8) (("1" (REWRITE SUBS_PERM_COMM) (("1" (REWRITE SUBS_PERM_COMM) (("1" (REPLACES -4) (("1" (SPLIT 1) (("1" (LEMMA FRESH_SUBS_CHARACTER (DELTA DELTA SIGMA SIGMA NABLA "fc(DS(p(T), p(S)), V(S))")) (("1" (REPLACES -1) (("1" (SKEEP) (("1" (LEMMA FC_MEMBER (A "ax`1" Y "ax`2" L "DS(p(T), p(S))" X "V(S)")) (("1" (CASE "ax = (ax`1, ax`2)") (("1" (REPLACE -1 -3) (("1" (ASSERT) (("1" (FLATTEN) (("1" (REPLACES -3) (("1" (LEMMA ALPHA_DS_FRESH (DELTA DELTA PI1 "p(T)" PI2 "p(S)" T "Subs(sigma)((: :) * V(S))")) (("1" (ASSERT) (("1" (INST -1 "ax`1") (("1" (LEMMA DS_MEMBER (PI1 "p(T)" PI2 "p(S)" A "ax`1")) (("1" (EXPAND MEMBER -1 1) (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (DECOMPOSE-EQUALITY 1) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKEEP) (("2" (EXPAND ID) (("2" (REWRITE APPEND_NULL) (("2" (REWRITE ALPHA_REFLEXIVITY) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND EXT 1) (("2" (REWRITE APPEND_NULL) (("2" (REWRITE TERM_TIMES_ETA) NIL NIL)) NIL)) NIL)) NIL) ("2" (EXPAND EXT 1) (("2" (REWRITE APPEND_NULL) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (CASE "susp?(S)") (("1" (EXPAND OCCURS -2) (("1" (ASSERT) NIL NIL)) NIL) ("2" (REWRITE ALPHA_SYMMETRIC) (("2" (REPLACE -2 -4 RL) (("2" (LEMMA ALPHA_SUBS_VARS (DELTA DELTA SIGMA SIGMA T S PI "p(T)" X "V(T)")) (("2" (ASSERT) (("2" (EXPAND MEMBER 1) (("2" (REWRITE VARS_OCCURS) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (SPLIT 2) (("1" (FLATTEN) (("1" (HIDE -2) (("1" (LEMMA ALPHA_SUBS_ORD (DELTA DELTA SIGMA SIGMA T T S S)) (("1" (EXPAND MEMBER -1) (("1" (ASSERT) (("1" (SPLIT -1) (("1" (FLATTEN) (("1" (REWRITE VARS_OCCURS) (("1" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (EXPAND ORD -1) (("2" (LIFT-IF) (("2" (ASSERT) (("2" (HIDE 4) (("2" (PROP) (("1" (ASSERT) NIL NIL) ("2" (EXPAND LESS) (("2" (INST 1 SIGMA) (("2" (EXPAND FRESH_SUBS) (("2" (SKEEP) (("2" (EXPAND ID) (("2" (REWRITE APPEND_NULL) (("2" (REWRITE ALPHA_REFLEXIVITY) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (SPLIT 2) (("1" (FLATTEN) (("1" (LEMMA ALPHA_SUBS_ORD (DELTA DELTA T T S S SIGMA SIGMA)) (("1" (ASSERT) (("1" (SPLIT -1) (("1" (FLATTEN) (("1" (EXPAND MEMBER 1) (("1" (REWRITE VARS_OCCURS) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (EXPAND ORD) (("2" (LIFT-IF) (("2" (ASSERT) (("2" (HIDE 5) (("2" (HIDE 1) (("2" (PROP) (("2" (REVEAL 1) (("2" (ASSERT) (("2" (INST-CP -3 "term1(T)" "term1(S)") (("2" (SPLIT -4) (("1" (INST -1 DELTA SIGMA) (("1" (LEMMA "term_pair_eta" (PAIR?_VAR T)) (("1" (LEMMA "term_pair_eta" (PAIR?_VAR S)) (("1" (REPLACE -1 -7 RL) (("1" (REPLACE -2 -7 RL) (("1" (REWRITE SUBS_PAIR) (("1" (REWRITE SUBS_PAIR) (("1" (EXPAND ALPHA -7) (("1" (FLATTEN) (("1" (ASSERT) (("1" (FLATTEN) (("1" (NAME-REPLACE "SOL1" "unify(term1(T), term1(S))") (("1" (EXPAND LESS -4) (("1" (SKEEP) (("1" (LEMMA ALPHA_SUBS_INVARIANCE (DELTA DELTA SIGMA "append(theta, SOL1`2)" GAMMA SIGMA T "term2(T)")) (("1" (SPLIT -1) (("1" (LEMMA ALPHA_TRANSITIVE (DELTA DELTA T1 "Subs(append(theta, SOL1`2))(term2(T))" T2 "Subs(sigma)(term2(T))" T3 "Subs(sigma)(term2(S))")) (("1" (LEMMA ALPHA_SUBS_INVARIANCE (DELTA DELTA SIGMA "append(theta, SOL1`2)" GAMMA SIGMA T "term2(S)")) (("1" (SPLIT -1) (("1" (REWRITE ALPHA_SYMMETRIC -1) (("1" (LEMMA ALPHA_TRANSITIVE (DELTA DELTA T1 "Subs(append(theta, SOL1`2))(term2(T))" T2 "Subs(sigma)(term2(S))" T3 "Subs(append(theta, SOL1`2))(term2(S))")) (("1" (ASSERT) (("1" (ASSERT) (("1" (REWRITE SUBS_APPEND -1) (("1" (REWRITE SUBS_APPEND -1) (("1" (INST -12 "Subs(SOL1`2)(term2(T))" "Subs(SOL1`2)(term2(S))") (("1" (SPLIT -12) (("1" (INST -1 DELTA THETA) (("1" (ASSERT) (("1" (NAME-REPLACE "SOL2" "unify(Subs(SOL1`2)(term2(T)), Subs(SOL1`2)(term2(S)))") (("1" (EXPAND X 1) (("1" (FLATTEN) (("1" (LIFT-IF) (("1" (ASSERT) (("1" (EXPAND LESS) (("1" (SKOSIMP) (("1" (LEMMA FRESH_SUBS_O_FRESH_SUBS? (DELTA DELTA SIGMA "theta!1" GAMMA "SOL2`2" NABLA "SOL1`1")) (("1" (IFF -1) (("1" (FLATTEN) (("1" (HIDE -2) (("1" (SPLIT -1) (("1" (FLATTEN) (("1" (ASSERT) (("1" (INST 1 THETA!1) (("1" (REWRITE FRESH_SUBS_APPEND_CONTEXT) (("1" (SKEEP) (("1" (INST -14 X) (("1" (REWRITE SUBS_APPEND -14) (("1" (LEMMA ALPHA_SUBS_INVARIANCE (DELTA DELTA SIGMA "append(theta!1, SOL2`2)" GAMMA "theta" T "Subs(SOL1`2)((: :) * X)")) (("1" (PROP) (("1" (REWRITE* SUBS_APPEND) (("1" (LEMMA ALPHA_TRANSITIVE (DELTA DELTA T1 "Subs(theta!1)(Subs(SOL2`2)(Subs(SOL1`2)((: :) * X)))" T2 "Subs(theta)(Subs(SOL1`2)((: :) * X))" T3 "Subs(sigma)((: :) * X)")) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (REWRITE FRESH_SUBS_CHARACTER 1) (("2" (SKEEP) (("2" (REWRITE FRESH_SUBS_CHARACTER -12) (("2" (INST -12 AX) (("2" (INST -4 "ax`2") (("2" (LEMMA ALPHA_PRESERVES_FRESH (DELTA DELTA A "ax`1" T "Subs(append(theta!1, SOL2`2))((: :) * ax`2)" S "Subs(theta)((: :) * ax`2)")) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-10 -11 1)) (("2" (REWRITE LEX2_LT) (("2" (CASE "SOL1`2 = Id") (("1" (REPLACES -1) (("1" (EXPAND ID) (("1" (EXPAND SUBS) (("1" (EXPAND DEPTH 1 2) (("1" (EXPAND MAX) (("1" (LEMMA CARD_SUBSET (A "Vars(term2(T), term2(S))" B "Vars(T, S)")) (("1" (EXPAND <=) (("1" (SPLIT -1) (("1" (ASSERT) NIL NIL) ("2" (ASSERT) (("2" (LIFT-IF) (("2" (ASSERT) NIL NIL)) NIL)) NIL) ("3" (HIDE 2) (("3" (EXPAND* VARS SUBSET? MEMBER) (("3" (EXPAND VARS 1 (3 4)) (("3" (EXPAND* UNION MEMBER) (("3" (SKEEP) (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (LEMMA SUBS_UNIF_VARS_DECREASE (U "term1(T)" S "term1(S)" W "term2(T)" T "term2(S)" GAMMA "SOL1`2")) (("2" (CASE "Vars(T, S) = union(Vars(term1(T), term1(S)), Vars(term2(T), term2(S)))") (("1" (ASSERT) NIL NIL) ("2" (HIDE -1 3) (("2" (EXPAND VARS) (("2" (EXPAND VARS 1 (1 2)) (("2" (EXPAND* UNION MEMBER) (("2" (DECOMPOSE-EQUALITY) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL) ("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-1 -2 1)) (("2" (REWRITE LEX2_LT) (("2" (FLATTEN) (("2" (LEMMA CARD_SUBSET (A "Vars(term1(T), term1(S))" B "Vars(T, S)")) (("2" (EXPAND <=) (("2" (EXPAND DEPTH 2 2) (("2" (EXPAND MAX) (("2" (SPLIT -1) (("1" (PROPAX) NIL NIL) ("2" (ASSERT) (("2" (LIFT-IF) (("2" (ASSERT) NIL NIL)) NIL)) NIL) ("3" (HIDE 3) (("3" (EXPAND VARS 1) (("3" (EXPAND VARS 1 (3 4)) (("3" (EXPAND* SUBSET? UNION MEMBER) (("3" (SKEEP) (("3" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (LEMMA ALPHA_SUBS_ORD (DELTA DELTA SIGMA SIGMA T T S S)) (("2" (ASSERT) (("2" (SPLIT -1) (("1" (FLATTEN) (("1" (EXPAND MEMBER 1) (("1" (REWRITE VARS_OCCURS) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL) ("2" (HIDE 6) (("2" (EXPAND ORD) (("2" (SPLIT 2) (("1" (FLATTEN) (("1" (ASSERT) (("1" (LIFT-IF) (("1" (ASSERT) (("1" (HIDE 1) (("1" (PROP) (("1" (REVEAL 1) (("1" (ASSERT) (("1" (LEMMA TERM_ABS_ETA (ABS?_VAR T)) (("1" (LEMMA TERM_ABS_ETA (ABS?_VAR S)) (("1" (REPLACE -1 -6 RL) (("1" (REPLACE -2 -6 RL) (("1" (REWRITE SUBS_ABS) (("1" (REWRITE SUBS_ABS) (("1" (EXPAND ALPHA -6) (("1" (SPLIT -6) (("1" (FLATTEN) (("1" (ASSERT) (("1" (INST -7 "body(T)" "body(S)") (("1" (SPLIT -7) (("1" (INST -1 DELTA SIGMA) (("1" (ASSERT) NIL NIL)) NIL) ("2" (HIDE 2) (("2" (REWRITE LEX2_LT) (("2" (EXPAND VARS 1) (("2" (EXPAND DEPTH 1 2) (("2" (EXPAND VARS 1 (7 8)) (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (ASSERT) (("2" (INST -7 "body(T)" "ext(cons((abstr(T), abstr(S)), null))(body(S))") (("2" (SPLIT -7) (("1" (INST -1 DELTA SIGMA) (("1" (REWRITE SUBS_PERM_COMM -1) (("1" (EXPAND X) (("1" (ASSERT) (("1" (FLATTEN) (("1" (ASSERT) (("1" (NAME-REPLACE "SOL" "unify(body(T), ext(cons((abstr(T), abstr(S)), null))(body(S)))") (("1" (EXPAND LESS -2) (("1" (SKEEP) (("1" (LEMMA SUBS_FRESH (A "abstr(T)" SIGMA "theta" T "Subs(SOL`2)(body(S))")) (("1" (LEMMA ALPHA_SUBS_INVARIANCE (DELTA DELTA SIGMA "append(theta, SOL`2)" GAMMA SIGMA T "body(S)")) (("1" (LEMMA ALPHA_PRESERVES_FRESH (DELTA DELTA A "abstr(T)" T "Subs(append(theta, SOL`2))(body(S))" S "Subs(sigma)(body(S))")) (("1" (SPLIT -2) (("1" (LEMMA FRESH?_COMPLETE (DELTA DELTA A "abstr(T)" T "Subs(theta)(Subs(SOL`2)(body(S)))")) (("1" (REWRITE SUBS_APPEND) (("1" (ASSERT) (("1" (PROP) (("1" (EXPAND LESS) (("1" (INST 1 THETA) (("1" (ASSERT) (("1" (REWRITE FRESH_SUBS_APPEND_CONTEXT) (("1" (EXPAND ID) (("1" (EXPAND APPEND 1 2) (("1" (PROP) (("1" (LEMMA FRESH_SUBS?_IS_FRESH3 (A "abstr(T)" SIGMA THETA T "Subs(SOL`2)(body(S))")) (("1" (EXPAND X) (("1" (REWRITE APPEND_NULL) (("1" (DECOMPOSE-EQUALITY -1) (("1" (PROP) (("1" (ASSERT) (("1" (LEMMA FRESH_SUBS_WEAKENING (DELTA "fresh?(abstr(T), Subs(SOL`2)(body(S)))`1" SIGMA THETA NABLA1 "fresh_subs?(theta, fresh?(abstr(T), Subs(SOL`2)(body(S)))`1)`1" NABLA2 DELTA)) (("1" (ASSERT) (("1" (LEMMA FRESH_SUBS?_IS_FRESH_SUBS (SIGMA THETA NABLA "fresh?(abstr(T), Subs(SOL`2)(body(S)))`1")) (("1" (ASSERT) (("1" (REPLACE -3 -6) (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE 3) (("2" (REWRITE LEX2_LT) (("2" (EXPAND DEPTH 1 2) (("2" (FLATTEN) (("2" (EXPAND VARS 2) (("2" (REWRITE EXT_PRESERVES_VARS) (("2" (EXPAND VARS 2 (3 4)) (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (ASSERT) (("2" (LIFT-IF) (("2" (ASSERT) (("2" (LEMMA TERM_APP_ETA (APP?_VAR T)) (("2" (REPLACE -1 -4 RL) (("2" (LEMMA TERM_APP_ETA (APP?_VAR S)) (("1" (REPLACE -1 -5 RL) (("1" (REWRITE SUBS_APP) (("1" (REWRITE SUBS_APP) (("1" (EXPAND ALPHA -5) (("1" (FLATTEN) (("1" (ASSERT) (("1" (INST -4 "arg(T)" "arg(S)") (("1" (SPLIT -4) (("1" (INST -1 DELTA SIGMA) (("1" (ASSERT) NIL NIL)) NIL) ("2" (REWRITE LEX2_LT) (("2" (FLATTEN) (("2" (EXPAND DEPTH 2 2) (("2" (EXPAND VARS 2) (("2" (EXPAND VARS 2 (3 4)) (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL ((SUBS_FRESH FORMULA-DECL NIL SUBSTITUTION NIL) (FRESH?_COMPLETE FORMULA-DECL NIL FRESHNESS NIL) (X CONST-DECL "[fresh_context, bool]" FRESHNESS NIL) (FALSE CONST-DECL "bool" BOOLEANS NIL) (IF CONST-DECL "[boolean, T, T -> T]" IF_DEF NIL) (FRESH_SUBS?_IS_FRESH_SUBS FORMULA-DECL NIL SUBSTITUTION NIL) (FRESH_SUBS_WEAKENING FORMULA-DECL NIL SUBSTITUTION NIL) (FRESH_SUBS?_IS_FRESH3 FORMULA-DECL NIL SUBSTITUTION NIL) (FRESH? DEF-DECL "[fresh_context, bool]" FRESHNESS NIL) (EXT_PRESERVES_VARS FORMULA-DECL NIL NOMINAL_TERM NIL) (SUBS_ABS FORMULA-DECL NIL SUBSTITUTION NIL) (ABSTR ADT-ACCESSOR-DECL "[(abs?) -> atom]" TERM_ADT NIL) (BODY ADT-ACCESSOR-DECL "[(abs?) -> term]" TERM_ADT NIL) (ABS? ADT-RECOGNIZER-DECL "[term -> boolean]" TERM_ADT NIL) (TERM_ABS_ETA FORMULA-DECL NIL TERM_ADT NIL) (SUBS_APP FORMULA-DECL NIL SUBSTITUTION NIL) (SYM ADT-ACCESSOR-DECL "[(app?) -> symbol]" TERM_ADT NIL) (ARG ADT-ACCESSOR-DECL "[(app?) -> term]" TERM_ADT NIL) (APP? ADT-RECOGNIZER-DECL "[term -> boolean]" TERM_ADT NIL) (TERM_APP_ETA FORMULA-DECL NIL TERM_ADT NIL) (TERM1 ADT-ACCESSOR-DECL "[(pair?) -> term]" TERM_ADT NIL) (PAIR? ADT-RECOGNIZER-DECL "[term -> boolean]" TERM_ADT NIL) (ALPHA_SUBS_INVARIANCE FORMULA-DECL NIL SUBSTITUTION NIL) (APPEND DEF-DECL "list[T]" LIST_PROPS NIL) (ALPHA_TRANSITIVE FORMULA-DECL NIL ALPHA_EQUIVALENCE NIL) (X CONST-DECL "[fresh_context, Sub, bool]" NOMINALUNIF NIL) (FRESH_SUBS_O_FRESH_SUBS? FORMULA-DECL NIL SUBSTITUTION NIL) (FRESH_SUBS? DEF-DECL "[fresh_context, bool]" SUBSTITUTION NIL) (FRESH_SUBS_APPEND_CONTEXT FORMULA-DECL NIL SUBSTITUTION NIL) (ALPHA_PRESERVES_FRESH FORMULA-DECL NIL ALPHA_EQUIVALENCE NIL) (LEX2_LT FORMULA-DECL NIL LEX2 NIL) (REAL_LT_IS_STRICT_TOTAL_ORDER NAME-JUDGEMENT "(strict_total_order?[real])" REAL_PROPS NIL) (SUBS_UNIF_VARS_DECREASE FORMULA-DECL NIL SUBSTITUTION NIL) (OR CONST-DECL "[bool, bool -> bool]" BOOLEANS NIL) (FINITE_UNION APPLICATION-JUDGEMENT "finite_set" FINITE_SETS NIL) (MAX CONST-DECL "{p: real | p >= m AND p >= n}" REAL_DEFS NIL) (<= CONST-DECL "bool" REALS NIL) (VARS DEF-DECL "finite_set[variable]" NOMINAL_TERM NIL) (UNION CONST-DECL "set" SETS NIL) (SUBSET? CONST-DECL "bool" SETS NIL) (CARD_SUBSET FORMULA-DECL NIL FINITE_SETS NIL) (NONNEG_RAT_MAX APPLICATION-JUDGEMENT "{s: nonneg_rat | s >= q AND s >= r}" REAL_DEFS NIL) (NAT_MAX APPLICATION-JUDGEMENT "{k: nat | i <= k AND j <= k}" REAL_DEFS NIL) (SUBS_PAIR FORMULA-DECL NIL SUBSTITUTION NIL) (TERM2 ADT-ACCESSOR-DECL "[(pair?) -> term]" TERM_ADT NIL) (TERM_PAIR_ETA FORMULA-DECL NIL TERM_ADT NIL) (ALPHA_SUBS_ORD FORMULA-DECL NIL SUBSTITUTION NIL) (ORD CONST-DECL "upto(5)" TERM_ADT NIL) (ALPHA? DEF-DECL "[fresh_context, bool]" ALPHA_EQUIVALENCE NIL) (FRESH_SUBS_CHARACTER FORMULA-DECL NIL SUBSTITUTION NIL) (FC DEF-DECL "fresh_context" FRESHNESS NIL) (DS CONST-DECL "list[atom]" ATOMS NIL) (DS_MEMBER FORMULA-DECL NIL ATOMS NIL) (MEMBER CONST-DECL "bool" SETS NIL) (DS CONST-DECL "set[atom]" ATOMS NIL) (ALPHA_DS_FRESH FORMULA-DECL NIL ALPHA_EQUIVALENCE NIL) (FC_MEMBER FORMULA-DECL NIL FRESHNESS NIL) (VARS_OCCURS FORMULA-DECL NIL NOMINAL_TERM NIL) (ALPHA_SUBS_VARS FORMULA-DECL NIL SUBSTITUTION NIL) (ALPHA_SYMMETRIC FORMULA-DECL NIL ALPHA_EQUIVALENCE NIL) (A ADT-ACCESSOR-DECL "[(atom?) -> atom]" TERM_ADT NIL) (SUBS_ATOM FORMULA-DECL NIL SUBSTITUTION NIL) (SUBS_ATOM2 FORMULA-DECL NIL SUBSTITUTION NIL) (ID CONST-DECL "Sub" SUBSTITUTION NIL) (ATOM? ADT-RECOGNIZER-DECL "[term -> boolean]" TERM_ADT NIL) (TERM_AT_ETA FORMULA-DECL NIL TERM_ADT NIL) (FRESH_SUBS DEF-DECL "bool" SUBSTITUTION NIL) (* ADT-CONSTRUCTOR-DECL "[[perm, variable] -> (susp?)]" TERM_ADT NIL) (NULL ADT-CONSTRUCTOR-DECL "(null?)" LIST_ADT NIL) (NULL? ADT-RECOGNIZER-DECL "[list -> boolean]" LIST_ADT NIL) (P ADT-ACCESSOR-DECL "[(susp?) -> perm]" TERM_ADT NIL) (REVERSE DEF-DECL "list[T]" LIST_PROPS NIL) (EXT DEF-DECL "term" NOMINAL_TERM NIL) (V ADT-ACCESSOR-DECL "[(susp?) -> variable]" TERM_ADT NIL) (SUSP? ADT-RECOGNIZER-DECL "[term -> boolean]" TERM_ADT NIL) (CONS ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" LIST_ADT NIL) (CONS? ADT-RECOGNIZER-DECL "[list -> boolean]" LIST_ADT NIL) (SUBS_APPEND FORMULA-DECL NIL SUBSTITUTION NIL) (ALPHA_REFLEXIVITY FORMULA-DECL NIL ALPHA_EQUIVALENCE NIL) (SUBS_PERM_COMM FORMULA-DECL NIL SUBSTITUTION NIL) (REVERSE_REVERSE FORMULA-DECL NIL LIST_PROPS NIL) (EXT_REVERSE_ALPHA FORMULA-DECL NIL ALPHA_EQUIVALENCE NIL) (APPEND_NULL FORMULA-DECL NIL LIST_PROPS NIL) (TERM_TIMES_ETA FORMULA-DECL NIL TERM_ADT NIL) (EXT_IDENTITY FORMULA-DECL NIL NOMINAL_TERM NIL) (SUBS DEF-DECL "term" SUBSTITUTION NIL) (FRESH_CONTEXT TYPE-EQ-DECL NIL FRESHNESS NIL) (SUB TYPE-EQ-DECL NIL SUBSTITUTION NIL) (VARS_IN CONST-DECL "bool" SUBSTITUTION NIL) (NOT CONST-DECL "[bool -> bool]" BOOLEANS NIL) (OCCURS DEF-DECL "bool" NOMINAL_TERM NIL) (SUBS_UNIF TYPE-EQ-DECL NIL SUBSTITUTION NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" BOOLEANS NIL) (ALPHA DEF-DECL "bool" ALPHA_EQUIVALENCE NIL) (SUBS DEF-DECL "term" SUBSTITUTION NIL) (LESS CONST-DECL "bool" NOMINALUNIF NIL) (UNIFY DEF-DECL "[fresh_context, Subs_unif(t, s), bool]" NOMINALUNIF NIL) (WELL_FOUNDED_LE FORMULA-DECL NIL ORDINALS NIL) (< DEF-DECL "bool" ORDINALS NIL) (DEPTH DEF-DECL "nat" NOMINAL_TERM NIL) (VARS CONST-DECL "finite_set[variable]" SUBSTITUTION NIL) (CARD CONST-DECL "{n: nat | n = Card(S)}" FINITE_SETS NIL) (CARD CONST-DECL "nat" FINITE_SETS NIL) (= CONST-DECL "[T, T -> boolean]" EQUALITIES NIL) (FINITE_SET TYPE-EQ-DECL NIL FINITE_SETS NIL) (IS_FINITE CONST-DECL "bool" FINITE_SETS NIL) (SET TYPE-EQ-DECL NIL SETS NIL) (LEX2 CONST-DECL "ordinal" LEX2 NIL) (ORDINAL NONEMPTY-TYPE-EQ-DECL NIL ORDINALS NIL) (ORDINAL? DEF-DECL "bool" ORDINALS NIL) (ORDSTRUCT TYPE-DECL NIL ORDSTRUCT_ADT NIL) (VARIABLE TYPE-EQ-DECL NIL NOMINAL_TERM NIL) (TRUE CONST-DECL "bool" BOOLEANS NIL) (AND CONST-DECL "[bool, bool -> bool]" BOOLEANS NIL) (PRED TYPE-EQ-DECL NIL DEFINED_TYPES NIL) (TERM TYPE-DECL NIL TERM_ADT NIL) (SYMBOL TYPE-EQ-DECL NIL NOMINAL_TERM NIL) (CHAR TYPE-EQ-DECL NIL STRINGS NIL) (CHAR? ADT-RECOGNIZER-DECL "[character -> boolean]" CHARACTER_ADT NIL) (CHARACTER TYPE-DECL NIL CHARACTER_ADT NIL) (BELOW TYPE-EQ-DECL NIL NAT_TYPES NIL) (NAT NONEMPTY-TYPE-EQ-DECL NIL NATURALNUMBERS NIL) (PERM TYPE-EQ-DECL NIL ATOMS NIL) (LIST TYPE-DECL NIL LIST_ADT NIL) (ATOM TYPE-EQ-DECL NIL ATOMS NIL) (>= CONST-DECL "bool" REALS NIL) (BOOL NONEMPTY-TYPE-EQ-DECL NIL BOOLEANS NIL) (INT NONEMPTY-TYPE-EQ-DECL NIL INTEGERS NIL) (INTEGER_PRED CONST-DECL "[rational -> boolean]" INTEGERS NIL) (RATIONAL NONEMPTY-TYPE-FROM-DECL NIL RATIONALS NIL) (RATIONAL_PRED CONST-DECL "[real -> boolean]" RATIONALS NIL) (REAL NONEMPTY-TYPE-FROM-DECL NIL REALS NIL) (REAL_PRED CONST-DECL "[number_field -> boolean]" REALS NIL) (NUMBER_FIELD NONEMPTY-TYPE-FROM-DECL NIL NUMBER_FIELDS NIL) (NUMBER_FIELD_PRED CONST-DECL "[number -> boolean]" NUMBER_FIELDS NIL) (BOOLEAN NONEMPTY-TYPE-DECL NIL BOOLEANS NIL) (NUMBER NONEMPTY-TYPE-DECL NIL NUMBERS NIL) (MEASURE_INDUCTION FORMULA-DECL NIL MEASURE_INDUCTION NIL) (WELL_FOUNDED? CONST-DECL "bool" ORDERS NIL) (PRED TYPE-EQ-DECL NIL DEFINED_TYPES NIL)) NIL NIL NIL SHOSTAK))("nominalunif" |nominalunif| |unify_sound| 0 (|unify_sound-2| NIL 3745921861 NIL ("" (MEASURE-INDUCT "lex2(card(Vars(t,s)), depth(t))" ("t" "s")) (("" (SKOLEM 1 ("T" "S")) (("" (PROP) (("" (EXPAND "unify" (-2 1)) (("" (LIFT-IF) (("" (SPLIT -2) (("1" (FLATTEN) (("1" (ASSERT) (("1" (HIDE -2) (("1" (EXPAND* "Subs" "Subs" "Id") (("1" (REWRITE "not_occurs_subs_invariance") (("1" (EXPAND "subs") (("1" (LEMMA "alpha_ext_invariance") (("1" (INST -1 "(::)" "(::)" "append(p(S), reverse(p(S)))" T) (("1" (REWRITE "ext_append") (("1" (REWRITE "ext_identity") (("1" (ASSERT) (("1" (DECOMPOSE-EQUALITY 1) (("1" (REWRITE "act_append") (("1" (REWRITE "act_reverse2") (("1" (EXPAND "act") (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (ASSERT) (("2" (SPLIT -1) (("1" (FLATTEN) (("1" (ASSERT) (("1" (HIDE -3 1) (("1" (EXPAND* "Id" "Subs") (("1" (LEMMA "alpha_reflexivity") (("1" (INST -1 "null" "T") (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (ASSERT) (("2" (SPLIT 3) (("1" (FLATTEN) (("1" (ASSERT) NIL NIL)) NIL) ("2" (FLATTEN) (("2" (SPLIT -1) (("1" (FLATTEN) (("1" (ASSERT) (("1" (SPLIT -2) (("1" (ASSERT) (("1" (LIFT-IF) (("1" (SPLIT 3) (("1" (FLATTEN) (("1" (ASSERT) NIL NIL)) NIL) ("2" (FLATTEN) (("2" (HIDE -2 1 4 6) (("2" (EXPAND* "Subs" "Subs" "Id") (("2" (LEMMA "not_occurs_subs_invariance" ("X" "V(T)" "t" "S" "s" "ext(reverse(p(T)))(S)")) (("2" (ASSERT) (("2" (REPLACES -1) (("2" (EXPAND "subs") (("2" (LEMMA "alpha_ext_invariance") (("2" (INST -1 "null" "append(p(T), reverse(p(T)))" "null" "S") (("2" (REWRITE "ext_append") (("2" (REWRITE "ext_identity") (("2" (ASSERT) (("2" (DECOMPOSE-EQUALITY 1) (("2" (REWRITE "act_append") (("2" (REWRITE "act_reverse2") (("2" (EXPAND "act") (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (ASSERT) (("2" (LIFT-IF) (("2" (SPLIT 2) (("1" (FLATTEN) (("1" (PROP) NIL NIL)) NIL) ("2" (FLATTEN) (("2" (LEMMA "alpha?_is_alpha" ("Delta" "alpha?(p(T) * V(T), S)`1" "t" "T" "s" "S")) (("2" (EXPAND* "Id" "Subs") (("2" (ASSERT) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (ASSERT) (("2" (SPLIT -1) (("1" (FLATTEN) (("1" (ASSERT) (("1" (HIDE -3 2 5) (("1" (EXPAND* "Id" "Subs") (("1" (LEMMA "alpha_reflexivity") (("1" (INST -1 "null" "T") (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (ASSERT) (("2" (SPLIT -1) (("1" (FLATTEN) (("1" (SPLIT -2) (("1" (PROPAX) NIL NIL) ("2" (FLATTEN) (("2" (ASSERT) (("2" (EXPAND "x") (("2" (LIFT-IF) (("2" (SPLIT -2) (("1" (FLATTEN) (("1" (ASSERT) (("1" (INST -6 "term1(T)" "term1(S)") (("1" (NAME-REPLACE "SOL1" "unify(term1(T), term1(S))") (("1" (REVEAL -2) (("1" (INST -1 "Subs(SOL1`2)(term2(T))" "Subs(SOL1`2)(term2(S))") (("1" (NAME-REPLACE "SOL2" "unify(Subs(SOL1`2)(term2(T)), Subs(SOL1`2)(term2(S)))") (("1" (LEMMA "Subs_pair" ("sigma" "append(SOL2`2, SOL1`2)" "t" "term1(T)" "s" "term2(T)")) (("1" (LEMMA "term_pair_eta" ("pair?_var" "T")) (("1" (LEMMA "term_pair_eta" ("pair?_var" "S")) (("1" (REPLACES -2) (("1" (REPLACES -2) (("1" (LEMMA "Subs_pair" ("sigma" "append(SOL2`2, SOL1`2)" "t" "term1(S)" "s" "term2(S)")) (("1" (REPLACES -2) (("1" (REPLACES -1) (("1" (EXPAND "alpha" 3) (("1" (SPLIT -1) (("1" (SPLIT -7) (("1" (SPLIT 3) (("1" (REWRITE "Subs_append") (("1" (REWRITE "Subs_append") (("1" (LEMMA "fresh_subs?_alpha" ("Delta" "SOL1`1" "t" "Subs(SOL1`2)(term1(T))" "s" "Subs(SOL1`2)(term1(S))" "sigma" "SOL2`2")) (("1" (ASSERT) (("1" (ASSERT) (("1" (LEMMA "alpha_weakening" ("Delta" "fresh_subs?(SOL2`2, SOL1`1)`1" "Nabla" "append(SOL2`1, fresh_subs?(SOL2`2, SOL1`1)`1)" "t" "Subs(SOL2`2)(Subs(SOL1`2)(term1(T)))" "s" "Subs(SOL2`2)(Subs(SOL1`2)(term1(S)))")) (("1" (ASSERT) (("1" (SKEEP) (("1" (REWRITE "append_member") (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (REWRITE "Subs_append") (("2" (REWRITE "Subs_append") (("2" (LEMMA "alpha_weakening" ("Delta" "SOL2`1" "Nabla" "append(SOL2`1, fresh_subs?(SOL2`2, SOL1`1)`1)" "t" "Subs(SOL2`2)(Subs(SOL1`2)(term2(T)))" "s" "Subs(SOL2`2)(Subs(SOL1`2)(term2(S)))")) (("2" (ASSERT) (("2" (SKEEP) (("2" (REWRITE "append_member") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (PROPAX) NIL NIL) ("3" (REWRITE "lex2_lt") (("3" (HIDE 4) (("3" (LEMMA "card_subset" (A "Vars(term1(T), term1(S))" B "Vars(T, S)")) (("3" (EXPAND <=) (("3" (FLATTEN) (("3" (ASSERT) (("3" (SPLIT) (("1" (ASSERT) (("1" (EXPAND "depth" 2 2) (("1" (EXPAND "max") (("1" (LIFT-IF) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "Vars" 1) (("2" (EXPAND* "subset?" "union" "member") (("2" (SKEEP) (("2" (EXPAND "Vars" (1 2)) (("2" (EXPAND* "union" "member") (("2" (FLATTEN) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (PROPAX) NIL NIL) ("3" (REWRITE "lex2_lt") (("3" (LEMMA "card_subset" ("A" "Vars(Subs(SOL1`2)(term2(T)), Subs(SOL1`2)(term2(S)))" "B" "Vars(T, S)")) (("3" (EXPAND <=) (("3" (FLATTEN) (("3" (SPLIT 2) (("1" (ASSERT) (("1" (LEMMA "Subs_unif_Vars_subset" ("u" "term1(T)" "s" "term1(S)" "w" "term2(T)" "t" "term2(S)" "gamma" "SOL1`2")) (("1" (EXPAND "Vars" -1 (2 3)) (("1" (EXPAND "Vars" 2 2) (("1" (EXPAND "Vars" 2 (2 3)) (("1" (HIDE-ALL-BUT (-1 2)) (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (CASE "SOL1`2 = Id") (("1" (REPLACES -1) (("1" (HIDE-ALL-BUT (-6 1)) (("1" (EXPAND* "Id" "Subs" "subs") (("1" (EXPAND "depth" 1 2) (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (LEMMA "Subs_unif_Vars_decrease" ("u" "term1(T)" "s" "term1(S)" "w" "term2(T)" "t" "term2(S)" "gamma" "SOL1`2")) (("2" (CASE "union(Vars(term1(T), term1(S)), Vars(term2(T), term2(S))) = Vars(T, S)") (("1" (ASSERT) NIL NIL) ("2" (HIDE-ALL-BUT (-6 -7 1)) (("2" (EXPAND "Vars") (("2" (EXPAND "Vars" 1 (5 6)) (("2" (EXPAND* "union" "member") (("2" (DECOMPOSE-EQUALITY) (("2" (IFF) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (ASSERT) (("2" (SPLIT -1) (("1" (FLATTEN) (("1" (ASSERT) (("1" (SPLIT -2) (("1" (PROPAX) NIL NIL) ("2" (FLATTEN) (("2" (ASSERT) (("2" (LEMMA "term_abs_eta" ("abs?_var" "T")) (("2" (LEMMA "term_abs_eta" ("abs?_var" "S")) (("2" (HIDE 4 7) (("2" (PROP) (("1" (INST -8 "body(T)" "body(S)") (("1" (NAME-REPLACE "SOL" "unify(body(T), body(S))") (("1" (REPLACE -4 1 RL) (("1" (REPLACE -5 1 RL) (("1" (REWRITE "Subs_abs") (("1" (REWRITE "Subs_abs") (("1" (EXPAND "alpha" 1) (("1" (ASSERT) (("1" (REWRITE "lex2_lt") (("1" (EXPAND "depth" 6 2) (("1" (FLATTEN) (("1" (EXPAND "Vars" 7) (("1" (EXPAND "Vars" 7 (3 4)) (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (INST -6 "body(T)" "ext((: (abstr(T), abstr(S)) :))(body(S))") (("2" (EXPAND "x" -1) (("2" (PROP) (("1" (EXPAND "x") (("1" (ASSERT) (("1" (EXPAND "Id") (("1" (EXPAND "append" 2 (2 3)) (("1" (NAME-REPLACE "SOL" "unify(body(T), ext((: (abstr(T), abstr(S)) :))(body(S)))") (("1" (NAME-REPLACE "FRESH" "fresh?(abstr(T), Subs(SOL`2)(body(S)))") (("1" (REPLACE -4 2 RL) (("1" (REPLACE -5 2 RL) (("1" (REWRITE "Subs_abs") (("1" (REWRITE "Subs_abs") (("1" (EXPAND "alpha" 2) (("1" (SPLIT 2) (("1" (LEMMA "fresh_weakening" ("Nabla" "append(FRESH`1, SOL`1)" "Delta" "FRESH`1" "a" "abstr(T)" "t" "Subs(SOL`2)(body(S))")) (("1" (ASSERT) (("1" (SPLIT) (("1" (SKEEP) (("1" (REWRITE "append_member") (("1" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (EXPAND "FRESH" (-2 1)) (("2" (REWRITE "fresh?_is_fresh") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (LEMMA "alpha_weakening" ("Nabla" "append(FRESH`1, SOL`1)" "Delta" "SOL`1" "t" "Subs(SOL`2)(body(T))" "s" "ext((: (abstr(T), abstr(S)) :))(Subs(SOL`2)(body(S)))")) (("2" (REWRITE "Subs_perm_comm") (("2" (ASSERT) (("2" (SKEEP) (("2" (REWRITE "append_member") (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-5 -6 1)) (("2" (REWRITE "lex2_lt") (("2" (EXPAND "depth" 1 2) (("2" (LEMMA "card_subset" ("A" "Vars(body(T), ext((: (abstr(T), abstr(S)) :))(body(S)))" "B" "Vars(T, S)")) (("2" (EXPAND <=) (("2" (FLATTEN) (("2" (ASSERT) (("2" (HIDE 2 3) (("2" (EXPAND "Vars") (("2" (EXPAND "Vars" 1 (3 4)) (("2" (EXPAND* "subset?" "union" "member") (("2" (SKEEP) (("2" (ASSERT) (("2" (REWRITE "ext_preserves_Vars") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (ASSERT) (("2" (HIDE 5 8) (("2" (PROP) (("2" (LEMMA "term_app_eta" ("app?_var" "T")) (("2" (LEMMA "term_app_eta" ("app?_var" "S")) (("2" (INST -8 "arg(T)" "arg(S)") (("2" (NAME-REPLACE "SOL" "unify(arg(T), arg(S))") (("2" (ASSERT) (("2" (REPLACE -1 1 RL) (("2" (REPLACE -2 1 RL) (("2" (REWRITE "Subs_app") (("2" (REWRITE "Subs_app") (("2" (EXPAND "alpha" 1) (("2" (ASSERT) (("2" (REWRITE "lex2_lt") (("2" (HIDE-ALL-BUT (-3 -5 7)) (("2" (LEMMA "card_subset" ("A" "Vars(arg(T), arg(S))" "B" "Vars(T, S)")) (("2" (EXPAND "depth" 1 2) (("2" (FLATTEN) (("2" (EXPAND <=) (("2" (ASSERT) (("2" (HIDE 2 3) (("2" (EXPAND "Vars") (("2" (EXPAND "Vars" 1 (3 4)) (("2" (REWRITE "subset_reflexive") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL ((SUBS DEF-DECL "term" SUBSTITUTION NIL) (APPEND DEF-DECL "list[T]" LIST_PROPS NIL) (NULL ADT-CONSTRUCTOR-DECL "(null?)" LIST_ADT NIL) (NULL? ADT-RECOGNIZER-DECL "[list -> boolean]" LIST_ADT NIL) (EXT_IDENTITY FORMULA-DECL NIL NOMINAL_TERM NIL) (ACT DEF-DECL "atom" ATOMS NIL) (ACT_REVERSE2 FORMULA-DECL NIL ATOMS NIL) (ACT_APPEND FORMULA-DECL NIL ATOMS NIL) (EXT_APPEND FORMULA-DECL NIL NOMINAL_TERM NIL) (ALPHA_EXT_INVARIANCE FORMULA-DECL NIL ALPHA_EQUIVALENCE NIL) (NOT_OCCURS_SUBS_INVARIANCE FORMULA-DECL NIL SUBSTITUTION NIL) (SUSP? ADT-RECOGNIZER-DECL "[term -> boolean]" TERM_ADT NIL) (V ADT-ACCESSOR-DECL "[(susp?) -> variable]" TERM_ADT NIL) (EXT DEF-DECL "term" NOMINAL_TERM NIL) (REVERSE DEF-DECL "list[T]" LIST_PROPS NIL) (P ADT-ACCESSOR-DECL "[(susp?) -> perm]" TERM_ADT NIL) (DS CONST-DECL "set[atom]" ATOMS NIL) (VARS DEF-DECL "finite_set[variable]" NOMINAL_TERM NIL) (MEMBER DEF-DECL "bool" LIST_PROPS NIL) (DS CONST-DECL "list[atom]" ATOMS NIL) (* ADT-CONSTRUCTOR-DECL "[[perm, variable] -> (susp?)]" TERM_ADT NIL) (ALPHA? DEF-DECL "[fresh_context, bool]" ALPHA_EQUIVALENCE NIL) (ALPHA?_IS_ALPHA FORMULA-DECL NIL ALPHA_EQUIVALENCE NIL) (TERM1 ADT-ACCESSOR-DECL "[(pair?) -> term]" TERM_ADT NIL) (PAIR? ADT-RECOGNIZER-DECL "[term -> boolean]" TERM_ADT NIL) (TERM_PAIR_ETA FORMULA-DECL NIL TERM_ADT NIL) (LEX2_LT FORMULA-DECL NIL LEX2 NIL) (REAL_LT_IS_STRICT_TOTAL_ORDER NAME-JUDGEMENT "(strict_total_order?[real])" REAL_PROPS NIL) (CARD_SUBSET FORMULA-DECL NIL FINITE_SETS NIL) (MAX CONST-DECL "{p: real | p >= m AND p >= n}" REAL_DEFS NIL) (UNION CONST-DECL "set" SETS NIL) (MEMBER CONST-DECL "bool" SETS NIL) (SUBSET? CONST-DECL "bool" SETS NIL) (SUBSET_IS_PARTIAL_ORDER NAME-JUDGEMENT "(partial_order?[set[T]])" SETS_LEMMAS NIL) (<= CONST-DECL "bool" REALS NIL) (ALPHA_WEAKENING FORMULA-DECL NIL ALPHA_EQUIVALENCE NIL) (FRESH_SUBS? DEF-DECL "[fresh_context, bool]" SUBSTITUTION NIL) (APPEND_MEMBER FORMULA-DECL NIL STRUCTURE_EXTRA NIL) (FRESH_SUBS?_ALPHA FORMULA-DECL NIL SUBSTITUTION NIL) (SUBS_APPEND FORMULA-DECL NIL SUBSTITUTION NIL) (REAL_PLUS_REAL_IS_REAL APPLICATION-JUDGEMENT "real" REALS NIL) (POSINT_PLUS_NNINT_IS_POSINT APPLICATION-JUDGEMENT "posint" INTEGERS NIL) (NAT_MAX APPLICATION-JUDGEMENT "{k: nat | i <= k AND j <= k}" REAL_DEFS NIL) (NONNEG_RAT_MAX APPLICATION-JUDGEMENT "{s: nonneg_rat | s >= q AND s >= r}" REAL_DEFS NIL) (OR CONST-DECL "[bool, bool -> bool]" BOOLEANS NIL) (SUBS_UNIF_VARS_DECREASE FORMULA-DECL NIL SUBSTITUTION NIL) (FINITE_UNION APPLICATION-JUDGEMENT "finite_set" FINITE_SETS NIL) (REAL_GE_IS_TOTAL_ORDER NAME-JUDGEMENT "(total_order?[real])" REAL_PROPS NIL) (SUBS_UNIF_VARS_SUBSET FORMULA-DECL NIL SUBSTITUTION NIL) (SUBS_PAIR FORMULA-DECL NIL SUBSTITUTION NIL) (TERM2 ADT-ACCESSOR-DECL "[(pair?) -> term]" TERM_ADT NIL) (X CONST-DECL "[fresh_context, Sub, bool]" NOMINALUNIF NIL) (TERM_APP_ETA FORMULA-DECL NIL TERM_ADT NIL) (APP? ADT-RECOGNIZER-DECL "[term -> boolean]" TERM_ADT NIL) (ARG ADT-ACCESSOR-DECL "[(app?) -> term]" TERM_ADT NIL) (SUBSET_REFLEXIVE FORMULA-DECL NIL SETS_LEMMAS NIL) (SUBS_APP FORMULA-DECL NIL SUBSTITUTION NIL) (SYM ADT-ACCESSOR-DECL "[(app?) -> symbol]" TERM_ADT NIL) (SUBS_ABS FORMULA-DECL NIL SUBSTITUTION NIL) (ABSTR ADT-ACCESSOR-DECL "[(abs?) -> atom]" TERM_ADT NIL) (BODY ADT-ACCESSOR-DECL "[(abs?) -> term]" TERM_ADT NIL) (EXT_PRESERVES_VARS FORMULA-DECL NIL NOMINAL_TERM NIL) (SUBS_PERM_COMM FORMULA-DECL NIL SUBSTITUTION NIL) (FRESH_WEAKENING FORMULA-DECL NIL FRESHNESS NIL) (FRESH?_IS_FRESH FORMULA-DECL NIL FRESHNESS NIL) (FRESH SKOLEM-CONST-DECL "[fresh_context, bool]" NOMINALUNIF NIL) (FRESH? DEF-DECL "[fresh_context, bool]" FRESHNESS NIL) (CONS? ADT-RECOGNIZER-DECL "[list -> boolean]" LIST_ADT NIL) (CONS ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" LIST_ADT NIL) (ABS? ADT-RECOGNIZER-DECL "[term -> boolean]" TERM_ADT NIL) (TERM_ABS_ETA FORMULA-DECL NIL TERM_ADT NIL) (ALPHA_REFLEXIVITY FORMULA-DECL NIL ALPHA_EQUIVALENCE NIL) (ID CONST-DECL "Sub" SUBSTITUTION NIL) (FRESH_CONTEXT TYPE-EQ-DECL NIL FRESHNESS NIL) (EVERY ADT-DEF-DECL "boolean" LIST_ADT NIL) (VARS_IN CONST-DECL "bool" SUBSTITUTION NIL) (NOT CONST-DECL "[bool -> bool]" BOOLEANS NIL) (OCCURS DEF-DECL "bool" NOMINAL_TERM NIL) (SUBS_UNIF TYPE-EQ-DECL NIL SUBSTITUTION NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" BOOLEANS NIL) (ALPHA DEF-DECL "bool" ALPHA_EQUIVALENCE NIL) (SUB TYPE-EQ-DECL NIL SUBSTITUTION NIL) (SUBS DEF-DECL "term" SUBSTITUTION NIL) (UNIFY DEF-DECL "[fresh_context, Subs_unif(t, s), bool]" NOMINALUNIF NIL) (WELL_FOUNDED_LE FORMULA-DECL NIL ORDINALS NIL) (< DEF-DECL "bool" ORDINALS NIL) (DEPTH DEF-DECL "nat" NOMINAL_TERM NIL) (VARS CONST-DECL "finite_set[variable]" SUBSTITUTION NIL) (CARD CONST-DECL "{n: nat | n = Card(S)}" FINITE_SETS NIL) (CARD CONST-DECL "nat" FINITE_SETS NIL) (= CONST-DECL "[T, T -> boolean]" EQUALITIES NIL) (FINITE_SET TYPE-EQ-DECL NIL FINITE_SETS NIL) (IS_FINITE CONST-DECL "bool" FINITE_SETS NIL) (SET TYPE-EQ-DECL NIL SETS NIL) (LEX2 CONST-DECL "ordinal" LEX2 NIL) (ORDINAL NONEMPTY-TYPE-EQ-DECL NIL ORDINALS NIL) (ORDINAL? DEF-DECL "bool" ORDINALS NIL) (ORDSTRUCT TYPE-DECL NIL ORDSTRUCT_ADT NIL) (VARIABLE TYPE-EQ-DECL NIL NOMINAL_TERM NIL) (TRUE CONST-DECL "bool" BOOLEANS NIL) (AND CONST-DECL "[bool, bool -> bool]" BOOLEANS NIL) (EVERY ADT-DEF-DECL "boolean" TERM_ADT NIL) (PRED TYPE-EQ-DECL NIL DEFINED_TYPES NIL) (TERM TYPE-DECL NIL TERM_ADT NIL) (SYMBOL TYPE-EQ-DECL NIL NOMINAL_TERM NIL) (CHAR TYPE-EQ-DECL NIL STRINGS NIL) (CHAR? ADT-RECOGNIZER-DECL "[character -> boolean]" CHARACTER_ADT NIL) (CHARACTER TYPE-DECL NIL CHARACTER_ADT NIL) (BELOW TYPE-EQ-DECL NIL NAT_TYPES NIL) (NAT NONEMPTY-TYPE-EQ-DECL NIL NATURALNUMBERS NIL) (PERM TYPE-EQ-DECL NIL ATOMS NIL) (LIST TYPE-DECL NIL LIST_ADT NIL) (ATOM TYPE-EQ-DECL NIL ATOMS NIL) (>= CONST-DECL "bool" REALS NIL) (BOOL NONEMPTY-TYPE-EQ-DECL NIL BOOLEANS NIL) (INT NONEMPTY-TYPE-EQ-DECL NIL INTEGERS NIL) (INTEGER_PRED CONST-DECL "[rational -> boolean]" INTEGERS NIL) (RATIONAL NONEMPTY-TYPE-FROM-DECL NIL RATIONALS NIL) (RATIONAL_PRED CONST-DECL "[real -> boolean]" RATIONALS NIL) (REAL NONEMPTY-TYPE-FROM-DECL NIL REALS NIL) (REAL_PRED CONST-DECL "[number_field -> boolean]" REALS NIL) (NUMBER_FIELD NONEMPTY-TYPE-FROM-DECL NIL NUMBER_FIELDS NIL) (NUMBER_FIELD_PRED CONST-DECL "[number -> boolean]" NUMBER_FIELDS NIL) (BOOLEAN NONEMPTY-TYPE-DECL NIL BOOLEANS NIL) (NUMBER NONEMPTY-TYPE-DECL NIL NUMBERS NIL) (MEASURE_INDUCTION FORMULA-DECL NIL MEASURE_INDUCTION NIL) (WELL_FOUNDED? CONST-DECL "bool" ORDERS NIL) (PRED TYPE-EQ-DECL NIL DEFINED_TYPES NIL)) NIL NIL NIL NIL) (|unify_sound-1| NIL 3627982275 NIL ("" (MEASURE-INDUCT "lex2(card(Vars(t,s)), depth(t))" (T S)) (("" (SKOLEM 1 (T S)) (("" (PROP) (("" (EXPAND UNIFY (-2 1)) (("" (LIFT-IF) (("" (SPLIT -2) (("1" (FLATTEN) (("1" (ASSERT) (("1" (HIDE -2) (("1" (EXPAND* SUBS SUBS ID) (("1" (REWRITE NOT_OCCURS_SUBS_INVARIANCE) (("1" (EXPAND SUBS) (("1" (LEMMA ALPHA_EXT_INVARIANCE) (("1" (INST -1 "(::)" "(::)" "append(p(S), reverse(p(S)))" T) (("1" (REWRITE EXT_APPEND) (("1" (REWRITE EXT_IDENTITY) (("1" (ASSERT) (("1" (DECOMPOSE-EQUALITY 1) (("1" (REWRITE ACT_APPEND) (("1" (REWRITE ACT_REVERSE2) (("1" (EXPAND ACT) (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (ASSERT) (("2" (SPLIT -1) (("1" (FLATTEN) (("1" (ASSERT) (("1" (HIDE -3 1) (("1" (EXPAND* ID SUBS) (("1" (LEMMA ALPHA_REFLEXIVITY) (("1" (INST -1 NULL T) (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (ASSERT) (("2" (SPLIT 3) (("1" (FLATTEN) (("1" (ASSERT) NIL NIL)) NIL) ("2" (FLATTEN) (("2" (SPLIT -1) (("1" (FLATTEN) (("1" (ASSERT) (("1" (SPLIT -2) (("1" (ASSERT) (("1" (LIFT-IF) (("1" (SPLIT 3) (("1" (FLATTEN) (("1" (ASSERT) NIL NIL)) NIL) ("2" (FLATTEN) (("2" (HIDE -2 1 4 6) (("2" (EXPAND* SUBS SUBS ID) (("2" (LEMMA NOT_OCCURS_SUBS_INVARIANCE (X "V(T)" T S S "ext(reverse(p(T)))(S)")) (("2" (ASSERT) (("2" (REPLACES -1) (("2" (EXPAND SUBS) (("2" (LEMMA ALPHA_EXT_INVARIANCE) (("2" (INST -1 NULL "append(p(T), reverse(p(T)))" NULL S) (("2" (REWRITE EXT_APPEND) (("2" (REWRITE EXT_IDENTITY) (("2" (ASSERT) (("2" (DECOMPOSE-EQUALITY 1) (("2" (REWRITE ACT_APPEND) (("2" (REWRITE ACT_REVERSE2) (("2" (EXPAND ACT) (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (ASSERT) (("2" (LIFT-IF) (("2" (SPLIT 2) (("1" (FLATTEN) (("1" (PROP) NIL NIL)) NIL) ("2" (FLATTEN) (("2" (LEMMA ALPHA?_IS_ALPHA (DELTA "alpha?(p(T) * V(T), S)`1" T T S S)) (("2" (EXPAND* ID SUBS) (("2" (ASSERT) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (ASSERT) (("2" (SPLIT -1) (("1" (FLATTEN) (("1" (ASSERT) (("1" (HIDE -3 2 5) (("1" (EXPAND* ID SUBS) (("1" (LEMMA ALPHA_REFLEXIVITY) (("1" (INST -1 NULL T) (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (ASSERT) (("2" (SPLIT -1) (("1" (FLATTEN) (("1" (SPLIT -2) (("1" (PROPAX) NIL NIL) ("2" (FLATTEN) (("2" (ASSERT) (("2" (EXPAND X) (("2" (LIFT-IF) (("2" (SPLIT -2) (("1" (FLATTEN) (("1" (ASSERT) (("1" (INST -6 "term1(T)" "term1(S)") (("1" (NAME-REPLACE "SOL1" "unify(term1(T), term1(S))") (("1" (REVEAL -2) (("1" (INST -1 "Subs(SOL1`2)(term2(T))" "Subs(SOL1`2)(term2(S))") (("1" (NAME-REPLACE "SOL2" "unify(Subs(SOL1`2)(term2(T)), Subs(SOL1`2)(term2(S)))") (("1" (LEMMA SUBS_PAIR (SIGMA "append(SOL2`2, SOL1`2)" T "term1(T)" S "term2(T)")) (("1" (LEMMA TERM_PAIR_ETA (PAIR?_VAR T)) (("1" (LEMMA TERM_PAIR_ETA (PAIR?_VAR S)) (("1" (REPLACES -2) (("1" (REPLACES -2) (("1" (LEMMA SUBS_PAIR (SIGMA "append(SOL2`2, SOL1`2)" T "term1(S)" S "term2(S)")) (("1" (REPLACES -2) (("1" (REPLACES -1) (("1" (EXPAND ALPHA 3) (("1" (SPLIT -1) (("1" (SPLIT -7) (("1" (SPLIT 3) (("1" (REWRITE SUBS_APPEND) (("1" (REWRITE SUBS_APPEND) (("1" (LEMMA FRESH_SUBS?_ALPHA (DELTA "SOL1`1" T "Subs(SOL1`2)(term1(T))" S "Subs(SOL1`2)(term1(S))" SIGMA "SOL2`2")) (("1" (ASSERT) (("1" (ASSERT) (("1" (LEMMA ALPHA_WEAKENING (DELTA "fresh_subs?(SOL2`2, SOL1`1)`1" NABLA "append(SOL2`1, fresh_subs?(SOL2`2, SOL1`1)`1)" T "Subs(SOL2`2)(Subs(SOL1`2)(term1(T)))" S "Subs(SOL2`2)(Subs(SOL1`2)(term1(S)))")) (("1" (ASSERT) (("1" (SKEEP) (("1" (REWRITE APPEND_MEMBER) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (REWRITE SUBS_APPEND) (("2" (REWRITE SUBS_APPEND) (("2" (LEMMA ALPHA_WEAKENING (DELTA "SOL2`1" NABLA "append(SOL2`1, fresh_subs?(SOL2`2, SOL1`1)`1)" T "Subs(SOL2`2)(Subs(SOL1`2)(term2(T)))" S "Subs(SOL2`2)(Subs(SOL1`2)(term2(S)))")) (("2" (ASSERT) (("2" (SKEEP) (("2" (REWRITE APPEND_MEMBER) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (PROPAX) NIL NIL) ("3" (REWRITE LEX2_LT) (("3" (HIDE 4) (("3" (LEMMA CARD_SUBSET (A "Vars(term1(T), term1(S))" B "Vars(T, S)")) (("3" (EXPAND <=) (("3" (FLATTEN) (("3" (ASSERT) (("3" (SPLIT) (("1" (ASSERT) (("1" (EXPAND DEPTH 2 2) (("1" (EXPAND MAX) (("1" (LIFT-IF) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND VARS 1) (("2" (EXPAND* SUBSET? UNION MEMBER) (("2" (SKEEP) (("2" (EXPAND VARS (1 2)) (("2" (EXPAND* UNION MEMBER) (("2" (FLATTEN) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (PROPAX) NIL NIL) ("3" (REWRITE LEX2_LT) (("3" (LEMMA CARD_SUBSET (A "Vars(Subs(SOL1`2)(term2(T)), Subs(SOL1`2)(term2(S)))" B "Vars(T, S)")) (("3" (EXPAND <=) (("3" (FLATTEN) (("3" (SPLIT 2) (("1" (ASSERT) (("1" (LEMMA SUBS_UNIF_VARS_SUBSET (U "term1(T)" S "term1(S)" W "term2(T)" T "term2(S)" GAMMA "SOL1`2")) (("1" (EXPAND VARS -1 (2 3)) (("1" (EXPAND VARS 2 2) (("1" (EXPAND VARS 2 (2 3)) (("1" (HIDE-ALL-BUT (-1 2)) (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (CASE "SOL1`2 = Id") (("1" (REPLACES -1) (("1" (HIDE-ALL-BUT (-6 1)) (("1" (EXPAND* ID SUBS SUBS) (("1" (EXPAND DEPTH 1 2) (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (LEMMA SUBS_UNIF_VARS_DECREASE (U "term1(T)" S "term1(S)" W "term2(T)" T "term2(S)" GAMMA "SOL1`2")) (("2" (CASE "union(Vars(term1(T), term1(S)), Vars(term2(T), term2(S))) = Vars(T, S)") (("1" (ASSERT) NIL NIL) ("2" (HIDE-ALL-BUT (-6 -7 1)) (("2" (EXPAND VARS) (("2" (EXPAND VARS 1 (5 6)) (("2" (EXPAND* UNION MEMBER) (("2" (DECOMPOSE-EQUALITY) (("2" (IFF) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (ASSERT) (("2" (SPLIT -1) (("1" (FLATTEN) (("1" (ASSERT) (("1" (SPLIT -2) (("1" (PROPAX) NIL NIL) ("2" (FLATTEN) (("2" (ASSERT) (("2" (LEMMA TERM_ABS_ETA (ABS?_VAR T)) (("2" (LEMMA TERM_ABS_ETA (ABS?_VAR S)) (("2" (HIDE 4 7) (("2" (PROP) (("1" (INST -8 "body(T)" "body(S)") (("1" (NAME-REPLACE "SOL" "unify(body(T), body(S))") (("1" (REPLACE -4 1 RL) (("1" (REPLACE -5 1 RL) (("1" (REWRITE SUBS_ABS) (("1" (REWRITE SUBS_ABS) (("1" (EXPAND ALPHA 1) (("1" (ASSERT) (("1" (REWRITE LEX2_LT) (("1" (EXPAND DEPTH 6 2) (("1" (FLATTEN) (("1" (EXPAND VARS 7) (("1" (EXPAND VARS 7 (3 4)) (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (INST -6 "body(T)" "ext((: (abstr(T), abstr(S)) :))(body(S))") (("2" (EXPAND X -1) (("2" (PROP) (("1" (EXPAND X) (("1" (ASSERT) (("1" (EXPAND ID) (("1" (EXPAND APPEND 2 (2 3)) (("1" (NAME-REPLACE "SOL" "unify(body(T), ext((: (abstr(T), abstr(S)) :))(body(S)))") (("1" (NAME-REPLACE "FRESH" "fresh?(abstr(T), Subs(SOL`2)(body(S)))") (("1" (REPLACE -4 2 RL) (("1" (REPLACE -5 2 RL) (("1" (REWRITE SUBS_ABS) (("1" (REWRITE SUBS_ABS) (("1" (EXPAND ALPHA 2) (("1" (SPLIT 2) (("1" (LEMMA FRESH_WEAKENING (NABLA "append(FRESH`1, SOL`1)" DELTA "FRESH`1" A "abstr(T)" T "Subs(SOL`2)(body(S))")) (("1" (ASSERT) (("1" (SPLIT) (("1" (SKEEP) (("1" (REWRITE APPEND_MEMBER) (("1" (ASSERT) NIL NIL)) NIL)) NIL) ("2" (EXPAND FRESH (-2 1)) (("2" (REWRITE FRESH?_IS_FRESH) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (LEMMA ALPHA_WEAKENING (NABLA "append(FRESH`1, SOL`1)" DELTA "SOL`1" T "Subs(SOL`2)(body(T))" S "ext((: (abstr(T), abstr(S)) :))(Subs(SOL`2)(body(S)))")) (("2" (REWRITE SUBS_PERM_COMM) (("2" (ASSERT) (("2" (SKEEP) (("2" (REWRITE APPEND_MEMBER) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT (-5 -6 1)) (("2" (REWRITE LEX2_LT) (("2" (EXPAND DEPTH 1 2) (("2" (LEMMA CARD_SUBSET (A "Vars(body(T), ext((: (abstr(T), abstr(S)) :))(body(S)))" B "Vars(T, S)")) (("2" (EXPAND <=) (("2" (FLATTEN) (("2" (ASSERT) (("2" (HIDE 2 3) (("2" (EXPAND VARS) (("2" (EXPAND VARS 1 (3 4)) (("2" (EXPAND* SUBSET? UNION MEMBER) (("2" (SKEEP) (("2" (ASSERT) (("2" (REWRITE EXT_PRESERVES_VARS) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (ASSERT) (("2" (HIDE 5 8) (("2" (PROP) (("2" (LEMMA TERM_APP_ETA (APP?_VAR T)) (("2" (LEMMA TERM_APP_ETA (APP?_VAR S)) (("2" (INST -8 "arg(T)" "arg(S)") (("2" (NAME-REPLACE "SOL" "unify(arg(T), arg(S))") (("2" (ASSERT) (("2" (REPLACE -1 1 RL) (("2" (REPLACE -2 1 RL) (("2" (REWRITE SUBS_APP) (("2" (REWRITE SUBS_APP) (("2" (EXPAND ALPHA 1) (("2" (ASSERT) (("2" (REWRITE LEX2_LT) (("2" (HIDE-ALL-BUT (-3 -5 7)) (("2" (LEMMA CARD_SUBSET (A "Vars(arg(T), arg(S))" B "Vars(T, S)")) (("2" (EXPAND DEPTH 1 2) (("2" (FLATTEN) (("2" (EXPAND <=) (("2" (ASSERT) (("2" (HIDE 2 3) (("2" (EXPAND VARS) (("2" (EXPAND VARS 1 (3 4)) (("2" (REWRITE SUBSET_REFLEXIVE) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL ((SUBS DEF-DECL "term" SUBSTITUTION NIL) (APPEND DEF-DECL "list[T]" LIST_PROPS NIL) (NULL ADT-CONSTRUCTOR-DECL "(null?)" LIST_ADT NIL) (NULL? ADT-RECOGNIZER-DECL "[list -> boolean]" LIST_ADT NIL) (EXT_IDENTITY FORMULA-DECL NIL NOMINAL_TERM NIL) (ACT DEF-DECL "atom" ATOMS NIL) (ACT_REVERSE2 FORMULA-DECL NIL ATOMS NIL) (ACT_APPEND FORMULA-DECL NIL ATOMS NIL) (EXT_APPEND FORMULA-DECL NIL NOMINAL_TERM NIL) (ALPHA_EXT_INVARIANCE FORMULA-DECL NIL ALPHA_EQUIVALENCE NIL) (NOT_OCCURS_SUBS_INVARIANCE FORMULA-DECL NIL SUBSTITUTION NIL) (SUSP? ADT-RECOGNIZER-DECL "[term -> boolean]" TERM_ADT NIL) (V ADT-ACCESSOR-DECL "[(susp?) -> variable]" TERM_ADT NIL) (EXT DEF-DECL "term" NOMINAL_TERM NIL) (REVERSE DEF-DECL "list[T]" LIST_PROPS NIL) (P ADT-ACCESSOR-DECL "[(susp?) -> perm]" TERM_ADT NIL) (DS CONST-DECL "set[atom]" ATOMS NIL) (VARS DEF-DECL "finite_set[variable]" NOMINAL_TERM NIL) (MEMBER DEF-DECL "bool" LIST_PROPS NIL) (DS CONST-DECL "list[atom]" ATOMS NIL) (* ADT-CONSTRUCTOR-DECL "[[perm, variable] -> (susp?)]" TERM_ADT NIL) (ALPHA? DEF-DECL "[fresh_context, bool]" ALPHA_EQUIVALENCE NIL) (ALPHA?_IS_ALPHA FORMULA-DECL NIL ALPHA_EQUIVALENCE NIL) (TERM1 ADT-ACCESSOR-DECL "[(pair?) -> term]" TERM_ADT NIL) (PAIR? ADT-RECOGNIZER-DECL "[term -> boolean]" TERM_ADT NIL) (TERM_PAIR_ETA FORMULA-DECL NIL TERM_ADT NIL) (LEX2_LT FORMULA-DECL NIL LEX2 NIL) (REAL_LT_IS_STRICT_TOTAL_ORDER NAME-JUDGEMENT "(strict_total_order?[real])" REAL_PROPS NIL) (CARD_SUBSET FORMULA-DECL NIL FINITE_SETS NIL) (MAX CONST-DECL "{p: real | p >= m AND p >= n}" REAL_DEFS NIL) (UNION CONST-DECL "set" SETS NIL) (MEMBER CONST-DECL "bool" SETS NIL) (SUBSET? CONST-DECL "bool" SETS NIL) (SUBSET_IS_PARTIAL_ORDER NAME-JUDGEMENT "(partial_order?[set[T]])" SETS_LEMMAS NIL) (<= CONST-DECL "bool" REALS NIL) (ALPHA_WEAKENING FORMULA-DECL NIL ALPHA_EQUIVALENCE NIL) (FRESH_SUBS? DEF-DECL "[fresh_context, bool]" SUBSTITUTION NIL) (APPEND_MEMBER FORMULA-DECL NIL STRUCTURE_EXTRA NIL) (FRESH_SUBS?_ALPHA FORMULA-DECL NIL SUBSTITUTION NIL) (SUBS_APPEND FORMULA-DECL NIL SUBSTITUTION NIL) (REAL_PLUS_REAL_IS_REAL APPLICATION-JUDGEMENT "real" REALS NIL) (POSINT_PLUS_NNINT_IS_POSINT APPLICATION-JUDGEMENT "posint" INTEGERS NIL) (NAT_MAX APPLICATION-JUDGEMENT "{k: nat | i <= k AND j <= k}" REAL_DEFS NIL) (NONNEG_RAT_MAX APPLICATION-JUDGEMENT "{s: nonneg_rat | s >= q AND s >= r}" REAL_DEFS NIL) (OR CONST-DECL "[bool, bool -> bool]" BOOLEANS NIL) (SUBS_UNIF_VARS_DECREASE FORMULA-DECL NIL SUBSTITUTION NIL) (FINITE_UNION APPLICATION-JUDGEMENT "finite_set" FINITE_SETS NIL) (REAL_GE_IS_TOTAL_ORDER NAME-JUDGEMENT "(total_order?[real])" REAL_PROPS NIL) (SUBS_UNIF_VARS_SUBSET FORMULA-DECL NIL SUBSTITUTION NIL) (SUBS_PAIR FORMULA-DECL NIL SUBSTITUTION NIL) (TERM2 ADT-ACCESSOR-DECL "[(pair?) -> term]" TERM_ADT NIL) (X CONST-DECL "[fresh_context, Sub, bool]" NOMINALUNIF NIL) (TERM_APP_ETA FORMULA-DECL NIL TERM_ADT NIL) (APP? ADT-RECOGNIZER-DECL "[term -> boolean]" TERM_ADT NIL) (ARG ADT-ACCESSOR-DECL "[(app?) -> term]" TERM_ADT NIL) (SUBSET_REFLEXIVE FORMULA-DECL NIL SETS_LEMMAS NIL) (SUBS_APP FORMULA-DECL NIL SUBSTITUTION NIL) (SYM ADT-ACCESSOR-DECL "[(app?) -> symbol]" TERM_ADT NIL) (SUBS_ABS FORMULA-DECL NIL SUBSTITUTION NIL) (ABSTR ADT-ACCESSOR-DECL "[(abs?) -> atom]" TERM_ADT NIL) (BODY ADT-ACCESSOR-DECL "[(abs?) -> term]" TERM_ADT NIL) (EXT_PRESERVES_VARS FORMULA-DECL NIL NOMINAL_TERM NIL) (SUBS_PERM_COMM FORMULA-DECL NIL SUBSTITUTION NIL) (FRESH_WEAKENING FORMULA-DECL NIL FRESHNESS NIL) (FRESH?_IS_FRESH FORMULA-DECL NIL FRESHNESS NIL) (FRESH? DEF-DECL "[fresh_context, bool]" FRESHNESS NIL) (CONS? ADT-RECOGNIZER-DECL "[list -> boolean]" LIST_ADT NIL) (CONS ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" LIST_ADT NIL) (ABS? ADT-RECOGNIZER-DECL "[term -> boolean]" TERM_ADT NIL) (TERM_ABS_ETA FORMULA-DECL NIL TERM_ADT NIL) (ALPHA_REFLEXIVITY FORMULA-DECL NIL ALPHA_EQUIVALENCE NIL) (ID CONST-DECL "Sub" SUBSTITUTION NIL) (FRESH_CONTEXT TYPE-EQ-DECL NIL FRESHNESS NIL) (VARS_IN CONST-DECL "bool" SUBSTITUTION NIL) (NOT CONST-DECL "[bool -> bool]" BOOLEANS NIL) (OCCURS DEF-DECL "bool" NOMINAL_TERM NIL) (SUBS_UNIF TYPE-EQ-DECL NIL SUBSTITUTION NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" BOOLEANS NIL) (ALPHA DEF-DECL "bool" ALPHA_EQUIVALENCE NIL) (SUB TYPE-EQ-DECL NIL SUBSTITUTION NIL) (SUBS DEF-DECL "term" SUBSTITUTION NIL) (UNIFY DEF-DECL "[fresh_context, Subs_unif(t, s), bool]" NOMINALUNIF NIL) (WELL_FOUNDED_LE FORMULA-DECL NIL ORDINALS NIL) (< DEF-DECL "bool" ORDINALS NIL) (DEPTH DEF-DECL "nat" NOMINAL_TERM NIL) (VARS CONST-DECL "finite_set[variable]" SUBSTITUTION NIL) (CARD CONST-DECL "{n: nat | n = Card(S)}" FINITE_SETS NIL) (CARD CONST-DECL "nat" FINITE_SETS NIL) (= CONST-DECL "[T, T -> boolean]" EQUALITIES NIL) (FINITE_SET TYPE-EQ-DECL NIL FINITE_SETS NIL) (IS_FINITE CONST-DECL "bool" FINITE_SETS NIL) (SET TYPE-EQ-DECL NIL SETS NIL) (LEX2 CONST-DECL "ordinal" LEX2 NIL) (ORDINAL NONEMPTY-TYPE-EQ-DECL NIL ORDINALS NIL) (ORDINAL? DEF-DECL "bool" ORDINALS NIL) (ORDSTRUCT TYPE-DECL NIL ORDSTRUCT_ADT NIL) (VARIABLE TYPE-EQ-DECL NIL NOMINAL_TERM NIL) (TRUE CONST-DECL "bool" BOOLEANS NIL) (AND CONST-DECL "[bool, bool -> bool]" BOOLEANS NIL) (PRED TYPE-EQ-DECL NIL DEFINED_TYPES NIL) (TERM TYPE-DECL NIL TERM_ADT NIL) (SYMBOL TYPE-EQ-DECL NIL NOMINAL_TERM NIL) (CHAR TYPE-EQ-DECL NIL STRINGS NIL) (CHAR? ADT-RECOGNIZER-DECL "[character -> boolean]" CHARACTER_ADT NIL) (CHARACTER TYPE-DECL NIL CHARACTER_ADT NIL) (BELOW TYPE-EQ-DECL NIL NAT_TYPES NIL) (NAT NONEMPTY-TYPE-EQ-DECL NIL NATURALNUMBERS NIL) (PERM TYPE-EQ-DECL NIL ATOMS NIL) (LIST TYPE-DECL NIL LIST_ADT NIL) (ATOM TYPE-EQ-DECL NIL ATOMS NIL) (>= CONST-DECL "bool" REALS NIL) (BOOL NONEMPTY-TYPE-EQ-DECL NIL BOOLEANS NIL) (INT NONEMPTY-TYPE-EQ-DECL NIL INTEGERS NIL) (INTEGER_PRED CONST-DECL "[rational -> boolean]" INTEGERS NIL) (RATIONAL NONEMPTY-TYPE-FROM-DECL NIL RATIONALS NIL) (RATIONAL_PRED CONST-DECL "[real -> boolean]" RATIONALS NIL) (REAL NONEMPTY-TYPE-FROM-DECL NIL REALS NIL) (REAL_PRED CONST-DECL "[number_field -> boolean]" REALS NIL) (NUMBER_FIELD NONEMPTY-TYPE-FROM-DECL NIL NUMBER_FIELDS NIL) (NUMBER_FIELD_PRED CONST-DECL "[number -> boolean]" NUMBER_FIELDS NIL) (BOOLEAN NONEMPTY-TYPE-DECL NIL BOOLEANS NIL) (NUMBER NONEMPTY-TYPE-DECL NIL NUMBERS NIL) (MEASURE_INDUCTION FORMULA-DECL NIL MEASURE_INDUCTION NIL) (WELL_FOUNDED? CONST-DECL "bool" ORDERS NIL) (PRED TYPE-EQ-DECL NIL DEFINED_TYPES NIL)) NIL NIL NIL SHOSTAK))("nominalunif" |nominalunif| |unify_TCC19| 0 (|unify_TCC19-1| NIL 3627301166 NIL ("" (SKOSIMP*) (("" (HIDE 1) (("" (DECOMPOSE-EQUALITY -3) (("" (TYPEPRED "v!1(ag!1, arg(s!1))`2") (("" (EXPAND VARS_IN) (("" (EXPAND VARS -1 2) (("" (EXPAND VARS 1 2) (("" (EXPAND VARS 1 (2 3)) (("" (ASSERT) (("" (EXPAND OCCURS 1 (1 2)) (("" (REPLACE -4) (("" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL ((SUBS_UNIF TYPE-EQ-DECL NIL SUBSTITUTION NIL) (FRESH_CONTEXT TYPE-EQ-DECL NIL FRESHNESS NIL) (DEPTH DEF-DECL "nat" NOMINAL_TERM NIL) (VARS CONST-DECL "finite_set[variable]" SUBSTITUTION NIL) (CARD CONST-DECL "{n: nat | n = Card(S)}" FINITE_SETS NIL) (CARD CONST-DECL "nat" FINITE_SETS NIL) (FINITE_SET TYPE-EQ-DECL NIL FINITE_SETS NIL) (IS_FINITE CONST-DECL "bool" FINITE_SETS NIL) (SET TYPE-EQ-DECL NIL SETS NIL) (LEX2 CONST-DECL "ordinal" LEX2 NIL) (ORDINAL NONEMPTY-TYPE-EQ-DECL NIL ORDINALS NIL) (ORDINAL? DEF-DECL "bool" ORDINALS NIL) (< DEF-DECL "bool" ORDINALS NIL) (ORDSTRUCT TYPE-DECL NIL ORDSTRUCT_ADT NIL) (OCCURS DEF-DECL "bool" NOMINAL_TERM NIL) (VARS_IN CONST-DECL "bool" SUBSTITUTION NIL) (EVERY ADT-DEF-DECL "boolean" LIST_ADT NIL) (NOT CONST-DECL "[bool -> bool]" BOOLEANS NIL) (VARS DEF-DECL "finite_set[variable]" NOMINAL_TERM NIL) (ARG ADT-ACCESSOR-DECL "[(app?) -> term]" TERM_ADT NIL) (APP ADT-CONSTRUCTOR-DECL "[[symbol, term] -> (app?)]" TERM_ADT NIL) (SYM ADT-ACCESSOR-DECL "[(app?) -> symbol]" TERM_ADT NIL) (= CONST-DECL "[T, T -> boolean]" EQUALITIES NIL) (APP? ADT-RECOGNIZER-DECL "[term -> boolean]" TERM_ADT NIL) (VARIABLE TYPE-EQ-DECL NIL NOMINAL_TERM NIL) (TRUE CONST-DECL "bool" BOOLEANS NIL) (EVERY ADT-DEF-DECL "boolean" TERM_ADT NIL) (PRED TYPE-EQ-DECL NIL DEFINED_TYPES NIL) (TERM TYPE-DECL NIL TERM_ADT NIL) (SYMBOL TYPE-EQ-DECL NIL NOMINAL_TERM NIL) (CHAR TYPE-EQ-DECL NIL STRINGS NIL) (CHAR? ADT-RECOGNIZER-DECL "[character -> boolean]" CHARACTER_ADT NIL) (CHARACTER TYPE-DECL NIL CHARACTER_ADT NIL) (BELOW TYPE-EQ-DECL NIL NAT_TYPES NIL) (NAT NONEMPTY-TYPE-EQ-DECL NIL NATURALNUMBERS NIL) (PERM TYPE-EQ-DECL NIL ATOMS NIL) (LIST TYPE-DECL NIL LIST_ADT NIL) (ATOM TYPE-EQ-DECL NIL ATOMS NIL) (>= CONST-DECL "bool" REALS NIL) (INT NONEMPTY-TYPE-EQ-DECL NIL INTEGERS NIL) (INTEGER_PRED CONST-DECL "[rational -> boolean]" INTEGERS NIL) (RATIONAL NONEMPTY-TYPE-FROM-DECL NIL RATIONALS NIL) (RATIONAL_PRED CONST-DECL "[real -> boolean]" RATIONALS NIL) (REAL NONEMPTY-TYPE-FROM-DECL NIL REALS NIL) (REAL_PRED CONST-DECL "[number_field -> boolean]" REALS NIL) (NUMBER_FIELD NONEMPTY-TYPE-FROM-DECL NIL NUMBER_FIELDS NIL) (NUMBER_FIELD_PRED CONST-DECL "[number -> boolean]" NUMBER_FIELDS NIL) (NUMBER NONEMPTY-TYPE-DECL NIL NUMBERS NIL) (AND CONST-DECL "[bool, bool -> bool]" BOOLEANS NIL) (BOOL NONEMPTY-TYPE-EQ-DECL NIL BOOLEANS NIL) (BOOLEAN NONEMPTY-TYPE-DECL NIL BOOLEANS NIL)) NIL NIL NIL NIL))("nominalunif" |nominalunif| |unify_TCC18| 0 (|unify_TCC18-1| NIL 3627301166 NIL ("" (TERMINATION-TCC) NIL NIL) NIL ((BOOLEAN NONEMPTY-TYPE-DECL NIL BOOLEANS NIL) (BOOL NONEMPTY-TYPE-EQ-DECL NIL BOOLEANS NIL) (NOT CONST-DECL "[bool -> bool]" BOOLEANS NIL) (NUMBER NONEMPTY-TYPE-DECL NIL NUMBERS NIL) (PRED TYPE-EQ-DECL NIL DEFINED_TYPES NIL) (NUMBER_FIELD_PRED CONST-DECL "[number -> boolean]" NUMBER_FIELDS NIL) (NUMBER_FIELD NONEMPTY-TYPE-FROM-DECL NIL NUMBER_FIELDS NIL) (REAL_PRED CONST-DECL "[number_field -> boolean]" REALS NIL) (REAL NONEMPTY-TYPE-FROM-DECL NIL REALS NIL) (RATIONAL_PRED CONST-DECL "[real -> boolean]" RATIONALS NIL) (RATIONAL NONEMPTY-TYPE-FROM-DECL NIL RATIONALS NIL) (INTEGER_PRED CONST-DECL "[rational -> boolean]" INTEGERS NIL) (INT NONEMPTY-TYPE-EQ-DECL NIL INTEGERS NIL) (>= CONST-DECL "bool" REALS NIL) (ATOM TYPE-EQ-DECL NIL ATOMS NIL) (LIST TYPE-DECL NIL LIST_ADT NIL) (PERM TYPE-EQ-DECL NIL ATOMS NIL) (NAT NONEMPTY-TYPE-EQ-DECL NIL NATURALNUMBERS NIL) (BELOW TYPE-EQ-DECL NIL NAT_TYPES NIL) (CHARACTER TYPE-DECL NIL CHARACTER_ADT NIL) (CHAR? ADT-RECOGNIZER-DECL "[character -> boolean]" CHARACTER_ADT NIL) (CHAR TYPE-EQ-DECL NIL STRINGS NIL) (SYMBOL TYPE-EQ-DECL NIL NOMINAL_TERM NIL) (TERM TYPE-DECL NIL TERM_ADT NIL) (EVERY ADT-DEF-DECL "boolean" TERM_ADT NIL) (AND CONST-DECL "[bool, bool -> bool]" BOOLEANS NIL) (TRUE CONST-DECL "bool" BOOLEANS NIL) (VARIABLE TYPE-EQ-DECL NIL NOMINAL_TERM NIL) (REAL_LT_IS_STRICT_TOTAL_ORDER NAME-JUDGEMENT "(strict_total_order?[real])" REAL_PROPS NIL) (POSINT_PLUS_NNINT_IS_POSINT APPLICATION-JUDGEMENT "posint" INTEGERS NIL) (< DEF-DECL "bool" ORDINALS NIL) (DEPTH DEF-DECL "nat" NOMINAL_TERM NIL) (VARS DEF-DECL "finite_set[variable]" NOMINAL_TERM NIL) (OCCURS DEF-DECL "bool" NOMINAL_TERM NIL) (FINITE_UNION APPLICATION-JUDGEMENT "finite_set" FINITE_SETS NIL) (/= CONST-DECL "boolean" NOTEQUAL NIL) (VARS CONST-DECL "finite_set[variable]" SUBSTITUTION NIL) (LEX2 CONST-DECL "ordinal" LEX2 NIL)) NIL NIL NIL NIL))("nominalunif" |nominalunif| |unify_TCC17| 0 (|unify_TCC17-1| NIL 3627301166 NIL ("" (SKEEP) (("" (EXPAND* EVERY ID) NIL NIL)) NIL) NIL ((EVERY ADT-DEF-DECL "boolean" LIST_ADT NIL) (ID CONST-DECL "Sub" SUBSTITUTION NIL)) NIL NIL NIL NIL))("nominalunif" |nominalunif| |unify_TCC16| 0 (|unify_TCC16-1| NIL 3627301166 NIL ("" (SKOSIMP*) (("" (HIDE 1) (("" (DECOMPOSE-EQUALITY -2) (("" (LEMMA LEX2_LT (I "card(Vars(bd!1,ext((: (a!1, abstr(s!1)) :))(body(s!1))))" J "depth(bd!1)" M "card(Vars(t!1, s!1))" N "depth(t!1)")) (("" (ASSERT) (("" (HIDE 3) (("" (FLATTEN) (("" (EXPAND VARS 2) (("" (EXPAND VARS 2 (3 4)) (("" (REWRITE EXT_PRESERVES_VARS) (("" (EXPAND DEPTH 2 2) (("" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL ((DEPTH DEF-DECL "nat" NOMINAL_TERM NIL) (NULL ADT-CONSTRUCTOR-DECL "(null?)" LIST_ADT NIL) (NULL? ADT-RECOGNIZER-DECL "[list -> boolean]" LIST_ADT NIL) (CONS ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" LIST_ADT NIL) (CONS? ADT-RECOGNIZER-DECL "[list -> boolean]" LIST_ADT NIL) (EXT DEF-DECL "term" NOMINAL_TERM NIL) (VARS CONST-DECL "finite_set[variable]" SUBSTITUTION NIL) (CARD CONST-DECL "{n: nat | n = Card(S)}" FINITE_SETS NIL) (CARD CONST-DECL "nat" FINITE_SETS NIL) (FINITE_SET TYPE-EQ-DECL NIL FINITE_SETS NIL) (IS_FINITE CONST-DECL "bool" FINITE_SETS NIL) (SET TYPE-EQ-DECL NIL SETS NIL) (LEX2_LT FORMULA-DECL NIL LEX2 NIL) (EXT_PRESERVES_VARS FORMULA-DECL NIL NOMINAL_TERM NIL) (VARS DEF-DECL "finite_set[variable]" NOMINAL_TERM NIL) (REAL_LT_IS_STRICT_TOTAL_ORDER NAME-JUDGEMENT "(strict_total_order?[real])" REAL_PROPS NIL) (BODY ADT-ACCESSOR-DECL "[(abs?) -> term]" TERM_ADT NIL) (ABS ADT-CONSTRUCTOR-DECL "[[atom, term] -> (abs?)]" TERM_ADT NIL) (ABSTR ADT-ACCESSOR-DECL "[(abs?) -> atom]" TERM_ADT NIL) (= CONST-DECL "[T, T -> boolean]" EQUALITIES NIL) (ABS? ADT-RECOGNIZER-DECL "[term -> boolean]" TERM_ADT NIL) (VARIABLE TYPE-EQ-DECL NIL NOMINAL_TERM NIL) (TRUE CONST-DECL "bool" BOOLEANS NIL) (EVERY ADT-DEF-DECL "boolean" TERM_ADT NIL) (PRED TYPE-EQ-DECL NIL DEFINED_TYPES NIL) (TERM TYPE-DECL NIL TERM_ADT NIL) (SYMBOL TYPE-EQ-DECL NIL NOMINAL_TERM NIL) (CHAR TYPE-EQ-DECL NIL STRINGS NIL) (CHAR? ADT-RECOGNIZER-DECL "[character -> boolean]" CHARACTER_ADT NIL) (CHARACTER TYPE-DECL NIL CHARACTER_ADT NIL) (BELOW TYPE-EQ-DECL NIL NAT_TYPES NIL) (NAT NONEMPTY-TYPE-EQ-DECL NIL NATURALNUMBERS NIL) (PERM TYPE-EQ-DECL NIL ATOMS NIL) (LIST TYPE-DECL NIL LIST_ADT NIL) (ATOM TYPE-EQ-DECL NIL ATOMS NIL) (>= CONST-DECL "bool" REALS NIL) (INT NONEMPTY-TYPE-EQ-DECL NIL INTEGERS NIL) (INTEGER_PRED CONST-DECL "[rational -> boolean]" INTEGERS NIL) (RATIONAL NONEMPTY-TYPE-FROM-DECL NIL RATIONALS NIL) (RATIONAL_PRED CONST-DECL "[real -> boolean]" RATIONALS NIL) (REAL NONEMPTY-TYPE-FROM-DECL NIL REALS NIL) (REAL_PRED CONST-DECL "[number_field -> boolean]" REALS NIL) (NUMBER_FIELD NONEMPTY-TYPE-FROM-DECL NIL NUMBER_FIELDS NIL) (NUMBER_FIELD_PRED CONST-DECL "[number -> boolean]" NUMBER_FIELDS NIL) (NUMBER NONEMPTY-TYPE-DECL NIL NUMBERS NIL) (AND CONST-DECL "[bool, bool -> bool]" BOOLEANS NIL) (BOOL NONEMPTY-TYPE-EQ-DECL NIL BOOLEANS NIL) (BOOLEAN NONEMPTY-TYPE-DECL NIL BOOLEANS NIL)) NIL NIL NIL NIL))("nominalunif" |nominalunif| |unify_TCC15| 0 (|unify_TCC15-1| NIL 3627301166 NIL ("" (SKOSIMP*) (("" (EXPAND X) (("" (SPLIT 3) (("1" (EXPAND* ID APPEND) (("1" (TYPEPRED "sig!1") (("1" (FLATTEN) (("1" (EXPAND VARS_IN) (("1" (EXPAND VARS -1 2) (("1" (EXPAND VARS 1 2) (("1" (DECOMPOSE-EQUALITY -5) (("1" (EXPAND VARS 1 (2 3)) (("1" (ASSERT) (("1" (ASSERT) (("1" (REWRITE EXT_PRESERVES_VARS) (("1" (EXPAND OCCURS 1 (1 2)) (("1" (REWRITE EVERY_NTH) (("1" (REWRITE EVERY_NTH) (("1" (SKOSIMP) (("1" (INST -4 I!1) (("1" (REWRITE EXT_PRESERVES_OCCURS) (("1" (FLATTEN) (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (EXPAND* ID EVERY) NIL NIL)) NIL)) NIL)) NIL)) NIL) NIL ((X CONST-DECL "[fresh_context, Sub, bool]" NOMINALUNIF NIL) (APPEND DEF-DECL "list[T]" LIST_PROPS NIL) (ID CONST-DECL "Sub" SUBSTITUTION NIL) (VARS CONST-DECL "finite_set[variable]" SUBSTITUTION NIL) (ABS ADT-CONSTRUCTOR-DECL "[[atom, term] -> (abs?)]" TERM_ADT NIL) (= CONST-DECL "[T, T -> boolean]" EQUALITIES NIL) (EXT_PRESERVES_VARS FORMULA-DECL NIL NOMINAL_TERM NIL) (EVERY_NTH FORMULA-DECL NIL LIST_PROPS NIL) (SET TYPE-EQ-DECL NIL SETS NIL) (SUBSET? CONST-DECL "bool" SETS NIL) (IS_FINITE CONST-DECL "bool" FINITE_SETS NIL) (FINITE_SET TYPE-EQ-DECL NIL FINITE_SETS NIL) (UNION CONST-DECL "set" SETS NIL) (OR CONST-DECL "[bool, bool -> bool]" BOOLEANS NIL) (NTH DEF-DECL "T" LIST_PROPS NIL) (EXT_PRESERVES_OCCURS FORMULA-DECL NIL NOMINAL_TERM NIL) (MEMBER CONST-DECL "bool" SETS NIL) (SUBSET_IS_PARTIAL_ORDER NAME-JUDGEMENT "(partial_order?[set[T]])" SETS_LEMMAS NIL) (FINITE_UNION APPLICATION-JUDGEMENT "finite_set" FINITE_SETS NIL) (< CONST-DECL "bool" REALS NIL) (LENGTH DEF-DECL "nat" LIST_PROPS NIL) (BELOW TYPE-EQ-DECL NIL NATURALNUMBERS NIL) (VARS DEF-DECL "finite_set[variable]" NOMINAL_TERM NIL) (BOOLEAN NONEMPTY-TYPE-DECL NIL BOOLEANS NIL) (BOOL NONEMPTY-TYPE-EQ-DECL NIL BOOLEANS NIL) (NOT CONST-DECL "[bool -> bool]" BOOLEANS NIL) (NUMBER NONEMPTY-TYPE-DECL NIL NUMBERS NIL) (NUMBER_FIELD_PRED CONST-DECL "[number -> boolean]" NUMBER_FIELDS NIL) (NUMBER_FIELD NONEMPTY-TYPE-FROM-DECL NIL NUMBER_FIELDS NIL) (REAL_PRED CONST-DECL "[number_field -> boolean]" REALS NIL) (REAL NONEMPTY-TYPE-FROM-DECL NIL REALS NIL) (RATIONAL_PRED CONST-DECL "[real -> boolean]" RATIONALS NIL) (RATIONAL NONEMPTY-TYPE-FROM-DECL NIL RATIONALS NIL) (INTEGER_PRED CONST-DECL "[rational -> boolean]" INTEGERS NIL) (INT NONEMPTY-TYPE-EQ-DECL NIL INTEGERS NIL) (>= CONST-DECL "bool" REALS NIL) (VARIABLE TYPE-EQ-DECL NIL NOMINAL_TERM NIL) (ATOM TYPE-EQ-DECL NIL ATOMS NIL) (LIST TYPE-DECL NIL LIST_ADT NIL) (PERM TYPE-EQ-DECL NIL ATOMS NIL) (NAT NONEMPTY-TYPE-EQ-DECL NIL NATURALNUMBERS NIL) (BELOW TYPE-EQ-DECL NIL NAT_TYPES NIL) (CHARACTER TYPE-DECL NIL CHARACTER_ADT NIL) (CHAR? ADT-RECOGNIZER-DECL "[character -> boolean]" CHARACTER_ADT NIL) (CHAR TYPE-EQ-DECL NIL STRINGS NIL) (SYMBOL TYPE-EQ-DECL NIL NOMINAL_TERM NIL) (TERM TYPE-DECL NIL TERM_ADT NIL) (PRED TYPE-EQ-DECL NIL DEFINED_TYPES NIL) (EVERY ADT-DEF-DECL "boolean" TERM_ADT NIL) (AND CONST-DECL "[bool, bool -> bool]" BOOLEANS NIL) (TRUE CONST-DECL "bool" BOOLEANS NIL) (EVERY ADT-DEF-DECL "boolean" LIST_ADT NIL) (VARS_IN CONST-DECL "bool" SUBSTITUTION NIL) (EXT DEF-DECL "term" NOMINAL_TERM NIL) (CONS? ADT-RECOGNIZER-DECL "[list -> boolean]" LIST_ADT NIL) (CONS ADT-CONSTRUCTOR-DECL "[[T, list] -> (cons?)]" LIST_ADT NIL) (ABS? ADT-RECOGNIZER-DECL "[term -> boolean]" TERM_ADT NIL) (ABSTR ADT-ACCESSOR-DECL "[(abs?) -> atom]" TERM_ADT NIL) (NULL? ADT-RECOGNIZER-DECL "[list -> boolean]" LIST_ADT NIL) (NULL ADT-CONSTRUCTOR-DECL "(null?)" LIST_ADT NIL) (BODY ADT-ACCESSOR-DECL "[(abs?) -> term]" TERM_ADT NIL) (OCCURS DEF-DECL "bool" NOMINAL_TERM NIL) (SUBS_UNIF TYPE-EQ-DECL NIL SUBSTITUTION NIL)) NIL NIL NIL NIL))("nominalunif" |nominalunif| |unify_TCC14| 0 (|unify_TCC14-1| NIL 3627301166 NIL ("" (SKOSIMP*) (("" (TYPEPRED "v!1(bd!1, body(s!1))`2") (("" (HIDE 1) (("" (DECOMPOSE-EQUALITY -4) (("" (EXPAND VARS_IN) (("" (EXPAND VARS -4 2) (("" (EXPAND VARS 1 2) (("" (EXPAND VARS 1 (2 3)) (("" (ASSERT) (("" (EXPAND OCCURS 1 (1 2)) (("" (REPLACES -3) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL ((SUBS_UNIF TYPE-EQ-DECL NIL SUBSTITUTION NIL) (FRESH_CONTEXT TYPE-EQ-DECL NIL FRESHNESS NIL) (DEPTH DEF-DECL "nat" NOMINAL_TERM NIL) (VARS CONST-DECL "finite_set[variable]" SUBSTITUTION NIL) (CARD CONST-DECL "{n: nat | n = Card(S)}" FINITE_SETS NIL) (CARD CONST-DECL "nat" FINITE_SETS NIL) (= CONST-DECL "[T, T -> boolean]" EQUALITIES NIL) (FINITE_SET TYPE-EQ-DECL NIL FINITE_SETS NIL) (IS_FINITE CONST-DECL "bool" FINITE_SETS NIL) (SET TYPE-EQ-DECL NIL SETS NIL) (LEX2 CONST-DECL "ordinal" LEX2 NIL) (ORDINAL NONEMPTY-TYPE-EQ-DECL NIL ORDINALS NIL) (ORDINAL? DEF-DECL "bool" ORDINALS NIL) (< DEF-DECL "bool" ORDINALS NIL) (ORDSTRUCT TYPE-DECL NIL ORDSTRUCT_ADT NIL) (OCCURS DEF-DECL "bool" NOMINAL_TERM NIL) (BODY ADT-ACCESSOR-DECL "[(abs?) -> term]" TERM_ADT NIL) (ABS? ADT-RECOGNIZER-DECL "[term -> boolean]" TERM_ADT NIL) (VARS_IN CONST-DECL "bool" SUBSTITUTION NIL) (EVERY ADT-DEF-DECL "boolean" LIST_ADT NIL) (TRUE CONST-DECL "bool" BOOLEANS NIL) (AND CONST-DECL "[bool, bool -> bool]" BOOLEANS NIL) (EVERY ADT-DEF-DECL "boolean" TERM_ADT NIL) (PRED TYPE-EQ-DECL NIL DEFINED_TYPES NIL) (TERM TYPE-DECL NIL TERM_ADT NIL) (SYMBOL TYPE-EQ-DECL NIL NOMINAL_TERM NIL) (CHAR TYPE-EQ-DECL NIL STRINGS NIL) (CHAR? ADT-RECOGNIZER-DECL "[character -> boolean]" CHARACTER_ADT NIL) (CHARACTER TYPE-DECL NIL CHARACTER_ADT NIL) (BELOW TYPE-EQ-DECL NIL NAT_TYPES NIL) (NAT NONEMPTY-TYPE-EQ-DECL NIL NATURALNUMBERS NIL) (PERM TYPE-EQ-DECL NIL ATOMS NIL) (LIST TYPE-DECL NIL LIST_ADT NIL) (ATOM TYPE-EQ-DECL NIL ATOMS NIL) (VARIABLE TYPE-EQ-DECL NIL NOMINAL_TERM NIL) (>= CONST-DECL "bool" REALS NIL) (INT NONEMPTY-TYPE-EQ-DECL NIL INTEGERS NIL) (INTEGER_PRED CONST-DECL "[rational -> boolean]" INTEGERS NIL) (RATIONAL NONEMPTY-TYPE-FROM-DECL NIL RATIONALS NIL) (RATIONAL_PRED CONST-DECL "[real -> boolean]" RATIONALS NIL) (REAL NONEMPTY-TYPE-FROM-DECL NIL REALS NIL) (REAL_PRED CONST-DECL "[number_field -> boolean]" REALS NIL) (NUMBER_FIELD NONEMPTY-TYPE-FROM-DECL NIL NUMBER_FIELDS NIL) (NUMBER_FIELD_PRED CONST-DECL "[number -> boolean]" NUMBER_FIELDS NIL) (NUMBER NONEMPTY-TYPE-DECL NIL NUMBERS NIL) (NOT CONST-DECL "[bool -> bool]" BOOLEANS NIL) (BOOL NONEMPTY-TYPE-EQ-DECL NIL BOOLEANS NIL) (BOOLEAN NONEMPTY-TYPE-DECL NIL BOOLEANS NIL) (ABS ADT-CONSTRUCTOR-DECL "[[atom, term] -> (abs?)]" TERM_ADT NIL) (ABSTR ADT-ACCESSOR-DECL "[(abs?) -> atom]" TERM_ADT NIL) (VARS DEF-DECL "finite_set[variable]" NOMINAL_TERM NIL)) NIL NIL NIL NIL))("nominalunif" |nominalunif| |unify_TCC13| 0 (|unify_TCC13-1| NIL 3627301166 NIL ("" (TERMINATION-TCC) NIL NIL) NIL ((BOOLEAN NONEMPTY-TYPE-DECL NIL BOOLEANS NIL) (BOOL NONEMPTY-TYPE-EQ-DECL NIL BOOLEANS NIL) (NOT CONST-DECL "[bool -> bool]" BOOLEANS NIL) (NUMBER NONEMPTY-TYPE-DECL NIL NUMBERS NIL) (PRED TYPE-EQ-DECL NIL DEFINED_TYPES NIL) (NUMBER_FIELD_PRED CONST-DECL "[number -> boolean]" NUMBER_FIELDS NIL) (NUMBER_FIELD NONEMPTY-TYPE-FROM-DECL NIL NUMBER_FIELDS NIL) (REAL_PRED CONST-DECL "[number_field -> boolean]" REALS NIL) (REAL NONEMPTY-TYPE-FROM-DECL NIL REALS NIL) (RATIONAL_PRED CONST-DECL "[real -> boolean]" RATIONALS NIL) (RATIONAL NONEMPTY-TYPE-FROM-DECL NIL RATIONALS NIL) (INTEGER_PRED CONST-DECL "[rational -> boolean]" INTEGERS NIL) (INT NONEMPTY-TYPE-EQ-DECL NIL INTEGERS NIL) (>= CONST-DECL "bool" REALS NIL) (ATOM TYPE-EQ-DECL NIL ATOMS NIL) (LIST TYPE-DECL NIL LIST_ADT NIL) (PERM TYPE-EQ-DECL NIL ATOMS NIL) (NAT NONEMPTY-TYPE-EQ-DECL NIL NATURALNUMBERS NIL) (BELOW TYPE-EQ-DECL NIL NAT_TYPES NIL) (CHARACTER TYPE-DECL NIL CHARACTER_ADT NIL) (CHAR? ADT-RECOGNIZER-DECL "[character -> boolean]" CHARACTER_ADT NIL) (CHAR TYPE-EQ-DECL NIL STRINGS NIL) (SYMBOL TYPE-EQ-DECL NIL NOMINAL_TERM NIL) (TERM TYPE-DECL NIL TERM_ADT NIL) (EVERY ADT-DEF-DECL "boolean" TERM_ADT NIL) (AND CONST-DECL "[bool, bool -> bool]" BOOLEANS NIL) (TRUE CONST-DECL "bool" BOOLEANS NIL) (VARIABLE TYPE-EQ-DECL NIL NOMINAL_TERM NIL) (REAL_LT_IS_STRICT_TOTAL_ORDER NAME-JUDGEMENT "(strict_total_order?[real])" REAL_PROPS NIL) (POSINT_PLUS_NNINT_IS_POSINT APPLICATION-JUDGEMENT "posint" INTEGERS NIL) (< DEF-DECL "bool" ORDINALS NIL) (DEPTH DEF-DECL "nat" NOMINAL_TERM NIL) (VARS DEF-DECL "finite_set[variable]" NOMINAL_TERM NIL) (OCCURS DEF-DECL "bool" NOMINAL_TERM NIL) (REAL_GE_IS_TOTAL_ORDER NAME-JUDGEMENT "(total_order?[real])" REAL_PROPS NIL) (FINITE_UNION APPLICATION-JUDGEMENT "finite_set" FINITE_SETS NIL) (VARS CONST-DECL "finite_set[variable]" SUBSTITUTION NIL) (LEX2 CONST-DECL "ordinal" LEX2 NIL)) NIL NIL NIL NIL))("nominalunif" |nominalunif| |unify_TCC12| 0 (|unify_TCC12-1| NIL 3627301166 NIL ("" (SKEEP) (("" (EXPAND* EVERY ID) NIL NIL)) NIL) NIL ((EVERY ADT-DEF-DECL "boolean" LIST_ADT NIL) (ID CONST-DECL "Sub" SUBSTITUTION NIL)) NIL NIL NIL NIL))("nominalunif" |nominalunif| |unify_TCC11| 0 (|unify_TCC11-1| NIL 3627301166 NIL ("" (SKOSIMP*) (("" (LEMMA LEX2_LT (I "card(Vars(t1!1,term1(s!1)))" J "depth(t1!1)" M "card(Vars(t!1, s!1))" N "depth(t!1)")) (("" (ASSERT) (("" (HIDE 2 3) (("" (DECOMPOSE-EQUALITY -2) (("" (LEMMA CARD_SUBSET (A "Vars(t1!1, term1(s!1))" B "Vars(t!1, s!1)")) (("" (EXPAND <=) (("" (SPLIT -1) (("1" (PROPAX) NIL NIL) ("2" (EXPAND DEPTH 2 2) (("2" (EXPAND MAX) (("2" (GRIND) NIL NIL)) NIL)) NIL) ("3" (HIDE-ALL-BUT (-1 1)) (("3" (EXPAND VARS 1) (("3" (EXPAND VARS 1 (3 4)) (("3" (EXPAND* UNION SUBSET? MEMBER) (("3" (SKOSIMP) (("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL ((DEPTH DEF-DECL "nat" NOMINAL_TERM NIL) (TERM1 ADT-ACCESSOR-DECL "[(pair?) -> term]" TERM_ADT NIL) (PAIR? ADT-RECOGNIZER-DECL "[term -> boolean]" TERM_ADT NIL) (VARS CONST-DECL "finite_set[variable]" SUBSTITUTION NIL) (TRUE CONST-DECL "bool" BOOLEANS NIL) (AND CONST-DECL "[bool, bool -> bool]" BOOLEANS NIL) (EVERY ADT-DEF-DECL "boolean" TERM_ADT NIL) (PRED TYPE-EQ-DECL NIL DEFINED_TYPES NIL) (TERM TYPE-DECL NIL TERM_ADT NIL) (SYMBOL TYPE-EQ-DECL NIL NOMINAL_TERM NIL) (CHAR TYPE-EQ-DECL NIL STRINGS NIL) (CHAR? ADT-RECOGNIZER-DECL "[character -> boolean]" CHARACTER_ADT NIL) (CHARACTER TYPE-DECL NIL CHARACTER_ADT NIL) (BELOW TYPE-EQ-DECL NIL NAT_TYPES NIL) (PERM TYPE-EQ-DECL NIL ATOMS NIL) (LIST TYPE-DECL NIL LIST_ADT NIL) (ATOM TYPE-EQ-DECL NIL ATOMS NIL) (CARD CONST-DECL "{n: nat | n = Card(S)}" FINITE_SETS NIL) (CARD CONST-DECL "nat" FINITE_SETS NIL) (= CONST-DECL "[T, T -> boolean]" EQUALITIES NIL) (FINITE_SET TYPE-EQ-DECL NIL FINITE_SETS NIL) (IS_FINITE CONST-DECL "bool" FINITE_SETS NIL) (SET TYPE-EQ-DECL NIL SETS NIL) (VARIABLE TYPE-EQ-DECL NIL NOMINAL_TERM NIL) (NAT NONEMPTY-TYPE-EQ-DECL NIL NATURALNUMBERS NIL) (>= CONST-DECL "bool" REALS NIL) (BOOL NONEMPTY-TYPE-EQ-DECL NIL BOOLEANS NIL) (INT NONEMPTY-TYPE-EQ-DECL NIL INTEGERS NIL) (INTEGER_PRED CONST-DECL "[rational -> boolean]" INTEGERS NIL) (RATIONAL NONEMPTY-TYPE-FROM-DECL NIL RATIONALS NIL) (RATIONAL_PRED CONST-DECL "[real -> boolean]" RATIONALS NIL) (REAL NONEMPTY-TYPE-FROM-DECL NIL REALS NIL) (REAL_PRED CONST-DECL "[number_field -> boolean]" REALS NIL) (NUMBER_FIELD NONEMPTY-TYPE-FROM-DECL NIL NUMBER_FIELDS NIL) (NUMBER_FIELD_PRED CONST-DECL "[number -> boolean]" NUMBER_FIELDS NIL) (BOOLEAN NONEMPTY-TYPE-DECL NIL BOOLEANS NIL) (NUMBER NONEMPTY-TYPE-DECL NIL NUMBERS NIL) (LEX2_LT FORMULA-DECL NIL LEX2 NIL) (CARD_SUBSET FORMULA-DECL NIL FINITE_SETS NIL) (MAX CONST-DECL "{p: real | p >= m AND p >= n}" REAL_DEFS NIL) (REAL_PLUS_REAL_IS_REAL APPLICATION-JUDGEMENT "real" REALS NIL) (FINITE_UNION APPLICATION-JUDGEMENT "finite_set" FINITE_SETS NIL) (VARS DEF-DECL "finite_set[variable]" NOMINAL_TERM NIL) (NONNEG_RAT_MAX APPLICATION-JUDGEMENT "{s: nonneg_rat | s >= q AND s >= r}" REAL_DEFS NIL) (NAT_MAX APPLICATION-JUDGEMENT "{k: nat | i <= k AND j <= k}" REAL_DEFS NIL) (SUBSET? CONST-DECL "bool" SETS NIL) (MEMBER CONST-DECL "bool" SETS NIL) (UNION CONST-DECL "set" SETS NIL) (<= CONST-DECL "bool" REALS NIL) (PAIR ADT-CONSTRUCTOR-DECL "[[term, term] -> (pair?)]" TERM_ADT NIL) (TERM2 ADT-ACCESSOR-DECL "[(pair?) -> term]" TERM_ADT NIL) (REAL_LT_IS_STRICT_TOTAL_ORDER NAME-JUDGEMENT "(strict_total_order?[real])" REAL_PROPS NIL)) NIL NIL NIL NIL))("nominalunif" |nominalunif| |unify_TCC10| 0 (|unify_TCC10-1| NIL 3627301166 NIL ("" (SKEEP*) (("" (EXPAND X) (("" (SPLIT 2) (("1" (FLATTEN) (("1" (LEMMA SUBS_UNIF_APPEND (U "t1" S "term1(s)" W "t2" T "term2(s)" SIGMA "sig1" GAMMA "sig2")) (("1" (HIDE 2) (("1" (REPLACE -6) (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (FLATTEN) (("2" (EXPAND* ID EVERY) NIL NIL)) NIL)) NIL)) NIL)) NIL) NIL ((X CONST-DECL "[fresh_context, Sub, bool]" NOMINALUNIF NIL) (ID CONST-DECL "Sub" SUBSTITUTION NIL) (SUBSET? CONST-DECL "bool" SETS NIL) (UNION CONST-DECL "set" SETS NIL) (MEMBER CONST-DECL "bool" SETS NIL) (VARS CONST-DECL "finite_set[variable]" SUBSTITUTION NIL) (VARS DEF-DECL "finite_set[variable]" NOMINAL_TERM NIL) (SUBS_UNIF_APPEND FORMULA-DECL NIL SUBSTITUTION NIL) (NUMBER NONEMPTY-TYPE-DECL NIL NUMBERS NIL) (BOOLEAN NONEMPTY-TYPE-DECL NIL BOOLEANS NIL) (NUMBER_FIELD_PRED CONST-DECL "[number -> boolean]" NUMBER_FIELDS NIL) (NUMBER_FIELD NONEMPTY-TYPE-FROM-DECL NIL NUMBER_FIELDS NIL) (REAL_PRED CONST-DECL "[number_field -> boolean]" REALS NIL) (REAL NONEMPTY-TYPE-FROM-DECL NIL REALS NIL) (RATIONAL_PRED CONST-DECL "[real -> boolean]" RATIONALS NIL) (RATIONAL NONEMPTY-TYPE-FROM-DECL NIL RATIONALS NIL) (INTEGER_PRED CONST-DECL "[rational -> boolean]" INTEGERS NIL) (INT NONEMPTY-TYPE-EQ-DECL NIL INTEGERS NIL) (BOOL NONEMPTY-TYPE-EQ-DECL NIL BOOLEANS NIL) (>= CONST-DECL "bool" REALS NIL) (ATOM TYPE-EQ-DECL NIL ATOMS NIL) (LIST TYPE-DECL NIL LIST_ADT NIL) (PERM TYPE-EQ-DECL NIL ATOMS NIL) (NAT NONEMPTY-TYPE-EQ-DECL NIL NATURALNUMBERS NIL) (BELOW TYPE-EQ-DECL NIL NAT_TYPES NIL) (CHARACTER TYPE-DECL NIL CHARACTER_ADT NIL) (CHAR? ADT-RECOGNIZER-DECL "[character -> boolean]" CHARACTER_ADT NIL) (CHAR TYPE-EQ-DECL NIL STRINGS NIL) (SYMBOL TYPE-EQ-DECL NIL NOMINAL_TERM NIL) (TERM TYPE-DECL NIL TERM_ADT NIL) (PRED TYPE-EQ-DECL NIL DEFINED_TYPES NIL) (EVERY ADT-DEF-DECL "boolean" TERM_ADT NIL) (AND CONST-DECL "[bool, bool -> bool]" BOOLEANS NIL) (TRUE CONST-DECL "bool" BOOLEANS NIL) (VARIABLE TYPE-EQ-DECL NIL NOMINAL_TERM NIL) (PAIR? ADT-RECOGNIZER-DECL "[term -> boolean]" TERM_ADT NIL) (TERM1 ADT-ACCESSOR-DECL "[(pair?) -> term]" TERM_ADT NIL) (TERM2 ADT-ACCESSOR-DECL "[(pair?) -> term]" TERM_ADT NIL) (EVERY ADT-DEF-DECL "boolean" LIST_ADT NIL) (VARS_IN CONST-DECL "bool" SUBSTITUTION NIL) (NOT CONST-DECL "[bool -> bool]" BOOLEANS NIL) (OCCURS DEF-DECL "bool" NOMINAL_TERM NIL) (SUBS_UNIF TYPE-EQ-DECL NIL SUBSTITUTION NIL) (SUB TYPE-EQ-DECL NIL SUBSTITUTION NIL) (SUBS DEF-DECL "term" SUBSTITUTION NIL)) NIL NIL NIL NIL))("nominalunif" |nominalunif| |unify_TCC9| 0 (|unify_TCC9-1| NIL 3627301166 NIL ("" (SKEEP*) (("" (LEMMA LEX2_LT (I "card(Vars(Subs(sig1)(t2),Subs(sig1)(term2(s))))" J "depth(Subs(sig1)(t2))" M "card(Vars(t, s))" N "depth(t)")) (("" (ASSERT) (("" (HIDE 2 3) (("" (FLATTEN) (("" (EXPAND VARS) (("" (EXPAND VARS 1 (3 4)) (("" (EXPAND VARS 2 (3 4)) (("" (DECOMPOSE-EQUALITY -2) (("" (LEMMA CARD_SUBSET (A "union(Vars(Subs(sig1)(t2)), Vars(Subs(sig1)(term2(s))))" B "union(union(Vars(term1(t)), Vars(term2(t))), union(Vars(term1(s)), Vars(term2(s))))")) (("" (SPLIT -1) (("1" (EXPAND <=) (("1" (SPLIT -1) (("1" (PROPAX) NIL NIL) ("2" (ASSERT) (("2" (CASE "sig1 = Id") (("1" (EXPAND* ID SUBS) (("1" (ASSERT) (("1" (EXPAND DEPTH 2 2) (("1" (EXPAND MAX) (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (LEMMA SUBS_UNIF_VARS_DECREASE (U "t1" S "term1(s)" W "t2" T "term2(s)" GAMMA "sig1")) (("2" (EXPAND VARS -1) (("2" (CASE "union(union(Vars(t1), Vars(term1(s))), union(Vars(t2), Vars(term2(s)))) =
                   union(union(Vars(term1(t)), Vars(term2(t))), union(Vars(term1(s)), Vars(term2(s))))") (("1" (REPLACES -1) (("1" (ASSERT) NIL NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (EXPAND* UNION MEMBER) (("2" (DECOMPOSE-EQUALITY) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (LEMMA SUBS_UNIF_VARS_SUBSET (U "t1" S "term1(s)" W "t2" T "term2(s)" GAMMA "sig1")) (("2" (HIDE-ALL-BUT (-1 -2 -3 1)) (("2" (EXPAND VARS -1) (("2" (EXPAND* SUBSET? UNION MEMBER) (("2" (SKEEP) (("2" (INST -1 X!1) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL ((DEPTH DEF-DECL "nat" NOMINAL_TERM NIL) (TERM2 ADT-ACCESSOR-DECL "[(pair?) -> term]" TERM_ADT NIL) (SUBS_UNIF TYPE-EQ-DECL NIL SUBSTITUTION NIL) (OCCURS DEF-DECL "bool" NOMINAL_TERM NIL) (NOT CONST-DECL "[bool -> bool]" BOOLEANS NIL) (TERM1 ADT-ACCESSOR-DECL "[(pair?) -> term]" TERM_ADT NIL) (PAIR? ADT-RECOGNIZER-DECL "[term -> boolean]" TERM_ADT NIL) (VARS_IN CONST-DECL "bool" SUBSTITUTION NIL) (EVERY ADT-DEF-DECL "boolean" LIST_ADT NIL) (SUBS DEF-DECL "term" SUBSTITUTION NIL) (SUB TYPE-EQ-DECL NIL SUBSTITUTION NIL) (VARS CONST-DECL "finite_set[variable]" SUBSTITUTION NIL) (TRUE CONST-DECL "bool" BOOLEANS NIL) (AND CONST-DECL "[bool, bool -> bool]" BOOLEANS NIL) (EVERY ADT-DEF-DECL "boolean" TERM_ADT NIL) (PRED TYPE-EQ-DECL NIL DEFINED_TYPES NIL) (TERM TYPE-DECL NIL TERM_ADT NIL) (SYMBOL TYPE-EQ-DECL NIL NOMINAL_TERM NIL) (CHAR TYPE-EQ-DECL NIL STRINGS NIL) (CHAR? ADT-RECOGNIZER-DECL "[character -> boolean]" CHARACTER_ADT NIL) (CHARACTER TYPE-DECL NIL CHARACTER_ADT NIL) (BELOW TYPE-EQ-DECL NIL NAT_TYPES NIL) (PERM TYPE-EQ-DECL NIL ATOMS NIL) (LIST TYPE-DECL NIL LIST_ADT NIL) (ATOM TYPE-EQ-DECL NIL ATOMS NIL) (CARD CONST-DECL "{n: nat | n = Card(S)}" FINITE_SETS NIL) (CARD CONST-DECL "nat" FINITE_SETS NIL) (= CONST-DECL "[T, T -> boolean]" EQUALITIES NIL) (FINITE_SET TYPE-EQ-DECL NIL FINITE_SETS NIL) (IS_FINITE CONST-DECL "bool" FINITE_SETS NIL) (SET TYPE-EQ-DECL NIL SETS NIL) (VARIABLE TYPE-EQ-DECL NIL NOMINAL_TERM NIL) (NAT NONEMPTY-TYPE-EQ-DECL NIL NATURALNUMBERS NIL) (>= CONST-DECL "bool" REALS NIL) (BOOL NONEMPTY-TYPE-EQ-DECL NIL BOOLEANS NIL) (INT NONEMPTY-TYPE-EQ-DECL NIL INTEGERS NIL) (INTEGER_PRED CONST-DECL "[rational -> boolean]" INTEGERS NIL) (RATIONAL NONEMPTY-TYPE-FROM-DECL NIL RATIONALS NIL) (RATIONAL_PRED CONST-DECL "[real -> boolean]" RATIONALS NIL) (REAL NONEMPTY-TYPE-FROM-DECL NIL REALS NIL) (REAL_PRED CONST-DECL "[number_field -> boolean]" REALS NIL) (NUMBER_FIELD NONEMPTY-TYPE-FROM-DECL NIL NUMBER_FIELDS NIL) (NUMBER_FIELD_PRED CONST-DECL "[number -> boolean]" NUMBER_FIELDS NIL) (BOOLEAN NONEMPTY-TYPE-DECL NIL BOOLEANS NIL) (NUMBER NONEMPTY-TYPE-DECL NIL NUMBERS NIL) (LEX2_LT FORMULA-DECL NIL LEX2 NIL) (FINITE_UNION APPLICATION-JUDGEMENT "finite_set" FINITE_SETS NIL) (CARD_SUBSET FORMULA-DECL NIL FINITE_SETS NIL) (UNION CONST-DECL "set" SETS NIL) (SUBS_UNIF_VARS_SUBSET FORMULA-DECL NIL SUBSTITUTION NIL) (SUBSET? CONST-DECL "bool" SETS NIL) (<= CONST-DECL "bool" REALS NIL) (SUBS_UNIF_VARS_DECREASE FORMULA-DECL NIL SUBSTITUTION NIL) (MEMBER CONST-DECL "bool" SETS NIL) (OR CONST-DECL "[bool, bool -> bool]" BOOLEANS NIL) (REAL_PLUS_REAL_IS_REAL APPLICATION-JUDGEMENT "real" REALS NIL) (MAX CONST-DECL "{p: real | p >= m AND p >= n}" REAL_DEFS NIL) (ID CONST-DECL "Sub" SUBSTITUTION NIL) (PAIR ADT-CONSTRUCTOR-DECL "[[term, term] -> (pair?)]" TERM_ADT NIL) (VARS DEF-DECL "finite_set[variable]" NOMINAL_TERM NIL) (REAL_LT_IS_STRICT_TOTAL_ORDER NAME-JUDGEMENT "(strict_total_order?[real])" REAL_PROPS NIL)) NIL NIL NIL NIL))("nominalunif" |nominalunif| |unify_TCC8| 0 (|unify_TCC8-1| NIL 3627301166 NIL ("" (SKEEP) (("" (EXPAND* EVERY ID) NIL NIL)) NIL) NIL ((EVERY ADT-DEF-DECL "boolean" LIST_ADT NIL) (ID CONST-DECL "Sub" SUBSTITUTION NIL)) NIL NIL NIL NIL))("nominalunif" |nominalunif| |unify_TCC7| 0 (|unify_TCC7-1| NIL 3627301166 NIL ("" (SKEEP) (("" (EXPAND* EVERY ID) NIL NIL)) NIL) NIL ((EVERY ADT-DEF-DECL "boolean" LIST_ADT NIL) (ID CONST-DECL "Sub" SUBSTITUTION NIL)) NIL NIL NIL NIL))("nominalunif" |nominalunif| |unify_TCC6| 0 (|unify_TCC6-1| NIL 3627301166 NIL ("" (SKEEP*) (("" (EXPAND EVERY) (("" (EXPAND ID) (("" (PROPAX) NIL NIL)) NIL)) NIL)) NIL) NIL ((EVERY ADT-DEF-DECL "boolean" LIST_ADT NIL) (ID CONST-DECL "Sub" SUBSTITUTION NIL)) NIL NIL NIL NIL))("nominalunif" |nominalunif| |unify_TCC5| 0 (|unify_TCC5-1| NIL 3626778817 NIL ("" (TERMINATION-TCC) NIL NIL) NIL ((VARS CONST-DECL "finite_set[variable]" SUBSTITUTION NIL) (MEMBER CONST-DECL "bool" SETS NIL) (UNION CONST-DECL "set" SETS NIL) (SUBSET? CONST-DECL "bool" SETS NIL) (VARS_IN CONST-DECL "bool" SUBSTITUTION NIL) (EVERY ADT-DEF-DECL "boolean" LIST_ADT NIL)) NIL NIL NIL NIL))("nominalunif" |nominalunif| |unify_TCC4| 0 (|unify_TCC4-1| NIL 3626778817 NIL ("" (SKEEP*) (("" (REWRITE EXT_PRESERVES_OCCURS) (("" (EXPAND VARS_IN) (("" (REWRITE EXT_PRESERVES_VARS) (("" (SPLIT 3) (("1" (HIDE-ALL-BUT 1) (("1" (EXPAND VARS 1 2) (("1" (GRIND) NIL NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (FLATTEN) (("2" (DECOMPOSE-EQUALITY -1) (("2" (EXPAND OCCURS 2) (("2" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("3" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL ((EXT_PRESERVES_OCCURS FORMULA-DECL NIL NOMINAL_TERM NIL) (NUMBER NONEMPTY-TYPE-DECL NIL NUMBERS NIL) (BOOLEAN NONEMPTY-TYPE-DECL NIL BOOLEANS NIL) (NUMBER_FIELD_PRED CONST-DECL "[number -> boolean]" NUMBER_FIELDS NIL) (NUMBER_FIELD NONEMPTY-TYPE-FROM-DECL NIL NUMBER_FIELDS NIL) (REAL_PRED CONST-DECL "[number_field -> boolean]" REALS NIL) (REAL NONEMPTY-TYPE-FROM-DECL NIL REALS NIL) (RATIONAL_PRED CONST-DECL "[real -> boolean]" RATIONALS NIL) (RATIONAL NONEMPTY-TYPE-FROM-DECL NIL RATIONALS NIL) (INTEGER_PRED CONST-DECL "[rational -> boolean]" INTEGERS NIL) (INT NONEMPTY-TYPE-EQ-DECL NIL INTEGERS NIL) (BOOL NONEMPTY-TYPE-EQ-DECL NIL BOOLEANS NIL) (>= CONST-DECL "bool" REALS NIL) (VARIABLE TYPE-EQ-DECL NIL NOMINAL_TERM NIL) (ATOM TYPE-EQ-DECL NIL ATOMS NIL) (LIST TYPE-DECL NIL LIST_ADT NIL) (PERM TYPE-EQ-DECL NIL ATOMS NIL) (REVERSE DEF-DECL "list[T]" LIST_PROPS NIL) (NAT NONEMPTY-TYPE-EQ-DECL NIL NATURALNUMBERS NIL) (BELOW TYPE-EQ-DECL NIL NAT_TYPES NIL) (CHARACTER TYPE-DECL NIL CHARACTER_ADT NIL) (CHAR? ADT-RECOGNIZER-DECL "[character -> boolean]" CHARACTER_ADT NIL) (CHAR TYPE-EQ-DECL NIL STRINGS NIL) (SYMBOL TYPE-EQ-DECL NIL NOMINAL_TERM NIL) (TERM TYPE-DECL NIL TERM_ADT NIL) (PRED TYPE-EQ-DECL NIL DEFINED_TYPES NIL) (EVERY ADT-DEF-DECL "boolean" TERM_ADT NIL) (AND CONST-DECL "[bool, bool -> bool]" BOOLEANS NIL) (TRUE CONST-DECL "bool" BOOLEANS NIL) (EXT_PRESERVES_VARS FORMULA-DECL NIL NOMINAL_TERM NIL) (SUSP? ADT-RECOGNIZER-DECL "[term -> boolean]" TERM_ADT NIL) (= CONST-DECL "[T, T -> boolean]" EQUALITIES NIL) (P ADT-ACCESSOR-DECL "[(susp?) -> perm]" TERM_ADT NIL) (* ADT-CONSTRUCTOR-DECL "[[perm, variable] -> (susp?)]" TERM_ADT NIL) (V ADT-ACCESSOR-DECL "[(susp?) -> variable]" TERM_ADT NIL) (OCCURS DEF-DECL "bool" NOMINAL_TERM NIL) (FINITE_UNION APPLICATION-JUDGEMENT "finite_set" FINITE_SETS NIL) (SUBSET_IS_PARTIAL_ORDER NAME-JUDGEMENT "(partial_order?[set[T]])" SETS_LEMMAS NIL) (MEMBER CONST-DECL "bool" SETS NIL) (UNION CONST-DECL "set" SETS NIL) (SUBSET? CONST-DECL "bool" SETS NIL) (NOT CONST-DECL "[bool -> bool]" BOOLEANS NIL) (VARS CONST-DECL "finite_set[variable]" SUBSTITUTION NIL) (VARS_IN CONST-DECL "bool" SUBSTITUTION NIL)) NIL NIL NIL NIL))("nominalunif" |nominalunif| |unify_TCC3| 0 (|unify_TCC3-1| NIL 3626778817 NIL ("" (TERMINATION-TCC) NIL NIL) NIL ((VARS CONST-DECL "finite_set[variable]" SUBSTITUTION NIL) (MEMBER CONST-DECL "bool" SETS NIL) (UNION CONST-DECL "set" SETS NIL) (SUBSET? CONST-DECL "bool" SETS NIL) (VARS_IN CONST-DECL "bool" SUBSTITUTION NIL) (ID CONST-DECL "Sub" SUBSTITUTION NIL) (EVERY ADT-DEF-DECL "boolean" LIST_ADT NIL)) NIL NIL NIL NIL))("nominalunif" |nominalunif| |unify_TCC2| 0 (|unify_TCC2-1| NIL 3626778817 NIL ("" (TERMINATION-TCC) NIL NIL) NIL ((VARS CONST-DECL "finite_set[variable]" SUBSTITUTION NIL) (MEMBER CONST-DECL "bool" SETS NIL) (UNION CONST-DECL "set" SETS NIL) (SUBSET? CONST-DECL "bool" SETS NIL) (VARS_IN CONST-DECL "bool" SUBSTITUTION NIL) (EVERY ADT-DEF-DECL "boolean" LIST_ADT NIL)) NIL NIL NIL NIL))("nominalunif" |nominalunif| |unify_TCC1| 0 (|unify_TCC1-1| NIL 3626778817 NIL ("" (SKEEP) (("" (EXPAND VARS_IN) (("" (REWRITE EXT_PRESERVES_VARS) (("" (PROP) (("1" (EXPAND VARS 1 2) (("1" (EXPAND* SUBSET? UNION MEMBER) (("1" (GRIND) NIL NIL)) NIL)) NIL) ("2" (EXPAND OCCURS 1) (("2" (ASSERT) NIL NIL)) NIL) ("3" (REWRITE EXT_PRESERVES_OCCURS) NIL NIL)) NIL)) NIL)) NIL)) NIL) NIL ((VARS_IN CONST-DECL "bool" SUBSTITUTION NIL) (UNION CONST-DECL "set" SETS NIL) (MEMBER CONST-DECL "bool" SETS NIL) (SUBSET? CONST-DECL "bool" SETS NIL) (NOT CONST-DECL "[bool -> bool]" BOOLEANS NIL) (SINGLETON CONST-DECL "(singleton?)" SETS NIL) (VARS DEF-DECL "finite_set[variable]" NOMINAL_TERM NIL) (VARS CONST-DECL "finite_set[variable]" SUBSTITUTION NIL) (OCCURS DEF-DECL "bool" NOMINAL_TERM NIL) (V ADT-ACCESSOR-DECL "[(susp?) -> variable]" TERM_ADT NIL) (EXT_PRESERVES_OCCURS FORMULA-DECL NIL NOMINAL_TERM NIL) (P ADT-ACCESSOR-DECL "[(susp?) -> perm]" TERM_ADT NIL) (SUSP? ADT-RECOGNIZER-DECL "[term -> boolean]" TERM_ADT NIL) (VARIABLE TYPE-EQ-DECL NIL NOMINAL_TERM NIL) (TRUE CONST-DECL "bool" BOOLEANS NIL) (AND CONST-DECL "[bool, bool -> bool]" BOOLEANS NIL) (EVERY ADT-DEF-DECL "boolean" TERM_ADT NIL) (PRED TYPE-EQ-DECL NIL DEFINED_TYPES NIL) (TERM TYPE-DECL NIL TERM_ADT NIL) (SYMBOL TYPE-EQ-DECL NIL NOMINAL_TERM NIL) (CHAR TYPE-EQ-DECL NIL STRINGS NIL) (CHAR? ADT-RECOGNIZER-DECL "[character -> boolean]" CHARACTER_ADT NIL) (CHARACTER TYPE-DECL NIL CHARACTER_ADT NIL) (BELOW TYPE-EQ-DECL NIL NAT_TYPES NIL) (NAT NONEMPTY-TYPE-EQ-DECL NIL NATURALNUMBERS NIL) (REVERSE DEF-DECL "list[T]" LIST_PROPS NIL) (PERM TYPE-EQ-DECL NIL ATOMS NIL) (LIST TYPE-DECL NIL LIST_ADT NIL) (ATOM TYPE-EQ-DECL NIL ATOMS NIL) (>= CONST-DECL "bool" REALS NIL) (BOOL NONEMPTY-TYPE-EQ-DECL NIL BOOLEANS NIL) (INT NONEMPTY-TYPE-EQ-DECL NIL INTEGERS NIL) (INTEGER_PRED CONST-DECL "[rational -> boolean]" INTEGERS NIL) (RATIONAL NONEMPTY-TYPE-FROM-DECL NIL RATIONALS NIL) (RATIONAL_PRED CONST-DECL "[real -> boolean]" RATIONALS NIL) (REAL NONEMPTY-TYPE-FROM-DECL NIL REALS NIL) (REAL_PRED CONST-DECL "[number_field -> boolean]" REALS NIL) (NUMBER_FIELD NONEMPTY-TYPE-FROM-DECL NIL NUMBER_FIELDS NIL) (NUMBER_FIELD_PRED CONST-DECL "[number -> boolean]" NUMBER_FIELDS NIL) (BOOLEAN NONEMPTY-TYPE-DECL NIL BOOLEANS NIL) (NUMBER NONEMPTY-TYPE-DECL NIL NUMBERS NIL) (EXT_PRESERVES_VARS FORMULA-DECL NIL NOMINAL_TERM NIL)) NIL NIL NIL NIL))("nominalunif" |nominalunif| |c_unify_TCC29| 0 (|c_unify_TCC29-1| NIL 3754066798 NIL ("" (TERMINATION-TCC) NIL NIL) NIL NIL NIL NIL NIL NIL))("nominalunif" |nominalunif| |c_unify_TCC28| 0 (|c_unify_TCC28-1| NIL 3754066798 NIL ("" (TERMINATION-TCC) NIL NIL) NIL NIL NIL NIL NIL NIL))("nominalunif" |nominalunif| |c_unify_TCC27| 0 (|c_unify_TCC27-1| NIL 3754066797 NIL ("" (TERMINATION-TCC) NIL NIL) NIL NIL NIL NIL NIL NIL))("nominalunif" |nominalunif| |c_unify_TCC26| 0 (|c_unify_TCC26-1| NIL 3754066797 NIL ("" (TERMINATION-TCC) NIL NIL) NIL NIL NIL NIL NIL NIL))("nominalunif" |nominalunif| |c_unify_TCC25| 0 (|c_unify_TCC25-1| NIL 3754066797 NIL ("" (SUBTYPE-TCC) NIL NIL) NIL NIL NIL NIL NIL NIL))("nominalunif" |nominalunif| |c_unify_TCC24| 0 (|c_unify_TCC24-1| NIL 3754066797 NIL ("" (SUBTYPE-TCC) NIL NIL) NIL NIL NIL NIL NIL NIL))("nominalunif" |nominalunif| |c_unify_TCC23| 0 (|c_unify_TCC23-1| NIL 3754066797 NIL ("" (TERMINATION-TCC) NIL NIL) NIL NIL NIL NIL NIL NIL))("nominalunif" |nominalunif| |c_unify_TCC22| 0 (|c_unify_TCC22-1| NIL 3754066797 NIL ("" (TERMINATION-TCC) NIL NIL) NIL NIL NIL NIL NIL NIL))("nominalunif" |nominalunif| |c_unify_TCC21| 0 (|c_unify_TCC21-1| NIL 3754066797 NIL ("" (TERMINATION-TCC) NIL NIL) NIL NIL NIL NIL NIL NIL))("nominalunif" |nominalunif| |c_unify_TCC20| 0 (|c_unify_TCC20-1| NIL 3754066797 NIL ("" (TERMINATION-TCC) NIL NIL) NIL NIL NIL NIL NIL NIL))("nominalunif" |nominalunif| |c_unify_TCC19| 0 (|c_unify_TCC19-1| NIL 3754066797 NIL ("" (TERMINATION-TCC) NIL NIL) NIL NIL NIL NIL NIL NIL))("nominalunif" |nominalunif| |c_unify_TCC18| 0 (|c_unify_TCC18-1| NIL 3754066797 NIL ("" (TERMINATION-TCC) NIL NIL) NIL NIL NIL NIL NIL NIL))("nominalunif" |nominalunif| |c_unify_TCC17| 0 (|c_unify_TCC17-1| NIL 3754066797 NIL ("" (TERMINATION-TCC) NIL NIL) NIL NIL NIL NIL NIL NIL))("nominalunif" |nominalunif| |c_unify_TCC16| 0 (|c_unify_TCC16-1| NIL 3754066797 NIL ("" (SUBTYPE-TCC) NIL NIL) NIL NIL NIL NIL NIL NIL))("nominalunif" |nominalunif| |c_unify_TCC15| 0 (|c_unify_TCC15-1| NIL 3754066797 NIL ("" (TERMINATION-TCC) NIL NIL) NIL NIL NIL NIL NIL NIL))("nominalunif" |nominalunif| |depth_lst_TCC1| 0 (|depth_lst_TCC1-1| NIL 3754037948 NIL ("" (TERMINATION-TCC) NIL NIL) NIL NIL NIL NIL NIL NIL))("nominalunif" |nominalunif| |c_unify_TCC16| 0 (|c_unify_TCC16-1| NIL 3754330341 NIL ("" (SUBTYPE-TCC) NIL NIL) NIL NIL NIL NIL NIL NIL))("nominalunif" |nominalunif| |c_unify_TCC15| 0 (|c_unify_TCC15-1| NIL 3754330341 NIL ("" (TERMINATION-TCC) NIL NIL) NIL NIL NIL NIL NIL NIL))("nominal_term" |nominal_term| |ext_TCC6| "" (SUBTYPE-TCC) NIL NIL)("alpha_equivalence" |alpha_equivalence| |alpha?_TCC1| "" (TERMINATION-TCC) NIL NIL)("alpha_equivalence" |alpha_equivalence| |alpha?_TCC2| "" (SKEEP*) (("" (EXPAND <<) (("" (ASSERT) (("" (DECOMPOSE-EQUALITY -2) (("" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL)("alpha_equivalence" |alpha_equivalence| |alpha_TCC8| 0 (|alpha_TCC8-1| NIL 3755002788 NIL ("" (TERMINATION-TCC) NIL NIL) NIL ((<< ADT-DEF-DECL "(strict_well_founded?[term])" |term_adt| NIL) (|pair| TYPE-EQ-DECL NIL |term_adt| NIL) (|pair?| ADT-RECOGNIZER-DECL "[term -> boolean]" |term_adt| NIL) (|variable| TYPE-EQ-DECL NIL |nominal_term| NIL) (TRUE CONST-DECL "bool" |booleans| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|every| ADT-DEF-DECL "boolean" |term_adt| NIL) (|term| TYPE-DECL NIL |term_adt| NIL) (|commutative_symbol| TYPE-EQ-DECL NIL |nominal_term| NIL) (|symbol| TYPE-EQ-DECL NIL |nominal_term| NIL) (|char| TYPE-EQ-DECL NIL |strings| NIL) (|char?| ADT-RECOGNIZER-DECL "[character -> boolean]" |character_adt| NIL) (|character| TYPE-DECL NIL |character_adt| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|perm| TYPE-EQ-DECL NIL |atoms| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (|atom| TYPE-EQ-DECL NIL |atoms| NIL) (>= CONST-DECL "bool" |reals| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)) NIL NIL NIL NIL))("alpha_equivalence" |alpha_equivalence| |alpha_TCC1| "" (TERMINATION-TCC) NIL NIL)("alpha_equivalence" |alpha_equivalence| |alpha_TCC2| "" (TERMINATION-TCC) NIL NIL)("alpha_equivalence" |alpha_equivalence| |alpha_TCC3| "" (TERMINATION-TCC) NIL NIL)("alpha_equivalence" |alpha_equivalence| |alpha_TCC4| "" (TERMINATION-TCC) NIL NIL)("alpha_equivalence" |alpha_equivalence| |alpha_TCC5| "" (TERMINATION-TCC) NIL NIL)("alpha_equivalence" |alpha_equivalence| |alpha_TCC6| "" (TERMINATION-TCC) NIL NIL)("alpha_equivalence" |alpha_equivalence| |alpha?_TCC1| "" (TCC))("alpha_equivalence" |alpha_equivalence| |alpha?_TCC2| "" (TCC))("alpha_equivalence" |alpha_equivalence| |alpha_TCC1| "" (TCC) NIL NIL)("alpha_equivalence" |alpha_equivalence| |alpha_TCC2| "" (TCC))("alpha_equivalence" |alpha_equivalence| |alpha_TCC3| "" (TCC))("alpha_equivalence" |alpha_equivalence| |alpha_TCC4| "" (TCC))("alpha_equivalence" |alpha_equivalence| |alpha_TCC5| "" (TCC))("alpha_equivalence" |alpha_equivalence| |alpha_TCC6| "" (TCC))("alpha_equivalence" |alpha_equivalence| |alpha_TCC7| "" (TERMINATION-TCC) NIL NIL)("alpha_equivalence" |alpha_equivalence| |alpha_TCC8| "" (TERMINATION-TCC) NIL NIL)("substitution" |substitution| |subs_TCC1| "" (TERMINATION-TCC) NIL NIL)("substitution" |substitution| |subs_TCC2| "" (TERMINATION-TCC) NIL NIL)("substitution" |substitution| |subs_TCC3| "" (TERMINATION-TCC) NIL NIL)("substitution" |substitution| |subs_TCC4| "" (TERMINATION-TCC) NIL NIL)("substitution" |substitution| |Subs_TCC1| "" (TERMINATION-TCC) NIL NIL)("substitution" |substitution| |fresh_subs_TCC1| "" (TERMINATION-TCC) NIL NIL)("substitution" |substitution| |fresh_subs?_TCC1| "" (TERMINATION-TCC) NIL NIL)("substitution" |substitution| |subs_TCC1| "" (TCC))("substitution" |substitution| |subs_TCC2| "" (TCC))("substitution" |substitution| |subs_TCC3| "" (TCC))("substitution" |substitution| |subs_TCC4| "" (TCC))("substitution" |substitution| |subs_TCC5| "" (CASES-TCC) NIL NIL)("substitution" |substitution| |Subs_TCC1| "" (TCC))("substitution" |substitution| |fresh_subs_TCC1| "" (TCC))("substitution" |substitution| |fresh_subs?_TCC1| "" (TCC))("substitution" |substitution| |subs_TCC5| "" (TCC))("substitution" |substitution| |subs_TCC6| "" (SUBTYPE-TCC) NIL NIL)("nominalunif" |nominalunif| |c_unify_TCC14| 0 (|c_unify_TCC14-1| NIL 3754037948 NIL ("" (TERMINATION-TCC) NIL NIL) NIL NIL NIL NIL NIL NIL))("nominalunif" |nominalunif| |is_alpha_eq_lst_TCC1| "" (SUBTYPE-TCC) NIL NIL)("nominalunif" |nominalunif| |is_alpha_eq_lst_TCC2| "" (TERMINATION-TCC) NIL NIL)("nominalunif" |nominalunif| |is_alpha_eq_lst_TCC3| "" (SUBTYPE-TCC) NIL NIL)("nominalunif" |nominalunif| |apply_sub_prb_lst_TCC1| "" (TERMINATION-TCC) NIL NIL)("nominalunif" |nominalunif| |fix_pnt2unif_prb_via_sub_TCC1| "" (SUBTYPE-TCC) NIL NIL)("nominalunif" |nominalunif| |fix_pnt2unif_prb_via_sub_TCC2| "" (TERMINATION-TCC) NIL NIL)("nominalunif" |nominalunif| |fix_pnt2unif_prb_via_sub_TCC3| "" (SUBTYPE-TCC) NIL NIL)("nominalunif" |nominalunif| |vars_lst_TCC1| "" (SUBTYPE-TCC) NIL NIL)("nominalunif" |nominalunif| |vars_lst_TCC2| "" (TERMINATION-TCC) NIL NIL)("nominalunif" |nominalunif| |size_lst_TCC1| "" (TERMINATION-TCC) NIL NIL)("nominalunif" |nominalunif| |fix_pnt2unif_prb_TCC1| "" (TERMINATION-TCC) NIL NIL)("nominalunif" |nominalunif| |c_unify_TCC8| "" (TERMINATION-TCC) NIL NIL)("nominalunif" |nominalunif| |c_unify_TCC10| "" (TERMINATION-TCC) NIL NIL)("nominalunif" |nominalunif| |c_unify_TCC11| "" (SUBTYPE-TCC) NIL NIL)("nominalunif" |nominalunif| |is_alpha_eq_lst_TCC1| "" (TCC))("nominalunif" |nominalunif| |is_alpha_eq_lst_TCC2| "" (TCC) NIL NIL)("nominalunif" |nominalunif| |is_alpha_eq_lst_TCC3| "" (TCC))("nominalunif" |nominalunif| |apply_sub_prb_lst_TCC1| "" (TCC))("nominalunif" |nominalunif| |fix_pnt2unif_prb_via_sub_TCC1| "" (TCC))("nominalunif" |nominalunif| |fix_pnt2unif_prb_via_sub_TCC2| "" (TCC))("nominalunif" |nominalunif| |fix_pnt2unif_prb_via_sub_TCC3| "" (TCC))("nominalunif" |nominalunif| |vars_lst_TCC1| "" (TCC))("nominalunif" |nominalunif| |vars_lst_TCC2| "" (TCC))("nominalunif" |nominalunif| |size_lst_TCC1| "" (TCC))("nominalunif" |nominalunif| |fix_pnt2unif_prb_TCC1| "" (TCC))("nominalunif" |nominalunif| |c_unify_TCC1| "" (SKEEP) (("" (SKEEP) (("" (HIDE -1 1) (("" (SKEEP) (("" (SKEEP) (("" (SKEEP) (("" (SKEEP) (("" (SKEEP) (("" (SKEEP) (("" (SKEEP) (("" (SKEEP) (("" (HIDE-ALL-BUT 2) (("" (REWRITE "lex2_lt") (("" (FLATTEN 1) (("" (HIDE 2) (("" (CASE "strict_subset?(vars_lst(new_unif_prb_lst), vars_lst(unif_prb_lst))") (("1" (ASSERT) (("1" (POSTPONE) NIL NIL)) NIL) ("2" (HIDE 2) (("2" (POSTPONE) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)("nominalunif" |nominalunif| |c_unify_TCC9| "" (TERMINATION-TCC) NIL NIL)("nominalunif" |nominalunif| |c_unify_TCC11| "" (TCC))("nominalunif" |nominalunif| |c_unify_TCC12| "" (SUBTYPE-TCC) NIL NIL)("nominalunif" |nominalunif| |c_unify_TCC15| "" (SUBTYPE-TCC) NIL NIL)("nominalunif" |nominalunif| |c_unify_TCC15| 0 (|c_unify_TCC15-1| NIL 3755105703 NIL ("" (TCC)) NIL NIL NIL NIL NIL NIL))("nominalunif" |nominalunif| |c_unify_TCC14| 0 (|c_unify_TCC14-1| NIL 3755105703 NIL ("" (TERMINATION-TCC) NIL NIL) NIL NIL NIL NIL NIL SHOSTAK))("nominalunif" |nominalunif| |c_unify_TCC15| 0 (|c_unify_TCC15-1| NIL 3755185594 NIL ("" (SUBTYPE-TCC) NIL NIL) NIL NIL NIL NIL NIL NIL))("nominalunif" |nominalunif| |c_unify_TCC14| 0 (|c_unify_TCC14-1| NIL 3755185594 NIL ("" (TERMINATION-TCC) NIL NIL) NIL NIL NIL NIL NIL NIL))("nominalunif" |nominalunif| |fix_pnt2unif_prb_via_sub_TCC3| 0 (|fix_pnt2unif_prb_via_sub_TCC3-1| NIL 3754037948 NIL ("" (TCC)) NIL NIL NIL NIL NIL NIL))("nominalunif" |nominalunif| |fix_pnt2unif_prb_via_sub_TCC2| 0 (|fix_pnt2unif_prb_via_sub_TCC2-1| NIL 3754037948 NIL ("" (TCC)) NIL ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (>= CONST-DECL "bool" |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|variable| TYPE-EQ-DECL NIL |nominal_term| NIL) (<< ADT-DEF-DECL "(strict_well_founded?[list])" |list_adt| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (|susp?| ADT-RECOGNIZER-DECL "[term -> boolean]" |term_adt| NIL) (TRUE CONST-DECL "bool" |booleans| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|term| TYPE-DECL NIL |term_adt| NIL) (|commutative_symbol| TYPE-EQ-DECL NIL |nominal_term| NIL) (|symbol| TYPE-EQ-DECL NIL |nominal_term| NIL) (|char| TYPE-EQ-DECL NIL |strings| NIL) (|char?| ADT-RECOGNIZER-DECL "[character -> boolean]" |character_adt| NIL) (|character| TYPE-DECL NIL |character_adt| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|perm| TYPE-EQ-DECL NIL |atoms| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (|atom| TYPE-EQ-DECL NIL |atoms| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL)) NIL NIL NIL NIL))("nominalunif" |nominalunif| |fix_pnt2unif_prb_via_sub_TCC1| 0 (|fix_pnt2unif_prb_via_sub_TCC1-1| NIL 3754037948 NIL ("" (TCC)) NIL ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (>= CONST-DECL "bool" |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|variable| TYPE-EQ-DECL NIL |nominal_term| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|cons?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (|susp?| ADT-RECOGNIZER-DECL "[term -> boolean]" |term_adt| NIL) (TRUE CONST-DECL "bool" |booleans| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|term| TYPE-DECL NIL |term_adt| NIL) (|commutative_symbol| TYPE-EQ-DECL NIL |nominal_term| NIL) (|symbol| TYPE-EQ-DECL NIL |nominal_term| NIL) (|char| TYPE-EQ-DECL NIL |strings| NIL) (|char?| ADT-RECOGNIZER-DECL "[character -> boolean]" |character_adt| NIL) (|character| TYPE-DECL NIL |character_adt| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|perm| TYPE-EQ-DECL NIL |atoms| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (|atom| TYPE-EQ-DECL NIL |atoms| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL)) NIL NIL NIL NIL))("nominalunif" |nominalunif| |c_unify_TCC13| 0 (|c_unify_TCC13-1| NIL 3754037948 NIL ("" (TERMINATION-TCC) NIL NIL) NIL NIL NIL NIL NIL SHOSTAK))("nominalunif" |nominalunif| |c_unify_TCC12| 0 (|c_unify_TCC12-1| NIL 3754037948 NIL ("" (TCC)) NIL ((/= CONST-DECL "boolean" |notequal| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|atom| TYPE-EQ-DECL NIL |atoms| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (|perm| TYPE-EQ-DECL NIL |atoms| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (|character| TYPE-DECL NIL |character_adt| NIL) (|char?| ADT-RECOGNIZER-DECL "[character -> boolean]" |character_adt| NIL) (|char| TYPE-EQ-DECL NIL |strings| NIL) (|symbol| TYPE-EQ-DECL NIL |nominal_term| NIL) (|commutative_symbol| TYPE-EQ-DECL NIL |nominal_term| NIL) (|term| TYPE-DECL NIL |term_adt| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (TRUE CONST-DECL "bool" |booleans| NIL) (|variable| TYPE-EQ-DECL NIL |nominal_term| NIL) (|pair?| ADT-RECOGNIZER-DECL "[term -> boolean]" |term_adt| NIL) (|pair| TYPE-EQ-DECL NIL |term_adt| NIL)) NIL NIL NIL SHOSTAK))("nominal_term" |nominal_term| |Vars_TCC1| 0 (|Vars_TCC1-1| NIL 3755452584 NIL ("" (TERMINATION-TCC) NIL NIL) NIL ((<< ADT-DEF-DECL "(strict_well_founded?[term])" |term_adt| NIL) (|variable| TYPE-EQ-DECL NIL |nominal_term| NIL) (TRUE CONST-DECL "bool" |booleans| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|every| ADT-DEF-DECL "boolean" |term_adt| NIL) (|term| TYPE-DECL NIL |term_adt| NIL) (|commutative_symbol| TYPE-EQ-DECL NIL |nominal_term| NIL) (|symbol| TYPE-EQ-DECL NIL |nominal_term| NIL) (|char| TYPE-EQ-DECL NIL |strings| NIL) (|char?| ADT-RECOGNIZER-DECL "[character -> boolean]" |character_adt| NIL) (|character| TYPE-DECL NIL |character_adt| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|perm| TYPE-EQ-DECL NIL |atoms| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (|atom| TYPE-EQ-DECL NIL |atoms| NIL) (>= CONST-DECL "bool" |reals| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)) NIL NIL NIL NIL))("nominal_term" |nominal_term| |occurs_TCC5| 0 (|occurs_TCC5-1| NIL 3755452584 NIL ("" (TERMINATION-TCC) NIL NIL) NIL ((<< ADT-DEF-DECL "(strict_well_founded?[term])" |term_adt| NIL) (|pair| TYPE-EQ-DECL NIL |term_adt| NIL) (|pair?| ADT-RECOGNIZER-DECL "[term -> boolean]" |term_adt| NIL) (|variable| TYPE-EQ-DECL NIL |nominal_term| NIL) (TRUE CONST-DECL "bool" |booleans| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|every| ADT-DEF-DECL "boolean" |term_adt| NIL) (|term| TYPE-DECL NIL |term_adt| NIL) (|commutative_symbol| TYPE-EQ-DECL NIL |nominal_term| NIL) (|symbol| TYPE-EQ-DECL NIL |nominal_term| NIL) (|char| TYPE-EQ-DECL NIL |strings| NIL) (|char?| ADT-RECOGNIZER-DECL "[character -> boolean]" |character_adt| NIL) (|character| TYPE-DECL NIL |character_adt| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|perm| TYPE-EQ-DECL NIL |atoms| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (|atom| TYPE-EQ-DECL NIL |atoms| NIL) (>= CONST-DECL "bool" |reals| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)) NIL NIL NIL NIL))("nominal_term" |nominal_term| |occurs_TCC4| 0 (|occurs_TCC4-1| NIL 3755452584 NIL ("" (TERMINATION-TCC) NIL NIL) NIL ((<< ADT-DEF-DECL "(strict_well_founded?[term])" |term_adt| NIL) (|variable| TYPE-EQ-DECL NIL |nominal_term| NIL) (TRUE CONST-DECL "bool" |booleans| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|every| ADT-DEF-DECL "boolean" |term_adt| NIL) (|term| TYPE-DECL NIL |term_adt| NIL) (|commutative_symbol| TYPE-EQ-DECL NIL |nominal_term| NIL) (|symbol| TYPE-EQ-DECL NIL |nominal_term| NIL) (|char| TYPE-EQ-DECL NIL |strings| NIL) (|char?| ADT-RECOGNIZER-DECL "[character -> boolean]" |character_adt| NIL) (|character| TYPE-DECL NIL |character_adt| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|perm| TYPE-EQ-DECL NIL |atoms| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (|atom| TYPE-EQ-DECL NIL |atoms| NIL) (>= CONST-DECL "bool" |reals| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)) NIL NIL NIL NIL))("nominal_term" |nominal_term| |occurs_TCC3| 0 (|occurs_TCC3-1| NIL 3755452584 NIL ("" (TERMINATION-TCC) NIL NIL) NIL ((<< ADT-DEF-DECL "(strict_well_founded?[term])" |term_adt| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|variable| TYPE-EQ-DECL NIL |nominal_term| NIL) (TRUE CONST-DECL "bool" |booleans| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|every| ADT-DEF-DECL "boolean" |term_adt| NIL) (|term| TYPE-DECL NIL |term_adt| NIL) (|commutative_symbol| TYPE-EQ-DECL NIL |nominal_term| NIL) (|symbol| TYPE-EQ-DECL NIL |nominal_term| NIL) (|char| TYPE-EQ-DECL NIL |strings| NIL) (|char?| ADT-RECOGNIZER-DECL "[character -> boolean]" |character_adt| NIL) (|character| TYPE-DECL NIL |character_adt| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|perm| TYPE-EQ-DECL NIL |atoms| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (|atom| TYPE-EQ-DECL NIL |atoms| NIL) (>= CONST-DECL "bool" |reals| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)) NIL NIL NIL NIL))("nominal_term" |nominal_term| |occurs_TCC2| 0 (|occurs_TCC2-1| NIL 3755452584 NIL ("" (TERMINATION-TCC) NIL NIL) NIL ((<< ADT-DEF-DECL "(strict_well_founded?[term])" |term_adt| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (TRUE CONST-DECL "bool" |booleans| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|every| ADT-DEF-DECL "boolean" |term_adt| NIL) (|term| TYPE-DECL NIL |term_adt| NIL) (|commutative_symbol| TYPE-EQ-DECL NIL |nominal_term| NIL) (|symbol| TYPE-EQ-DECL NIL |nominal_term| NIL) (|char| TYPE-EQ-DECL NIL |strings| NIL) (|char?| ADT-RECOGNIZER-DECL "[character -> boolean]" |character_adt| NIL) (|character| TYPE-DECL NIL |character_adt| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|perm| TYPE-EQ-DECL NIL |atoms| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (|atom| TYPE-EQ-DECL NIL |atoms| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|variable| TYPE-EQ-DECL NIL |nominal_term| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (>= CONST-DECL "bool" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)) NIL NIL NIL NIL))("nominal_term" |nominal_term| |occurs_TCC1| 0 (|occurs_TCC1-1| NIL 3755452584 NIL ("" (TERMINATION-TCC) NIL NIL) NIL ((<< ADT-DEF-DECL "(strict_well_founded?[term])" |term_adt| NIL) (|variable| TYPE-EQ-DECL NIL |nominal_term| NIL) (TRUE CONST-DECL "bool" |booleans| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|every| ADT-DEF-DECL "boolean" |term_adt| NIL) (|term| TYPE-DECL NIL |term_adt| NIL) (|commutative_symbol| TYPE-EQ-DECL NIL |nominal_term| NIL) (|symbol| TYPE-EQ-DECL NIL |nominal_term| NIL) (|char| TYPE-EQ-DECL NIL |strings| NIL) (|char?| ADT-RECOGNIZER-DECL "[character -> boolean]" |character_adt| NIL) (|character| TYPE-DECL NIL |character_adt| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|perm| TYPE-EQ-DECL NIL |atoms| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (|atom| TYPE-EQ-DECL NIL |atoms| NIL) (>= CONST-DECL "bool" |reals| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)) NIL NIL NIL NIL))("alpha_equivalence" |alpha_equivalence| |alpha_TCC1| "" (TCC))("alpha_equivalence" |alpha_equivalence| |alpha_TCC7| "" (TCC))("alpha_equivalence" |alpha_equivalence| |alpha_TCC8| "" (TCC))("alpha_equivalence" |alpha_equivalence| |alpha?_TCC3| "" (CASES-TCC) NIL NIL)("alpha_equivalence" |alpha_equivalence| |alpha?_TCC4| "" (TERMINATION-TCC) NIL NIL)("alpha_equivalence" |alpha_equivalence| |alpha?_TCC5| "" (TERMINATION-TCC) NIL NIL)("alpha_equivalence" |alpha_equivalence| |alpha?_TCC6| 0 (|alpha?_TCC6-1| NIL 3755453625 NIL ("" (CASES-TCC) NIL NIL) NIL NIL NIL NIL NIL SHOSTAK))("alpha_equivalence" |alpha_equivalence| |alpha?_TCC5| 0 (|alpha?_TCC5-1| NIL 3755453625 NIL ("" (TCC)) NIL ((<< ADT-DEF-DECL "(strict_well_founded?[term])" |term_adt| NIL) (|variable| TYPE-EQ-DECL NIL |nominal_term| NIL) (TRUE CONST-DECL "bool" |booleans| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|every| ADT-DEF-DECL "boolean" |term_adt| NIL) (|term| TYPE-DECL NIL |term_adt| NIL) (|commutative_symbol| TYPE-EQ-DECL NIL |nominal_term| NIL) (|symbol| TYPE-EQ-DECL NIL |nominal_term| NIL) (|char| TYPE-EQ-DECL NIL |strings| NIL) (|char?| ADT-RECOGNIZER-DECL "[character -> boolean]" |character_adt| NIL) (|character| TYPE-DECL NIL |character_adt| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|perm| TYPE-EQ-DECL NIL |atoms| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (|atom| TYPE-EQ-DECL NIL |atoms| NIL) (>= CONST-DECL "bool" |reals| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)) NIL NIL NIL NIL))("alpha_equivalence" |alpha_equivalence| |alpha?_TCC4| 0 (|alpha?_TCC4-1| NIL 3755453625 NIL ("" (TCC)) NIL ((<< ADT-DEF-DECL "(strict_well_founded?[term])" |term_adt| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|variable| TYPE-EQ-DECL NIL |nominal_term| NIL) (TRUE CONST-DECL "bool" |booleans| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|every| ADT-DEF-DECL "boolean" |term_adt| NIL) (|term| TYPE-DECL NIL |term_adt| NIL) (|commutative_symbol| TYPE-EQ-DECL NIL |nominal_term| NIL) (|symbol| TYPE-EQ-DECL NIL |nominal_term| NIL) (|char| TYPE-EQ-DECL NIL |strings| NIL) (|char?| ADT-RECOGNIZER-DECL "[character -> boolean]" |character_adt| NIL) (|character| TYPE-DECL NIL |character_adt| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|perm| TYPE-EQ-DECL NIL |atoms| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (|atom| TYPE-EQ-DECL NIL |atoms| NIL) (>= CONST-DECL "bool" |reals| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)) NIL NIL NIL NIL))("nominal_term" |nominal_term| |Vars_TCC1| 0 (|Vars_TCC1-1| NIL 3755452584 NIL ("" (TERMINATION-TCC) NIL NIL) NIL ((<< ADT-DEF-DECL "(strict_well_founded?[term])" |term_adt| NIL) (|variable| TYPE-EQ-DECL NIL |nominal_term| NIL) (TRUE CONST-DECL "bool" |booleans| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) NIL (|term| TYPE-DECL NIL |term_adt| NIL) (|commutative_symbol| TYPE-EQ-DECL NIL |nominal_term| NIL) (|symbol| TYPE-EQ-DECL NIL |nominal_term| NIL) (|char| TYPE-EQ-DECL NIL |strings| NIL) (|char?| ADT-RECOGNIZER-DECL "[character -> boolean]" |character_adt| NIL) (|character| TYPE-DECL NIL |character_adt| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|perm| TYPE-EQ-DECL NIL |atoms| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (|atom| TYPE-EQ-DECL NIL |atoms| NIL) (>= CONST-DECL "bool" |reals| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)) NIL NIL NIL NIL))("nominal_term" |nominal_term| |occurs_TCC5| 0 (|occurs_TCC5-1| NIL 3755452584 NIL ("" (TERMINATION-TCC) NIL NIL) NIL ((<< ADT-DEF-DECL "(strict_well_founded?[term])" |term_adt| NIL) (|pair| TYPE-EQ-DECL NIL |term_adt| NIL) (|pair?| ADT-RECOGNIZER-DECL "[term -> boolean]" |term_adt| NIL) (|variable| TYPE-EQ-DECL NIL |nominal_term| NIL) (TRUE CONST-DECL "bool" |booleans| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) NIL (|term| TYPE-DECL NIL |term_adt| NIL) (|commutative_symbol| TYPE-EQ-DECL NIL |nominal_term| NIL) (|symbol| TYPE-EQ-DECL NIL |nominal_term| NIL) (|char| TYPE-EQ-DECL NIL |strings| NIL) (|char?| ADT-RECOGNIZER-DECL "[character -> boolean]" |character_adt| NIL) (|character| TYPE-DECL NIL |character_adt| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|perm| TYPE-EQ-DECL NIL |atoms| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (|atom| TYPE-EQ-DECL NIL |atoms| NIL) (>= CONST-DECL "bool" |reals| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)) NIL NIL NIL NIL))("nominal_term" |nominal_term| |occurs_TCC4| 0 (|occurs_TCC4-1| NIL 3755452584 NIL ("" (TERMINATION-TCC) NIL NIL) NIL ((<< ADT-DEF-DECL "(strict_well_founded?[term])" |term_adt| NIL) (|variable| TYPE-EQ-DECL NIL |nominal_term| NIL) (TRUE CONST-DECL "bool" |booleans| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) NIL (|term| TYPE-DECL NIL |term_adt| NIL) (|commutative_symbol| TYPE-EQ-DECL NIL |nominal_term| NIL) (|symbol| TYPE-EQ-DECL NIL |nominal_term| NIL) (|char| TYPE-EQ-DECL NIL |strings| NIL) (|char?| ADT-RECOGNIZER-DECL "[character -> boolean]" |character_adt| NIL) (|character| TYPE-DECL NIL |character_adt| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|perm| TYPE-EQ-DECL NIL |atoms| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (|atom| TYPE-EQ-DECL NIL |atoms| NIL) (>= CONST-DECL "bool" |reals| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)) NIL NIL NIL NIL))("nominal_term" |nominal_term| |occurs_TCC3| 0 (|occurs_TCC3-1| NIL 3755452584 NIL ("" (TERMINATION-TCC) NIL NIL) NIL ((<< ADT-DEF-DECL "(strict_well_founded?[term])" |term_adt| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|variable| TYPE-EQ-DECL NIL |nominal_term| NIL) (TRUE CONST-DECL "bool" |booleans| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) NIL (|term| TYPE-DECL NIL |term_adt| NIL) (|commutative_symbol| TYPE-EQ-DECL NIL |nominal_term| NIL) (|symbol| TYPE-EQ-DECL NIL |nominal_term| NIL) (|char| TYPE-EQ-DECL NIL |strings| NIL) (|char?| ADT-RECOGNIZER-DECL "[character -> boolean]" |character_adt| NIL) (|character| TYPE-DECL NIL |character_adt| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|perm| TYPE-EQ-DECL NIL |atoms| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (|atom| TYPE-EQ-DECL NIL |atoms| NIL) (>= CONST-DECL "bool" |reals| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)) NIL NIL NIL NIL))("nominal_term" |nominal_term| |occurs_TCC2| 0 (|occurs_TCC2-1| NIL 3755452584 NIL ("" (TERMINATION-TCC) NIL NIL) NIL ((<< ADT-DEF-DECL "(strict_well_founded?[term])" |term_adt| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (TRUE CONST-DECL "bool" |booleans| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) NIL (|term| TYPE-DECL NIL |term_adt| NIL) (|commutative_symbol| TYPE-EQ-DECL NIL |nominal_term| NIL) (|symbol| TYPE-EQ-DECL NIL |nominal_term| NIL) (|char| TYPE-EQ-DECL NIL |strings| NIL) (|char?| ADT-RECOGNIZER-DECL "[character -> boolean]" |character_adt| NIL) (|character| TYPE-DECL NIL |character_adt| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|perm| TYPE-EQ-DECL NIL |atoms| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (|atom| TYPE-EQ-DECL NIL |atoms| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|variable| TYPE-EQ-DECL NIL |nominal_term| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (>= CONST-DECL "bool" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)) NIL NIL NIL NIL))("nominal_term" |nominal_term| |occurs_TCC1| 0 (|occurs_TCC1-1| NIL 3755452584 NIL ("" (TERMINATION-TCC) NIL NIL) NIL ((<< ADT-DEF-DECL "(strict_well_founded?[term])" |term_adt| NIL) (|variable| TYPE-EQ-DECL NIL |nominal_term| NIL) (TRUE CONST-DECL "bool" |booleans| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) NIL (|term| TYPE-DECL NIL |term_adt| NIL) (|commutative_symbol| TYPE-EQ-DECL NIL |nominal_term| NIL) (|symbol| TYPE-EQ-DECL NIL |nominal_term| NIL) (|char| TYPE-EQ-DECL NIL |strings| NIL) (|char?| ADT-RECOGNIZER-DECL "[character -> boolean]" |character_adt| NIL) (|character| TYPE-DECL NIL |character_adt| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|perm| TYPE-EQ-DECL NIL |atoms| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (|atom| TYPE-EQ-DECL NIL |atoms| NIL) (>= CONST-DECL "bool" |reals| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)) NIL NIL NIL NIL))("alpha_equivalence" |alpha_equivalence| |alpha_depth| 0 (|alpha_depth-2| NIL 3745912687 NIL ("" (INDUCT "t") (("1" (GRIND) NIL NIL) ("2" (GRIND) NIL NIL) ("3" (GRIND) NIL NIL) ("4" (GRIND) NIL NIL) ("5" (GRIND) (("5" (REWRITE "ext_preserves_depth") NIL NIL)) NIL) ("6" (GRIND) NIL NIL) ("7" (SKEEP) (("7" (SKEEP) (("7" (EXPAND "alpha" -2) (("7" (FLATTEN -2) (("7" (LEMMA "term_c_app_eta") (("7" (INST -1 "s") (("7" (REPLACE -1 1 RL) (("7" (EXPAND "depth" 1) (("7" (INST -2 "Delta" "c_arg(s)") (("7" (POSTPONE) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL NIL NIL NIL NIL NIL) (|alpha_depth-1| NIL 3624365892 NIL ("" (INDUCT T) (("1" (GRIND) NIL NIL) ("2" (GRIND) NIL NIL) ("3" (GRIND) NIL NIL) ("4" (GRIND) NIL NIL) ("5" (GRIND) (("5" (REWRITE EXT_PRESERVES_DEPTH) NIL NIL)) NIL) ("6" (GRIND) NIL NIL)) NIL) NIL NIL NIL NIL NIL SHOSTAK))("substitution" |substitution| |Subs_c_app_TCC2| 0 (|Subs_c_app_TCC2-1| NIL 3755592066 NIL ("" (SUBTYPE-TCC) NIL NIL) NIL NIL NIL NIL NIL NIL))("nominal_term" |nominal_term| |depth_TCC1| 0 (|depth_TCC1-1| NIL 3754988819 NIL ("" (TERMINATION-TCC) NIL NIL) NIL ((<< ADT-DEF-DECL "(strict_well_founded?[term])" |term_adt| NIL) (|pair| TYPE-EQ-DECL NIL |term_adt| NIL) (|pair?| ADT-RECOGNIZER-DECL "[term -> boolean]" |term_adt| NIL) (|variable| TYPE-EQ-DECL NIL |nominal_term| NIL) (TRUE CONST-DECL "bool" |booleans| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) NIL (|term| TYPE-DECL NIL |term_adt| NIL) (|commutative_symbol| TYPE-EQ-DECL NIL |nominal_term| NIL) (|symbol| TYPE-EQ-DECL NIL |nominal_term| NIL) (|char| TYPE-EQ-DECL NIL |strings| NIL) (|char?| ADT-RECOGNIZER-DECL "[character -> boolean]" |character_adt| NIL) (|character| TYPE-DECL NIL |character_adt| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|perm| TYPE-EQ-DECL NIL |atoms| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (|atom| TYPE-EQ-DECL NIL |atoms| NIL) (>= CONST-DECL "bool" |reals| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)) NIL NIL NIL NIL))("nominalunif" |nominalunif| |cdr_smaller_size_TCC1| 0 (|cdr_smaller_size_TCC1-1| NIL 3755936313 NIL ("" (SUBTYPE-TCC) NIL NIL) NIL NIL NIL NIL NIL NIL))("nominal_term" |nominal_term| |Vars_TCC1| 0 (|Vars_TCC1-1| NIL 3755452584 ("" (TERMINATION-TCC) NIL NIL) ((<< ADT-DEF-DECL "(strict_well_founded?[term])" |term_adt| NIL) (|variable| TYPE-EQ-DECL NIL |nominal_term| NIL) (TRUE CONST-DECL "bool" |booleans| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) NIL (|term| TYPE-DECL NIL |term_adt| NIL) (|commutative_symbol| TYPE-EQ-DECL NIL |nominal_term| NIL) (|symbol| TYPE-EQ-DECL NIL |nominal_term| NIL) (|char| TYPE-EQ-DECL NIL |strings| NIL) (|char?| ADT-RECOGNIZER-DECL "[character -> boolean]" |character_adt| NIL) (|character| TYPE-DECL NIL |character_adt| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|perm| TYPE-EQ-DECL NIL |atoms| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (|atom| TYPE-EQ-DECL NIL |atoms| NIL) (>= CONST-DECL "bool" |reals| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)) NIL))("nominal_term" |nominal_term| |occurs_TCC5| 0 (|occurs_TCC5-1| NIL 3755452584 ("" (TERMINATION-TCC) NIL NIL) ((<< ADT-DEF-DECL "(strict_well_founded?[term])" |term_adt| NIL) (|pair| TYPE-EQ-DECL NIL |term_adt| NIL) (|pair?| ADT-RECOGNIZER-DECL "[term -> boolean]" |term_adt| NIL) (|variable| TYPE-EQ-DECL NIL |nominal_term| NIL) (TRUE CONST-DECL "bool" |booleans| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) NIL (|term| TYPE-DECL NIL |term_adt| NIL) (|commutative_symbol| TYPE-EQ-DECL NIL |nominal_term| NIL) (|symbol| TYPE-EQ-DECL NIL |nominal_term| NIL) (|char| TYPE-EQ-DECL NIL |strings| NIL) (|char?| ADT-RECOGNIZER-DECL "[character -> boolean]" |character_adt| NIL) (|character| TYPE-DECL NIL |character_adt| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|perm| TYPE-EQ-DECL NIL |atoms| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (|atom| TYPE-EQ-DECL NIL |atoms| NIL) (>= CONST-DECL "bool" |reals| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)) NIL))("nominal_term" |nominal_term| |occurs_TCC4| 0 (|occurs_TCC4-1| NIL 3755452584 ("" (TERMINATION-TCC) NIL NIL) ((<< ADT-DEF-DECL "(strict_well_founded?[term])" |term_adt| NIL) (|variable| TYPE-EQ-DECL NIL |nominal_term| NIL) (TRUE CONST-DECL "bool" |booleans| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) NIL (|term| TYPE-DECL NIL |term_adt| NIL) (|commutative_symbol| TYPE-EQ-DECL NIL |nominal_term| NIL) (|symbol| TYPE-EQ-DECL NIL |nominal_term| NIL) (|char| TYPE-EQ-DECL NIL |strings| NIL) (|char?| ADT-RECOGNIZER-DECL "[character -> boolean]" |character_adt| NIL) (|character| TYPE-DECL NIL |character_adt| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|perm| TYPE-EQ-DECL NIL |atoms| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (|atom| TYPE-EQ-DECL NIL |atoms| NIL) (>= CONST-DECL "bool" |reals| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)) NIL))("nominal_term" |nominal_term| |occurs_TCC3| 0 (|occurs_TCC3-1| NIL 3755452584 ("" (TERMINATION-TCC) NIL NIL) ((<< ADT-DEF-DECL "(strict_well_founded?[term])" |term_adt| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (|variable| TYPE-EQ-DECL NIL |nominal_term| NIL) (TRUE CONST-DECL "bool" |booleans| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) NIL (|term| TYPE-DECL NIL |term_adt| NIL) (|commutative_symbol| TYPE-EQ-DECL NIL |nominal_term| NIL) (|symbol| TYPE-EQ-DECL NIL |nominal_term| NIL) (|char| TYPE-EQ-DECL NIL |strings| NIL) (|char?| ADT-RECOGNIZER-DECL "[character -> boolean]" |character_adt| NIL) (|character| TYPE-DECL NIL |character_adt| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|perm| TYPE-EQ-DECL NIL |atoms| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (|atom| TYPE-EQ-DECL NIL |atoms| NIL) (>= CONST-DECL "bool" |reals| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)) NIL))("nominal_term" |nominal_term| |occurs_TCC2| 0 (|occurs_TCC2-1| NIL 3755452584 ("" (TERMINATION-TCC) NIL NIL) ((<< ADT-DEF-DECL "(strict_well_founded?[term])" |term_adt| NIL) (|real_ge_is_total_order| NAME-JUDGEMENT "(total_order?[real])" |real_props| NIL) (TRUE CONST-DECL "bool" |booleans| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) NIL (|term| TYPE-DECL NIL |term_adt| NIL) (|commutative_symbol| TYPE-EQ-DECL NIL |nominal_term| NIL) (|symbol| TYPE-EQ-DECL NIL |nominal_term| NIL) (|char| TYPE-EQ-DECL NIL |strings| NIL) (|char?| ADT-RECOGNIZER-DECL "[character -> boolean]" |character_adt| NIL) (|character| TYPE-DECL NIL |character_adt| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|perm| TYPE-EQ-DECL NIL |atoms| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (|atom| TYPE-EQ-DECL NIL |atoms| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|variable| TYPE-EQ-DECL NIL |nominal_term| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (>= CONST-DECL "bool" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)) NIL))("nominal_term" |nominal_term| |occurs_TCC1| 0 (|occurs_TCC1-1| NIL 3755452584 ("" (TERMINATION-TCC) NIL NIL) ((<< ADT-DEF-DECL "(strict_well_founded?[term])" |term_adt| NIL) (|variable| TYPE-EQ-DECL NIL |nominal_term| NIL) (TRUE CONST-DECL "bool" |booleans| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) NIL (|term| TYPE-DECL NIL |term_adt| NIL) (|commutative_symbol| TYPE-EQ-DECL NIL |nominal_term| NIL) (|symbol| TYPE-EQ-DECL NIL |nominal_term| NIL) (|char| TYPE-EQ-DECL NIL |strings| NIL) (|char?| ADT-RECOGNIZER-DECL "[character -> boolean]" |character_adt| NIL) (|character| TYPE-DECL NIL |character_adt| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|perm| TYPE-EQ-DECL NIL |atoms| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (|atom| TYPE-EQ-DECL NIL |atoms| NIL) (>= CONST-DECL "bool" |reals| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)) NIL))("nominalunif" |nominalunif| |c_unify_sound_cor| 0 (|c_unify_sound_cor-1| NIL 3756217435 NIL ("" (INDUCT "t") (("1" (POSTPONE) NIL NIL) ("2" (POSTPONE) NIL NIL) ("3" (POSTPONE) NIL NIL) ("4" (POSTPONE) NIL NIL) ("5" (POSTPONE) NIL NIL) ("6" (POSTPONE) NIL NIL) ("7" (POSTPONE) NIL NIL) ("8" (POSTPONE) NIL NIL)) NIL) NIL NIL NIL NIL NIL SHOSTAK))("nominalunif" |nominalunif| |cdr_smaller_size_TCC1| 0 (|cdr_smaller_size_TCC1-1| NIL 3756459710 NIL ("" (SUBTYPE-TCC) NIL NIL) NIL NIL NIL NIL NIL NIL))("substitution" |substitution| |suf_cond_idempotent_aux| 0 (|suf_cond_idempotent_aux-1| NIL 3756474800 NIL ("" (INDUCT "sigma") (("1" (POSTPONE) NIL NIL) ("2" (SKOLEM 1 ("sub_head" "sub_tail")) (("2" (PROP) (("2" (INDUCT "t") (("1" (POSTPONE) NIL NIL) ("2" (SKOLEM 1 ("pm" "V")) (("2" (PROP) (("2" (EXPAND "Subs") (("2" (POSTPONE) NIL NIL)) NIL)) NIL)) NIL) ("3" (POSTPONE) NIL NIL) ("4" (POSTPONE) NIL NIL) ("5" (POSTPONE) NIL NIL) ("6" (POSTPONE) NIL NIL) ("7" (POSTPONE) NIL NIL)) NIL)) NIL)) NIL)) NIL) NIL NIL NIL NIL NIL SHOSTAK))("nominalunif" |nominalunif| |is_alpha_eq_lst_TCC3| 0 (|is_alpha_eq_lst_TCC3-1| NIL 3754037948 NIL ("" (TCC)) NIL NIL NIL NIL NIL NIL))("nominalunif" |nominalunif| |is_alpha_eq_lst_TCC2| 0 (|is_alpha_eq_lst_TCC2-1| NIL 3754037948 NIL ("" (TCC)) NIL ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|atom| TYPE-EQ-DECL NIL |atoms| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (|perm| TYPE-EQ-DECL NIL |atoms| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (|character| TYPE-DECL NIL |character_adt| NIL) (|char?| ADT-RECOGNIZER-DECL "[character -> boolean]" |character_adt| NIL) (|char| TYPE-EQ-DECL NIL |strings| NIL) (|symbol| TYPE-EQ-DECL NIL |nominal_term| NIL) (|commutative_symbol| TYPE-EQ-DECL NIL |nominal_term| NIL) (|term| TYPE-DECL NIL |term_adt| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (TRUE CONST-DECL "bool" |booleans| NIL) (|variable| TYPE-EQ-DECL NIL |nominal_term| NIL) (<< ADT-DEF-DECL "(strict_well_founded?[list])" |list_adt| NIL)) NIL NIL NIL NIL))("nominalunif" |nominalunif| |is_alpha_eq_lst_TCC1| 0 (|is_alpha_eq_lst_TCC1-1| NIL 3754037948 NIL ("" (TCC)) NIL ((|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (>= CONST-DECL "bool" |reals| NIL) (|atom| TYPE-EQ-DECL NIL |atoms| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (|perm| TYPE-EQ-DECL NIL |atoms| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (|character| TYPE-DECL NIL |character_adt| NIL) (|char?| ADT-RECOGNIZER-DECL "[character -> boolean]" |character_adt| NIL) (|char| TYPE-EQ-DECL NIL |strings| NIL) (|symbol| TYPE-EQ-DECL NIL |nominal_term| NIL) (|commutative_symbol| TYPE-EQ-DECL NIL |nominal_term| NIL) (|term| TYPE-DECL NIL |term_adt| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (TRUE CONST-DECL "bool" |booleans| NIL) (|variable| TYPE-EQ-DECL NIL |nominal_term| NIL)) NIL NIL NIL NIL))("nominal_term" |nominal_term| |depth_TCC1| 0 (|depth_TCC1-1| NIL 3754988819 ("" (TERMINATION-TCC) NIL NIL) ((<< ADT-DEF-DECL "(strict_well_founded?[term])" |term_adt| NIL) (|pair| TYPE-EQ-DECL NIL |term_adt| NIL) (|pair?| ADT-RECOGNIZER-DECL "[term -> boolean]" |term_adt| NIL) (|variable| TYPE-EQ-DECL NIL |nominal_term| NIL) (TRUE CONST-DECL "bool" |booleans| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) NIL (|term| TYPE-DECL NIL |term_adt| NIL) (|commutative_symbol| TYPE-EQ-DECL NIL |nominal_term| NIL) (|symbol| TYPE-EQ-DECL NIL |nominal_term| NIL) (|char| TYPE-EQ-DECL NIL |strings| NIL) (|char?| ADT-RECOGNIZER-DECL "[character -> boolean]" |character_adt| NIL) (|character| TYPE-DECL NIL |character_adt| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|perm| TYPE-EQ-DECL NIL |atoms| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (|atom| TYPE-EQ-DECL NIL |atoms| NIL) (>= CONST-DECL "bool" |reals| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)) NIL))("substitution" |substitution| |suf_cond_sub_comm| 0 (|suf_cond_sub_comm-1| NIL 3756556338 NIL ("" (INDUCT "t") (("1" (SKEEP) (("1" (SKEEP) (("1" (REWRITE "Subs_atom") (("1" (REWRITE "Subs_atom") (("1" (REWRITE "Subs_atom") NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKOLEM 1 ("pm" "V")) (("2" (SKEEP) (("2" (CASE "member(V, vars_dom_sub(gamma))") (("1" (CASE "member(V, vars_dom_sub(sigma))") (("1" (HIDE 1) (("1" (GRIND) NIL NIL)) NIL) ("2" (LEMMA "sub_skip_term") (("2" (INST -1 "sigma" "pm * V") (("2" (PROP) (("1" (REPLACE -1 2 NIL T) (("1" (LEMMA "sub_skip_term") (("1" (INST -1 "sigma" "Subs(gamma)(pm * V)") (("1" (PROP) (("1" (HIDE 3) (("1" (EXPAND "disjoint?") (("1" (EXPAND "empty?") (("1" (SKEEP) (("1" (INST -3 "x") (("1" (EXPAND "intersection") (("1" (EXPAND "union") (("1" (EXPAND "member") (("1" (PROP) (("1" (LEMMA "member_var_term_sub") (("1" (INST -1 "x" "gamma" "pm * V") (("1" (PROP) (("1" (EXPAND "member" -1) (("1" (HIDE -2 -4 1 2) (("1" (GRIND) NIL NIL)) NIL)) NIL) ("2" (EXPAND "member") (("2" (PROPAX) NIL NIL)) NIL) ("3" (EXPAND "member") (("3" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "Vars" 1) (("2" (HIDE -1 -2 3) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (CASE "member(V, vars_dom_sub(sigma))") (("1" (LEMMA "sub_skip_term") (("1" (INST -1 "gamma" "(pm * V)") (("1" (PROP) (("1" (REPLACE -1 2 NIL T) (("1" (LEMMA "sub_skip_term") (("1" (INST -1 "gamma" "Subs(sigma)(pm * V)") (("1" (PROP) (("1" (REPLACE -1 2) (("1" (PROPAX) NIL NIL)) NIL) ("2" (HIDE 3) (("2" (EXPAND "disjoint?") (("2" (EXPAND "empty?") (("2" (SKEEP) (("2" (INST -3 "x") (("2" (EXPAND "intersection") (("2" (EXPAND "union") (("2" (EXPAND "member") (("2" (PROP) (("2" (LEMMA "member_var_term_sub") (("2" (INST -1 "x" "sigma" "pm * V") (("2" (PROP) (("1" (EXPAND "member" -1) (("1" (HIDE -2 -3 2 3) (("1" (GRIND) NIL NIL)) NIL)) NIL) ("2" (EXPAND "member") (("2" (PROPAX) NIL NIL)) NIL) ("3" (EXPAND "member") (("3" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE -1 -2 3) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (LEMMA "sub_skip_term") (("2" (INST -1 "gamma" "pm * V") (("2" (PROP) (("1" (REPLACE -1 3 NIL T) (("1" (LEMMA "sub_skip_term") (("1" (INST -1 "sigma" "pm * V") (("1" (PROP) (("1" (REPLACE -1 3) (("1" (HIDE -1) (("1" (REVEAL -1) (("1" (REVEAL -2) (("1" (REPLACE -1 3) (("1" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE -1 3 4) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE -1 2 4) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (SKEEP) (("3" (REWRITE "Subs_unit") (("3" (REWRITE "Subs_unit") (("3" (REWRITE "Subs_unit") NIL NIL)) NIL)) NIL)) NIL) ("4" (SKOLEM 1 ("p1" "p2")) (("4" (PROP) (("4" (SKEEP) (("4" (REWRITE "Subs_pair") (("4" (REWRITE "Subs_pair") (("4" (REWRITE "Subs_pair") (("4" (REWRITE "Subs_pair") (("4" (LEMMA "term_pair_extensionality") (("4" (INST? -1) (("4" (PROP) (("1" (HIDE 2) (("1" (ASSERT) (("1" (HIDE -2) (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("2" (HIDE 2) (("2" (ASSERT) (("2" (HIDE -1) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("5" (SKEEP) (("5" (SKEEP) (("5" (REWRITE "Subs_abs") (("5" (REWRITE "Subs_abs") (("5" (REWRITE "Subs_abs") (("5" (REWRITE "Subs_abs") (("5" (LEMMA "term_abs_extensionality") (("5" (INST? -1) (("5" (PROP) (("1" (ASSERT) NIL NIL) ("2" (HIDE 2) (("2" (ASSERT) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("6" (SKEEP) (("6" (SKEEP) (("6" (REWRITE "Subs_app") (("6" (REWRITE "Subs_app") (("6" (REWRITE "Subs_app") (("6" (REWRITE "Subs_app") (("6" (REWRITE "term_app_extensionality") (("6" (HIDE 2) (("6" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("7" (SKOLEM 1 ("f" "ag")) (("7" (PROP) (("7" (SKEEP) (("7" (LEMMA "Subs_c_app") (("7" (CASE "ag = pair(term1(ag), term2(ag))") (("1" (REPLACE -1 1) (("1" (HIDE -1 -2) (("1" (REWRITE "Subs_c_app") (("1" (REWRITE "Subs_c_app") (("1" (REWRITE "Subs_pair") (("1" (REWRITE "Subs_pair") (("1" (REWRITE "Subs_c_app") (("1" (REWRITE "Subs_c_app") (("1" (REWRITE "Subs_pair") (("1" (REWRITE "Subs_pair") (("1" (REWRITE "term_c_app_extensionality") (("1" (HIDE 2) (("1" (INST? -1) (("1" (PROP) (("1" (HIDE -2) (("1" (REVEAL -3) (("1" (REPLACE -1 -2) (("1" (HIDE -1) (("1" (REWRITE "Subs_pair") (("1" (REWRITE "Subs_pair") (("1" (REWRITE "Subs_pair") (("1" (REWRITE "Subs_pair") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (REWRITE "term_pair_extensionality") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL ((|term| TYPE-DECL NIL |term_adt| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|every| ADT-DEF-DECL "boolean" |term_adt| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (TRUE CONST-DECL "bool" |booleans| NIL) (|Sub| TYPE-EQ-DECL NIL |substitution| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (|disjoint?| CONST-DECL "bool" |sets| NIL) (|union| CONST-DECL "set" |sets| NIL) (|is_finite| CONST-DECL "bool" |finite_sets| NIL) (|finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL) (|vars_dom_sub| DEF-DECL "finite_set[variable]" |substitution| NIL) (|vars_range_sub| DEF-DECL "finite_set[variable]" |substitution| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|Subs| DEF-DECL "term" |substitution| NIL) (|term_induction| FORMULA-DECL NIL |term_adt| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (>= CONST-DECL "bool" |reals| NIL) (|atom| TYPE-EQ-DECL NIL |atoms| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (|perm| TYPE-EQ-DECL NIL |atoms| NIL) (|variable| TYPE-EQ-DECL NIL |nominal_term| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (|character| TYPE-DECL NIL |character_adt| NIL) (|char?| ADT-RECOGNIZER-DECL "[character -> boolean]" |character_adt| NIL) (|char| TYPE-EQ-DECL NIL |strings| NIL) (|symbol| TYPE-EQ-DECL NIL |nominal_term| NIL) (|commutative_symbol| TYPE-EQ-DECL NIL |nominal_term| NIL) (|Subs_atom| FORMULA-DECL NIL |substitution| NIL) (|finite_intersection1| APPLICATION-JUDGEMENT "finite_set" |finite_sets| NIL) (|finite_union| APPLICATION-JUDGEMENT "finite_set" |finite_sets| NIL) (|empty?| CONST-DECL "bool" |sets| NIL) (|intersection| CONST-DECL "set" |sets| NIL) (* ADT-CONSTRUCTOR-DECL "[[perm, variable] -> (susp?)]" |term_adt| NIL) (|susp?| ADT-RECOGNIZER-DECL "[term -> boolean]" |term_adt| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|nonempty_singleton_finite| APPLICATION-JUDGEMENT "non_empty_finite_set" |finite_sets| NIL) (|singleton| CONST-DECL "(singleton?)" |sets| NIL) (|Vars| DEF-DECL "finite_set[variable]" |nominal_term| NIL) (|member_var_term_sub| FORMULA-DECL NIL |substitution| NIL) (|sub_skip_term| FORMULA-DECL NIL |substitution| NIL) (|member| CONST-DECL "bool" |sets| NIL) (|Subs_unit| FORMULA-DECL NIL |substitution| NIL) (|Subs_pair| FORMULA-DECL NIL |substitution| NIL) (|term_pair_extensionality| FORMULA-DECL NIL |term_adt| NIL) (|pair?| ADT-RECOGNIZER-DECL "[term -> boolean]" |term_adt| NIL) (|pair| ADT-CONSTRUCTOR-DECL "[[term, term] -> (pair?)]" |term_adt| NIL) (|abs| ADT-CONSTRUCTOR-DECL "[[atom, term] -> (abs?)]" |term_adt| NIL) (|abs?| ADT-RECOGNIZER-DECL "[term -> boolean]" |term_adt| NIL) (|term_abs_extensionality| FORMULA-DECL NIL |term_adt| NIL) (|Subs_abs| FORMULA-DECL NIL |substitution| NIL) (|term_app_extensionality| FORMULA-DECL NIL |term_adt| NIL) (|app?| ADT-RECOGNIZER-DECL "[term -> boolean]" |term_adt| NIL) (|app| ADT-CONSTRUCTOR-DECL "[[symbol, term] -> (app?)]" |term_adt| NIL) (|Subs_app| FORMULA-DECL NIL |substitution| NIL) (|Subs_c_app| FORMULA-DECL NIL |substitution| NIL) (|c_app| ADT-CONSTRUCTOR-DECL "[[commutative_symbol, pair] -> (c_app?)]" |term_adt| NIL) (|c_app?| ADT-RECOGNIZER-DECL "[term -> boolean]" |term_adt| NIL) (|term_c_app_extensionality| FORMULA-DECL NIL |term_adt| NIL) (|pair| TYPE-EQ-DECL NIL |term_adt| NIL) (|term1| ADT-ACCESSOR-DECL "[pair -> term]" |term_adt| NIL) (|term2| ADT-ACCESSOR-DECL "[pair -> term]" |term_adt| NIL)) NIL NIL NIL SHOSTAK))("nominalunif" |nominalunif| |cdr_smaller_size_TCC1| 0 (|cdr_smaller_size_TCC1-1| NIL 3756715337 NIL ("" (SUBTYPE-TCC) NIL NIL) NIL NIL NIL NIL NIL NIL))("nominal_term" |nominal_term| |ext_reverse| 0 (|ext_reverse-1| NIL 3756732826 NIL ("" (INDUCT "t") (("1" (SKEEP) (("1" (SKEEP) (("1" (EXPAND "ext" 1 2) (("1" (EXPAND "ext" 1) (("1" (REWRITE "act_reverse2") NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKEEP) (("2" (SKEEP) (("2" (EXPAND "ext" 1 2) (("2" (POSTPONE) NIL NIL)) NIL)) NIL)) NIL) ("3" (POSTPONE) NIL NIL) ("4" (POSTPONE) NIL NIL) ("5" (POSTPONE) NIL NIL) ("6" (POSTPONE) NIL NIL) ("7" (POSTPONE) NIL NIL)) NIL) NIL NIL NIL NIL NIL SHOSTAK))("nominal_term" |nominal_term| |depth_TCC5| 0 (|depth_TCC5-1| NIL 3756732813 NIL ("" (TERMINATION-TCC) NIL NIL) NIL NIL NIL NIL NIL NIL))("nominal_term" |nominal_term| |depth_TCC4| 0 (|depth_TCC4-1| NIL 3756732813 NIL ("" (TERMINATION-TCC) NIL NIL) NIL NIL NIL NIL NIL NIL))("nominal_term" |nominal_term| |depth_TCC3| 0 (|depth_TCC3-1| NIL 3756732813 NIL ("" (TERMINATION-TCC) NIL NIL) NIL NIL NIL NIL NIL NIL))("nominal_term" |nominal_term| |depth_TCC2| 0 (|depth_TCC2-1| NIL 3756732813 NIL ("" (TERMINATION-TCC) NIL NIL) NIL NIL NIL NIL NIL NIL))("nominal_term" |nominal_term| |depth_TCC1| 0 (|depth_TCC1-1| NIL 3754988819 NIL ("" (TERMINATION-TCC) NIL NIL) NIL ((<< ADT-DEF-DECL "(strict_well_founded?[term])" |term_adt| NIL) (|pair| TYPE-EQ-DECL NIL |term_adt| NIL) (|pair?| ADT-RECOGNIZER-DECL "[term -> boolean]" |term_adt| NIL) (|variable| TYPE-EQ-DECL NIL |nominal_term| NIL) (TRUE CONST-DECL "bool" |booleans| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|term| TYPE-DECL NIL |term_adt| NIL) (|commutative_symbol| TYPE-EQ-DECL NIL |nominal_term| NIL) (|symbol| TYPE-EQ-DECL NIL |nominal_term| NIL) (|char| TYPE-EQ-DECL NIL |strings| NIL) (|char?| ADT-RECOGNIZER-DECL "[character -> boolean]" |character_adt| NIL) (|character| TYPE-DECL NIL |character_adt| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|perm| TYPE-EQ-DECL NIL |atoms| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (|atom| TYPE-EQ-DECL NIL |atoms| NIL) (>= CONST-DECL "bool" |reals| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)) NIL NIL NIL NIL))("nominal_term" |nominal_term| |depth_TCC5| 0 (|depth_TCC5-1| NIL 3756732813 ("" (TERMINATION-TCC) NIL NIL) NIL NIL))("nominal_term" |nominal_term| |depth_TCC4| 0 (|depth_TCC4-1| NIL 3756732813 ("" (TERMINATION-TCC) NIL NIL) NIL NIL))("nominal_term" |nominal_term| |depth_TCC3| 0 (|depth_TCC3-1| NIL 3756732813 ("" (TERMINATION-TCC) NIL NIL) NIL NIL))("nominal_term" |nominal_term| |depth_TCC2| 0 (|depth_TCC2-1| NIL 3756732813 ("" (TERMINATION-TCC) NIL NIL) NIL NIL))("nominal_term" |nominal_term| |depth_TCC1| 0 (|depth_TCC1-1| NIL 3754988819 ("" (TERMINATION-TCC) NIL NIL) ((<< ADT-DEF-DECL "(strict_well_founded?[term])" |term_adt| NIL) (|pair| TYPE-EQ-DECL NIL |term_adt| NIL) (|pair?| ADT-RECOGNIZER-DECL "[term -> boolean]" |term_adt| NIL) (|variable| TYPE-EQ-DECL NIL |nominal_term| NIL) (TRUE CONST-DECL "bool" |booleans| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|term| TYPE-DECL NIL |term_adt| NIL) (|commutative_symbol| TYPE-EQ-DECL NIL |nominal_term| NIL) (|symbol| TYPE-EQ-DECL NIL |nominal_term| NIL) (|char| TYPE-EQ-DECL NIL |strings| NIL) (|char?| ADT-RECOGNIZER-DECL "[character -> boolean]" |character_adt| NIL) (|character| TYPE-DECL NIL |character_adt| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|perm| TYPE-EQ-DECL NIL |atoms| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (|atom| TYPE-EQ-DECL NIL |atoms| NIL) (>= CONST-DECL "bool" |reals| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL)) NIL))("nominal_term" |nominal_term| |ext_reverse| 0 (|ext_reverse-1| NIL 3756732826 ("" (INDUCT "t") (("1" (SKEEP) (("1" (SKEEP) (("1" (EXPAND "ext" 1 2) (("1" (EXPAND "ext" 1) (("1" (REWRITE "act_reverse2") NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (SKEEP) (("2" (SKEEP) (("2" (EXPAND "ext" 1 2) (("2" (POSTPONE) NIL NIL)) NIL)) NIL)) NIL) ("3" (POSTPONE) NIL NIL) ("4" (POSTPONE) NIL NIL) ("5" (POSTPONE) NIL NIL) ("6" (POSTPONE) NIL NIL) ("7" (POSTPONE) NIL NIL)) NIL) NIL SHOSTAK))("substitution" |substitution| |lemma_aux2| 0 (|lemma_aux2-1| NIL 3756841175 NIL ("" (INDUCT "t") (("1" (POSTPONE) NIL NIL) ("2" (POSTPONE) NIL NIL) ("3" (POSTPONE) NIL NIL) ("4" (SKOLEM 1 ("p1" "p2")) (("4" (PROP) (("4" (POSTPONE) NIL NIL)) NIL)) NIL) ("5" (POSTPONE) NIL NIL) ("6" (POSTPONE) NIL NIL) ("7" (POSTPONE) NIL NIL)) NIL) NIL NIL NIL NIL NIL SHOSTAK))("substitution" |substitution| |lemma_aux| 0 (|lemma_aux-1| NIL 3756822507 NIL ("" (INDUCT "s") (("1" (POSTPONE) NIL NIL) ("2" (POSTPONE) NIL NIL) ("3" (POSTPONE) NIL NIL) ("4" (SKOLEM 1 ("p1" "p2")) (("4" (PROP) (("4" (SKEEP) (("4" (EXPAND "Vars" -4) (("4" (EXPAND "member" -4) (("4" (EXPAND "union") (("4" (PROP) (("1" (HIDE -3) (("1" (POSTPONE) NIL NIL)) NIL) ("2" (POSTPONE) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("5" (POSTPONE) NIL NIL) ("6" (POSTPONE) NIL NIL) ("7" (POSTPONE) NIL NIL)) NIL) NIL NIL NIL NIL NIL SHOSTAK))("substitution" |substitution| |idempotent_lemma_aux| 0 (|idempotent_lemma_aux-1| NIL 3756805718 NIL ("" (INDUCT "t") (("1" (POSTPONE) NIL NIL) ("2" (SKOLEM 1 ("pm" "V")) (("2" (SKEEP) (("2" (EXPAND "idempotent?" -1) (("2" (PROP) (("2" (INST -1 "pi * X") (("2" (REPLACE -4 -3) (("2" (CASE "Subs(sigma)(Subs(sigma)(pi * X)) = Subs(sigma)(pm * V)") (("1" (REPLACE -1 -2 NIL T) (("1" (CASE "X = V") (("1" (REPLACE -1 -2) (("1" (LEMMA "Subs_perm_equal") (("1" (INST -1 "V" "pm" "pi" "sigma") (("1" (PROP) (("1" (ASSERT) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE -1 -2 -4 2) (("2" (GROUND) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (REPLACE -4 -1) (("2" (REPLACE -4 1) (("2" (PROPAX) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (SKEEP) (("3" (REPLACE -4 -3) (("3" (HIDE-ALL-BUT -3) (("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("4" (SKOLEM 1 ("p1" "p2")) (("4" (PROP) (("4" (SKEEP) (("4" (HIDE -1 -2 1) (("4" (POSTPONE) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("5" (POSTPONE) NIL NIL) ("6" (POSTPONE) NIL NIL) ("7" (POSTPONE) NIL NIL)) NIL) NIL NIL NIL NIL NIL SHOSTAK))("substitution" |substitution| |well_behaved?_dom_range| 0 (|well_behaved?_dom_range-1| NIL 3756923185 NIL ("" (INDUCT "sigma") (("1" (GRIND) NIL NIL) ("2" (SKOLEM 1 ("sub_head" "sub_tail")) (("2" (PROP) (("2" (SKEEP) (("2" (POSTPONE) NIL NIL)) NIL)) NIL)) NIL)) NIL) NIL NIL NIL NIL NIL SHOSTAK))("substitution" |substitution| |well_behaved?_var_disapper| 0 (|well_behaved?_var_disapper-1| NIL 3756921677 NIL ("" (INDUCT "t") (("1" (SKEEP) (("1" (SKEEP) (("1" (REWRITE "Subs_atom") (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("2" (SKOLEM 1 ("pm" "V")) (("2" (SKEEP) (("2" (CASE "X = V") (("1" (REPLACE -1 -2) (("1" (REPLACE -1 -4) (("1" (HIDE -1) (("1" (EXPAND "well_behaved?") (("1" (PROP) (("1" (INST -1 "V") (("1" (PROP) (("1" (INST -1 "V") (("1" (PROP) (("1" (HIDE -1) (("1" (LEMMA "Subs_perm_Var") (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (EXPAND "well_behaved?") (("2" (PROP) (("2" (INST -1 "V") (("2" (PROP) (("1" (INST -1 "X") (("1" (LEMMA "Subs_perm_Var") (("1" (INST -1 "V" "X" "pm" "(::)" "sigma") (("1" (PROP) NIL NIL)) NIL)) NIL)) NIL) ("2" (LEMMA "sub_skip_term") (("2" (INST -1 "sigma" "pm * V") (("2" (PROP) (("1" (REPLACE -1 -3) (("1" (HIDE -1 -2) (("1" (HIDE 1) (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("2" (HIDE -1 -2 3) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (SKEEP) (("3" (REWRITE "Subs_unit") (("3" (GRIND) NIL NIL)) NIL)) NIL) ("4" (SKOLEM 1 ("p1" "p2")) (("4" (PROP) (("4" (SKEEP) (("4" (REWRITE "Subs_pair" -5) (("4" (EXPAND "Vars" -5) (("4" (EXPAND "member" -5) (("4" (EXPAND "union") (("4" (PROP) (("1" (HIDE -3) (("1" (GRIND) NIL NIL)) NIL) ("2" (HIDE -2) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("5" (SKEEP) (("5" (SKEEP) (("5" (REWRITE "Subs_abs") (("5" (EXPAND "Vars" -4) (("5" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("6" (SKOLEM 1 ("f" "ag")) (("6" (PROP) (("6" (SKEEP) (("6" (REWRITE "Subs_app") (("6" (EXPAND "Vars" -4) (("6" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("7" (SKOLEM 1 ("f" "ag")) (("7" (PROP) (("7" (SKEEP) (("7" (CASE "ag = pair(term1(ag), term2(ag))") (("1" (REPLACE -1 -5) (("1" (REWRITE "Subs_c_app") (("1" (EXPAND "Vars" -5) (("1" (REPLACE -1 -5 :DIR RL) (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 1) (("2" (TYPEPRED "ag") (("2" (HIDE -1) (("2" (GRIND) (("2" (REWRITE "term_pair_extensionality") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL ((|term| TYPE-DECL NIL |term_adt| NIL) (PRED TYPE-EQ-DECL NIL |defined_types| NIL) (|every| ADT-DEF-DECL "boolean" |term_adt| NIL) (AND CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (TRUE CONST-DECL "bool" |booleans| NIL) (|Sub| TYPE-EQ-DECL NIL |substitution| NIL) (IMPLIES CONST-DECL "[bool, bool -> bool]" |booleans| NIL) (|set| TYPE-EQ-DECL NIL |sets| NIL) (|member| CONST-DECL "bool" |sets| NIL) (|is_finite| CONST-DECL "bool" |finite_sets| NIL) (|finite_set| TYPE-EQ-DECL NIL |finite_sets| NIL) (|vars_dom_sub| DEF-DECL "finite_set[variable]" |substitution| NIL) (|well_behaved?| CONST-DECL "bool" |substitution| NIL) (NOT CONST-DECL "[bool -> bool]" |booleans| NIL) (|Vars| DEF-DECL "finite_set[variable]" |nominal_term| NIL) (|Subs| DEF-DECL "term" |substitution| NIL) (|term_induction| FORMULA-DECL NIL |term_adt| NIL) (|number| NONEMPTY-TYPE-DECL NIL |numbers| NIL) (|boolean| NONEMPTY-TYPE-DECL NIL |booleans| NIL) (|number_field_pred| CONST-DECL "[number -> boolean]" |number_fields| NIL) (|number_field| NONEMPTY-TYPE-FROM-DECL NIL |number_fields| NIL) (|real_pred| CONST-DECL "[number_field -> boolean]" |reals| NIL) (|real| NONEMPTY-TYPE-FROM-DECL NIL |reals| NIL) (|rational_pred| CONST-DECL "[real -> boolean]" |rationals| NIL) (|rational| NONEMPTY-TYPE-FROM-DECL NIL |rationals| NIL) (|integer_pred| CONST-DECL "[rational -> boolean]" |integers| NIL) (|int| NONEMPTY-TYPE-EQ-DECL NIL |integers| NIL) (|bool| NONEMPTY-TYPE-EQ-DECL NIL |booleans| NIL) (>= CONST-DECL "bool" |reals| NIL) (|atom| TYPE-EQ-DECL NIL |atoms| NIL) (|list| TYPE-DECL NIL |list_adt| NIL) (|perm| TYPE-EQ-DECL NIL |atoms| NIL) (|variable| TYPE-EQ-DECL NIL |nominal_term| NIL) (|nat| NONEMPTY-TYPE-EQ-DECL NIL |naturalnumbers| NIL) (|below| TYPE-EQ-DECL NIL |nat_types| NIL) (|character| TYPE-DECL NIL |character_adt| NIL) (|char?| ADT-RECOGNIZER-DECL "[character -> boolean]" |character_adt| NIL) (|char| TYPE-EQ-DECL NIL |strings| NIL) (|symbol| TYPE-EQ-DECL NIL |nominal_term| NIL) (|commutative_symbol| TYPE-EQ-DECL NIL |nominal_term| NIL) (|finite_emptyset| NAME-JUDGEMENT "finite_set" |finite_sets| NIL) (|emptyset| CONST-DECL "set" |sets| NIL) (|Subs_atom| FORMULA-DECL NIL |substitution| NIL) (|sub_skip_term| FORMULA-DECL NIL |substitution| NIL) (|nonempty_singleton_finite| APPLICATION-JUDGEMENT "non_empty_finite_set" |finite_sets| NIL) (|singleton| CONST-DECL "(singleton?)" |sets| NIL) (|finite_intersection1| APPLICATION-JUDGEMENT "finite_set" |finite_sets| NIL) (|disjoint?| CONST-DECL "bool" |sets| NIL) (|empty?| CONST-DECL "bool" |sets| NIL) (|intersection| CONST-DECL "set" |sets| NIL) (* ADT-CONSTRUCTOR-DECL "[[perm, variable] -> (susp?)]" |term_adt| NIL) (|susp?| ADT-RECOGNIZER-DECL "[term -> boolean]" |term_adt| NIL) (|Subs_perm_Var| FORMULA-DECL NIL |substitution| NIL) (|null?| ADT-RECOGNIZER-DECL "[list -> boolean]" |list_adt| NIL) (|null| ADT-CONSTRUCTOR-DECL "(null?)" |list_adt| NIL) (= CONST-DECL "[T, T -> boolean]" |equalities| NIL) (|Subs_unit| FORMULA-DECL NIL |substitution| NIL) (|Subs_pair| FORMULA-DECL NIL |substitution| NIL) (|union| CONST-DECL "set" |sets| NIL) (|Subs_abs| FORMULA-DECL NIL |substitution| NIL) (|Subs_app| FORMULA-DECL NIL |substitution| NIL) (|term2| ADT-ACCESSOR-DECL "[pair -> term]" |term_adt| NIL) (|term1| ADT-ACCESSOR-DECL "[pair -> term]" |term_adt| NIL) (|pair| ADT-CONSTRUCTOR-DECL "[[term, term] -> (pair?)]" |term_adt| NIL) (|pair| TYPE-EQ-DECL NIL |term_adt| NIL) (|pair?| ADT-RECOGNIZER-DECL "[term -> boolean]" |term_adt| NIL) (|Subs_c_app| FORMULA-DECL NIL |substitution| NIL) (|term_pair_extensionality| FORMULA-DECL NIL |term_adt| NIL)) NIL NIL NIL SHOSTAK))("nominalunif" |nominalunif| |cdr_smaller_size_TCC1| 0 (|cdr_smaller_size_TCC1-1| NIL 3756760224 NIL ("" (SUBTYPE-TCC) NIL NIL) NIL NIL NIL NIL NIL NIL))("substitution" |substitution| |aux_lemma_fresh_sub2| 0 (|aux_lemma_fresh_sub2-1| NIL 3757062796 NIL ("" (INDUCT "t") (("1" (SKEEP) (("1" (SKEEP) (("1" (HIDE -1 -3 -4) (("1" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("2" (SKOLEM 1 ("pm" "V")) (("2" (SKEEP) (("2" (EXPAND "fresh?" 1) (("2" (EXPAND "fresh_subs") (("2" (PROP) (("1" (POSTPONE) NIL NIL) ("2" (HIDE-ALL-BUT 1) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (SKEEP) (("3" (EXPAND "fresh?" 1) (("3" (HIDE-ALL-BUT 1) (("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("4" (SKOLEM 1 ("p1" "p2")) (("4" (PROP) (("4" (SKEEP) (("4" (EXPAND "fresh?" 1) (("4" (EXPAND "x" 1) (("4" (POSTPONE) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("5" (POSTPONE) NIL NIL) ("6" (POSTPONE) NIL NIL) ("7" (POSTPONE) NIL NIL)) NIL) NIL NIL NIL NIL NIL SHOSTAK))("substitution" |substitution| |aux_lemma_fresh_sub_aux| 0 (|aux_lemma_fresh_sub_aux-1| NIL 3757068891 NIL ("" (INDUCT "t") (("1" (POSTPONE) NIL NIL) ("2" (SKOLEM 1 ("pm" "V")) (("2" (SKEEP) (("2" (EXPAND "fresh?" 1) (("2" (EXPAND "fresh_subs" 1) (("2" (PROP) (("1" (LEMMA "Subs_perm_Var_aux") (("1" (INST -1 "V" "pm" "sigma") (("1" (REPLACE -1 -2) (("1" (HIDE -1) (("1" (REWRITE "ext_reverse_fresh") NIL NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE -1) (("2" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("3" (SKEEP) (("3" (EXPAND "fresh?" 1) (("3" (HIDE -1) (("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL) ("4" (SKOLEM 1 ("p1" "p2")) (("4" (PROP) (("4" (SKEEP) (("4" (EXPAND "fresh?" 1) (("4" (EXPAND "x") (("4" (LIFT-IF) (("4" (PROP) (("1" (REWRITE "Subs_pair") (("1" (EXPAND "fresh" -5) (("1" (PROP) (("1" (HIDE -1 -2) (("1" (GRIND) (("1" (REWRITE "fresh_subs_append_context") NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (HIDE-ALL-BUT 2) (("2" (GRIND) NIL NIL)) NIL) ("3" (HIDE-ALL-BUT 2) (("3" (GRIND) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("5" (POSTPONE) NIL NIL) ("6" (POSTPONE) NIL NIL) ("7" (POSTPONE) NIL NIL)) NIL) NIL NIL NIL NIL NIL SHOSTAK))("substitution" |substitution| |aux_lemma_fresh_sub1| 0 (|aux_lemma_fresh_sub1-1| NIL 3757073898 NIL ("" (POSTPONE) NIL NIL) NIL NIL NIL NIL NIL SHOSTAK))("substitution" |substitution| |aux_lemma_fresh_sub_aux| 0 (|aux_lemma_fresh_sub_aux-1| NIL 3757073937 NIL ("" (POSTPONE) NIL NIL) NIL NIL NIL NIL NIL SHOSTAK))("nominalunif" |nominalunif| |suf_cond_var_in_unif_prb_lst| 0 (|suf_cond_var_in_unif_prb_lst-1| NIL 3757084728 NIL ("" (INDUCT "unif_prb_lst") (("1" (GRIND) NIL NIL) ("2" (SKOLEM 1 ("unif_prb" "unif_prb_tail")) (("2" (PROP) (("2" (SKEEP) (("2" (EXPAND "apply_sub_prb_lst" -2) (("2" (REWRITE "vars_lst_append") (("2" (EXPAND "member" -2) (("2" (EXPAND "union" -2) (("2" (PROP) (("1" (EXPAND "vars_lst" -1) (("1" (EXPAND "member" -1) (("1" (EXPAND "union" -1) (("1" (PROP) (("1" (HIDE-ALL-BUT -1) (("1" (GRIND) NIL NIL)) NIL) ("2" (EXPAND "member" -1) (("2" (PROP) (("1" (POSTPONE) NIL NIL) ("2" (POSTPONE) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) ("2" (POSTPONE) NIL NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL)) NIL) NIL NIL NIL NIL NIL SHOSTAK))("nominalunif" |nominalunif| |valid_quadruple?_cdr_TCC1| 0 (|valid_quadruple?_cdr_TCC1-1| NIL 3757236431 NIL ("" (SUBTYPE-TCC) NIL NIL) NIL NIL NIL NIL NIL NIL))