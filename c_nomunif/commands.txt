# variable case
(then@
    (name-replace "t_alg" "car(x!1)`1") 
    (name-replace "s_alg" "car(x!1)`2")
    (name-replace "sigma1_alg" "(: (V(s_alg), ext(reverse(p(s_alg)))(t_alg) ) :)")
    (name-replace "new_sigma_alg" "append(sigma1_alg, sigma)") 
    (name-replace "Delta1_alg" "fresh_subs?(sigma1_alg, Delta)`1")
    (name-replace "bool1_alg" "fresh_subs?(sigma1_alg, Delta)`2")
    (name-replace "unif_prb_lst1_alg" "apply_sub_prb_lst(sigma1_alg, cdr(x!1))")
    (name-replace "unif_prb_lst2_alg" "apply_sub_prb_lst(sigma1_alg, fix_pnt2unif_prb(x!2))")
    (name-replace "new_Delta_alg" "append(Delta1_alg, Delta)")
    (name-replace "new_unif_prb_lst_alg" "append(unif_prb_lst1_alg, unif_prb_lst2_alg)") 
)


# variable case - change s and t 
(name-replace "sigma1_alg" "(: (V(t_alg), ext(reverse(p(t_alg)))(s_alg) ) :)")

# variable second case 
(name-replace "new_fix_pnt_eq_alg" "(: (append(p(t_alg), reverse(p(s_alg))), V(t_alg)) :)")
(name-replace "new_fix_pnt_eq_lst_alg" "append(new_fix_pnt_eq_alg, fix_pnt_eq_lst!1)")

# pair 
(name-replace "unif_prb1_alg" "(: (term1(t_alg), term1(s_alg)) :)")
(name-replace "unif_prb2_alg" "(: (term2(t_alg), term2(s_alg)) :)")
??? Tem que por mais um name replace aqui. 
